{
    "head": {
        "script": {
            "_html_": [
                {
                    "id": "os-base",
                    "result": "You can create a new `os` object and add an empty `apps` object to it by using JavaScript like this:\n\n```javascript\nwindow.os = {\n    apps: {}\n};\n\n```"
                },
                {
                    "id": "filesystem",
                    "result": "Here's how you can implement this in JavaScript:\n\n```javascript\n(function() {\n    // Load filesystem from localStorage, if it exists, otherwise initialize it as an empty object\n    var filesystem = JSON.parse(localStorage.getItem('filesystem')) || {};\n    \n    // Define fs methods on window.os\n    window.os = window.os || {};\n    window.os.fs = {\n        sync: function() {\n            localStorage.setItem('filesystem', JSON.stringify(filesystem));\n        },\n        readPath: function(path) {\n            path = path[0] === '/' ? path.slice(1) : path;  // Remove leading '/' if exists\n            var pathArray = path.split('/');\n            var current = filesystem;\n            for (var i = 0; i < pathArray.length; i++) {\n                if (current[pathArray[i]] === undefined) {\n                    return undefined;  // Path not found\n                } else {\n                    current = current[pathArray[i]];  // Traverse down the path\n                }\n            }\n            return current;  // Return content at path\n        },\n        write: function(path, content) {\n            path = path[0] === '/' ? path.slice(1) : path;  // Remove leading '/' if exists\n            var pathArray = path.split('/');\n            var current = filesystem;\n            for (var i = 0; i < pathArray.length - 1; i++) {  // Do not traverse to last element, we will assign content there\n                if (current[pathArray[i]] === undefined) {\n                    current[pathArray[i]] = {};  // Create path if it does not exist\n                }\n                current = current[pathArray[i]];  // Traverse down the path\n            }\n            current[pathArray[pathArray.length - 1]] = content;  // Assign content to last element in path\n            this.sync();  // Save filesystem to localStorage\n        },\n        ls: function(path) {\n            path = path[0] === '/' ? path.slice(1) : path;  // Remove leading '/' if exists\n            var current = filesystem;\n            if (path) {\n                var pathArray = path.split('/');\n                for (var i = 0; i < pathArray.length; i++) {\n                    if (current[pathArray[i]] === undefined) {\n                        return undefined;  // Path not found\n                    } else {\n                        current = current[pathArray[i]];  // Traverse down the path\n                    }\n                }\n            }\n            return Object.keys(current);  // Return entries at path\n        },\n        mkdir: function(path, dirName) {\n            this.write(path + '/' + dirName, {});  // Write an empty directory at path\n        },\n        rm: function(path) {\n            path = path[0] === '/' ? path.slice(1) : path;  // Remove leading '/' if exists\n            var pathArray = path.split('/');\n            var current = filesystem;\n            for (var i = 0; i < pathArray.length - 1; i++) {  // Do not traverse to last element, we will remove it here\n                if (current[pathArray[i]] === undefined) {\n                    return;  // Path not found, do nothing\n                } else {\n                    current = current[pathArray[i]];  // Traverse down the path\n                }\n            }\n            delete current[pathArray[pathArray.length - 1]];  // Remove last element in path\n            this.sync();  // Save filesystem to localStorage\n        },\n        isFile: function(path) {\n            var content = this.readPath(path);\n            return typeof content === 'string';  // Return true if content at path is a string\n        }\n    };\n})();\n\n```"
                },
                {
                    "id": "gui-object",
                    "result": "Sure, here is a simple JavaScript snippet that defines an empty object named 'gui' within the 'window.os' object:\n\n```javascript\nif (typeof window.os === \"undefined\") {\n    window.os = {};\n}\n\nwindow.os.gui = {};\n\n```"
                },
                {
                    "id": "utils",
                    "result": "Here is how you can create such a self-executing function in JavaScript:\n\n```javascript\n(function() {\n    if (!window.os || !window.os.gui) {\n        window.os = window.os || {};\n        window.os.gui = window.os.gui || {};\n    }\n    \n    window.os.gui.utils = {\n        setSizeAndCenter: function (root, width, height) {\n            root.style.width = width + 'px';\n            root.style.height = height + 'px';\n            \n            root.style.position = 'absolute';\n            root.style.top = '50%';\n            root.style.left = '50%';\n            root.style.transform = 'translate(-50%, -50%)';\n        }\n    };\n})();\n\n```"
                },
                {
                    "id": "title-bar",
                    "result": "Here is an example of how you can implement this in JavaScript:\n\n```javascript\n(function() {\n    window.os = window.os || {};\n    window.os.gui = window.os.gui || {};\n    window.os.gui.titleBar = function(title, targetElement) {\n        // Create root DOM element\n        var titleBar = document.createElement('div');\n        titleBar.className = 'titleBar';\n        \n        // Add title to span and append to titleBar\n        var titleSpan = document.createElement('span');\n        titleSpan.textContent = title;\n        titleBar.appendChild(titleSpan);\n        \n        // Add button to titleBar\n        var closeButton = document.createElement('button');\n        closeButton.textContent = 'x';\n        closeButton.addEventListener('click', function() {\n            document.body.removeChild(targetElement);\n        });\n        titleBar.appendChild(closeButton);\n        \n        // Add drag and drop functionality to titleBar\n        var dragging = false;\n        var startX;\n        var startY;\n        var offsetX;\n        var offsetY;\n        \n        titleBar.addEventListener('mousedown', function(e) {\n            dragging = true;\n            startX = e.clientX;\n            startY = e.clientY;\n            offsetX = targetElement.offsetLeft;\n            offsetY = targetElement.offsetTop;\n        });\n        \n        titleBar.addEventListener('mouseup', function() {\n            dragging = false;\n        });\n        \n        titleBar.addEventListener('mousemove', function(e) {\n            if (dragging) {\n                var x = e.clientX - startX;\n                var y = e.clientY - startY;\n                targetElement.style.left = (offsetX + x) + 'px';\n                targetElement.style.top = (offsetY + y) + 'px';\n            }\n        });\n        \n        return titleBar;\n    };\n})();\n\n```"
                },
                {
                    "id": "window",
                    "result": "Here is an example of how you can implement this in JavaScript:\n\n```javascript\n(function() {\n    if (!window.os) window.os = {};\n    if (!window.os.gui) window.os.gui = {};\n    if (!window.os.gui.utils) window.os.gui.utils = { setSizeAndCenter: setSizeAndCenter }; // Assuming this exists somewhere else in your code\n    \n    window.os.gui.createWindow = function(title = \"Default Title\", content = null, width = 400, height = 300) {\n        var root = document.createElement(\"div\");\n        root.className = \"window\";\n        \n        window.os.gui.utils.setSizeAndCenter(root, width, height);\n        \n        var titlePlaceholder = document.createElement(\"div\");\n        titlePlaceholder.className = \"titlePlaceholder\";\n        root.appendChild(titlePlaceholder);\n        \n        var toolbarPlaceholder = document.createElement(\"div\");\n        toolbarPlaceholder.className = \"toolbarPlaceholder\";\n        root.appendChild(toolbarPlaceholder);\n        \n        var contentPlaceholder = document.createElement(\"div\");\n        contentPlaceholder.className = \"contentPlaceholder\";\n        root.appendChild(contentPlaceholder);\n        \n        var statusPlaceholder = document.createElement(\"div\");\n        statusPlaceholder.className = \"statusPlaceholder\";\n        root.appendChild(statusPlaceholder);\n        \n        if(typeof window.os.gui.titleBar === 'function') {\n            var titleBar = window.os.gui.titleBar(title, root);\n            titlePlaceholder.appendChild(titleBar);\n        }\n        \n        if(content && content instanceof Node) {\n            contentPlaceholder.appendChild(content);\n        }\n        \n        var bringToFront = function() {\n            var windows = document.querySelectorAll(\".window\");\n            for(var i = 0; i < windows.length; i++) {\n                windows[i].style.zIndex = 1;\n            }\n            root.style.zIndex = 2;\n        }\n        \n        root.onclick = bringToFront;\n        \n        document.body.appendChild(root);\n        \n        setTimeout(bringToFront, 20);\n        \n        return root;\n    }\n})();\n\n```"
                },
                {
                    "id": "window-utils",
                    "result": "Here is an example of how you can create such a self-executing function in JavaScript:\n\n```javascript\n(function() {\n    // Check if window.os exists and is an object\n    if (typeof window.os === 'undefined' || typeof window.os !== 'object') {\n        window.os = {};\n    }\n    \n    // Check if window.os.gui exists and is an object\n    if (typeof window.os.gui === 'undefined' || typeof window.os.gui !== 'object') {\n        window.os.gui = {};\n    }\n    \n    // Define the updateStatus function\n    window.os.gui.updateStatus = function(win, value) {\n        var statusElement = win.querySelector('.statusPlaceholder');\n        if (statusElement !== null && statusElement !== undefined) {\n            statusElement.innerText = value;\n        } else {\n            console.error('Element with class .statusPlaceholder not found in provided win DOM element');\n        }\n    };\n})();\n\n```"
                },
                {
                    "id": "toolbar",
                    "result": "Here is an example of how you can implement this in JavaScript:\n\n```javascript\n(function() {\n    if (!window.os) window.os = {};\n    if (!window.os.gui) window.os.gui = {};\n    \n    window.os.gui.toolbar = function(rootElement) {\n        var toolbar = document.createElement('div');\n        toolbar.className = 'toolbar';\n        \n        rootElement.querySelector('.toolbarPlaceholder').appendChild(toolbar);\n        \n        return {\n            addButton: function(text, callback) {\n                var button = document.createElement('button');\n                button.textContent = text;\n                button.addEventListener('click', callback);\n                toolbar.appendChild(button);\n            }\n        };\n    };\n})();\n\n```"
                },
                {
                    "id": "prompt",
                    "result": "Here is an example of how you can implement this in JavaScript:\n\n```javascript\n(function() {\n    if (!window.os) window.os = {};\n    if (!window.os.gui) window.os.gui = {};\n    \n    window.os.gui.createPrompt = function(title, callback) {\n        // create root dom element with class 'editor'\n        var root = document.createElement('div');\n        root.className = 'editor';\n        \n        // add text input element to root dom element full width\n        var input = document.createElement('input');\n        input.style.width = '100%';\n        root.appendChild(input);\n        \n        // add button element to root dom element and set text to 'OK'\n        var button = document.createElement('button');\n        button.textContent = 'OK';\n        root.appendChild(button);\n        \n        // call os.gui.createWindow with given parameters\n        var win = window.os.gui.createWindow(title, root, 300, 100);\n        \n        // when button is clicked, call callback with input value and remove win element from body\n        button.addEventListener('click', function() {\n            callback(input.value);\n            document.body.removeChild(win);\n        });\n    };\n})();\n\n```"
                },
                {
                    "id": "os-icon",
                    "result": "Here is an example of how you can create such a function in JavaScript:\n\n```javascript\n(function() {\n    if (!window.os) window.os = {};\n    if (!window.os.gui) window.os.gui = {};\n    \n    window.os.gui.addIcon = function(name, icon, callback, container) {\n        // create root element\n        var root = document.createElement('div');\n        root.classList.add('icon');\n        \n        // create emoji element\n        var emoji = document.createElement('div');\n        emoji.classList.add('emoji');\n        \n        // create app-name element\n        var appName = document.createElement('div');\n        appName.classList.add('app-name');\n        appName.textContent = name;\n        \n        // add icon to emoji element\n        emoji.textContent = icon;\n        \n        // add event listener to root element\n        root.addEventListener('click', callback);\n        \n        // add elements to root element\n        root.appendChild(emoji);\n        root.appendChild(appName);\n        \n        // add icon to container\n        container.appendChild(root);\n        \n        // add icon-* class to emoji element if name contains dot character\n        if (name.includes('.')) {\n            var extension = name.split('.').pop();\n            emoji.classList.add('icon-' + extension);\n        }\n    };\n})();\n\n```"
                },
                {
                    "id": "editor-app",
                    "result": "Here is how you can implement this in JavaScript:\n\n```javascript\n(function() {\n    window.os.apps.editor = function(path) {\n        const root = document.createElement('div');\n        root.className = 'editor';\n        document.body.appendChild(root);\n        \n        const win = os.gui.createWindow('\ud83d\udcc4 Text Editor', root, 700, 500);\n        const toolbar = os.gui.toolbar(win);\n        toolbar.addButton('\ud83d\udcbe', save);\n        \n        const textarea = document.createElement('textarea');\n        textarea.style.width = '100%';\n        textarea.style.height = '100%';\n        textarea.style.whiteSpace = 'nowrap';\n        root.appendChild(textarea);\n        \n        let content = '';\n        if (path) {\n            content = os.fs.readPath(path);\n            textarea.value = content;\n        }\n        \n        function save() {\n            if (path) {\n                content = textarea.value;\n                os.fs.write(path, content);\n            } else {\n                os.gui.createPrompt('Save File', (newPath) => {\n                    os.fs.write(newPath, textarea.value);\n                });\n            }\n        }\n    };\n})();\n\n```"
                },
                {
                    "id": "ide-app",
                    "result": "Here is how you can create such an asynchronous self-executing function in JavaScript:\n\n```javascript\n(async () => {\n  window.os.apps.ide = async (path) => {\n    const root = document.createElement('div');\n    root.className = 'editor';\n    document.body.appendChild(root);\n    \n    const win = os.gui.createWindow('\ud83d\udcc4 IDE', root, 700, 600);\n    const toolbar = os.gui.toolbar(win);\n    \n    const textarea = document.createElement('textarea');\n    textarea.id = 'code';\n    textarea.style.width = '100%';\n    textarea.style.height = '400px';\n    textarea.style.whiteSpace = 'nowrap';\n    root.appendChild(textarea);\n    \n    const result = document.createElement('textarea');\n    result.id = 'result';\n    result.style.width = '100%';\n    result.style.height = '130px';\n    result.style.whiteSpace = 'nowrap';\n    result.readOnly = true;\n    root.appendChild(result);\n    \n    if (path) {\n      const content = await os.fs.readPath(path);\n      textarea.value = content;\n    }\n    \n    const save = () => {\n      if (path) {\n        const content = textarea.value;\n        os.fs.write(path, content);\n      } else {\n        os.gui.createPrompt('Save File', (newPath) => {\n          os.fs.write(newPath, textarea.value);\n        });\n      }\n    };\n    \n    const run = async () => {\n      result.value = 'Compiling...';\n      const compiled = await os.runtime.compile(textarea.value);\n      result.value = compiled;\n    };\n    \n    toolbar.addButton('\ud83d\udcbe', () => save());\n    toolbar.addButton('\u25b6\ufe0f', () => run());\n  };\n})();\n\n```"
                },
                {
                    "id": "browser-app",
                    "result": "Here is your requested JavaScript code:\n\n```javascript\n(function() {\n    window.os = window.os || {};\n    window.os.apps = window.os.apps || {};\n    \n    window.os.apps.browser = function(path) {\n        const root = document.createElement('div');\n        root.className = 'browser';\n        document.body.appendChild(root);\n        \n        const win = os.gui.createWindow('Browser', root);\n        const toolbar = os.gui.toolbar(win);\n        \n        toolbar.addButton('\ud83d\udcc1', () => {\n            os.gui.createPrompt('Enter folder name', name => {\n                os.fs.mkdir(path, name);\n                refresh();\n            });\n        });\n        \n        toolbar.addButton('\ud83d\udcc4', () => {\n            os.gui.createPrompt('Enter file name', name => {\n                os.fs.write(path + '/' + name, \"\");\n                refresh();\n            });\n        });\n        \n        toolbar.addButton('\ud83d\uddd1\ufe0f', () => {\n            os.fs.rm(path);\n            path = path.substring(0, path.lastIndexOf('/'));\n            refresh();\n        });\n        \n        const refresh = () => {\n            while (root.firstChild) {\n                root.removeChild(root.firstChild);\n            }\n            \n            os.gui.updateStatus(win, path);\n            \n            const files = os.fs.ls(path);\n            \n            if (path.length > 1) {\n                os.gui.addIcon('..', '\ud83d\udd19', () => {\n                    path = path.substring(0, path.lastIndexOf('/'));\n                    refresh();\n                }, root);\n            }\n            \n            files.forEach(name => {\n                const isFile = os.fs.isFile(path + '/' + name);\n                \n                const callback = () => {\n                    if (isFile) {\n                        os.apps.ide(path + '/' + name);\n                    } else {\n                        path = path + '/' + name;\n                    }\n                    refresh();\n                };\n                \n                os.gui.addIcon(name, isFile ? '\ud83d\udcc4' : '\ud83d\udcc1', callback, root);\n            });\n        };\n        \n        refresh();\n    };\n})();\n\n```"
                },
                {
                    "id": "viwer-app",
                    "result": "Here is the JavaScript code for your problem:\n\n```javascript\n(function() {\n    window.os = window.os || {};\n    window.os.apps = window.os.apps || {};\n    \n    window.os.apps.viewer = function(path) {\n        var div = document.createElement('div');\n        div.className = 'viewer';\n        document.body.appendChild(div);\n        \n        window.os.gui.createWindow('View: ' + path, div);\n        \n        var content = window.os.fs.readPath(path);\n        \n        var pre = document.createElement('pre');\n        pre.className = 'content';\n        pre.innerHTML = content;\n        div.appendChild(pre);\n    };\n})();\n\n```"
                }
            ]
        },
        "style": {
            "_html_": [
                {
                    "id": "title-bar-styles",
                    "result": "Here is the CSS code that you can use to achieve these styles:\n\n```css\n.titleBar {\n    background-color: orange;\n    border-bottom: 1px solid black;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: monospace;\n    font-size: small;\n    padding: 5px;\n    user-select: none; /* This will prevent text selection */\n}\n\n/* This will apply styles to all buttons inside titleBar */\n.titleBar button {\n    border: 1px solid black;\n    font-family: monospace;\n    font-size: small;\n    border-radius: 2px; /* This will give rounded corners */\n}\n\n```"
                },
                {
                    "id": "window-container-styles",
                    "result": "Sure, here is the CSS code that matches your requirements:\n\n```css\n.window {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    background-color: white;\n    padding: 1px;\n    border: 2px solid black;\n    border-radius: 4px;\n}\n\n.contentPlaceholder {\n    flex-grow: 1;\n    overflow: auto;\n    padding: 5px;\n}\n\n.toolbarPlaceholder {\n    border-bottom: 1px solid black;\n}\n\n.statusPlaceholder {\n    border-top: 1px solid black;\n    font-family: monospace;\n    font-size: small;\n}\n\n```"
                },
                {
                    "id": "toolbar-styles",
                    "result": "Sure, here is the CSS code that you can use:\n\n```css\n.toolbar {\n    padding: 3px 5px;\n    margin-bottom: 2px;\n    display: flex;\n    justify-content: flex-start;\n}\n\n.toolbar button {\n    border: none;\n    cursor: pointer;\n    background-color: white;\n}\n\n.toolbar button:hover {\n    background-color: lightgray;\n}\n\n```"
                },
                {
                    "id": "look-and-feel",
                    "result": "```css\nbody {\n    background-color: #2E393D;\n}\n\nbody > .icon > .app-name {\n    color: white;\n}\n\n```"
                },
                {
                    "id": "desktop-icons",
                    "result": "Sure, here's how you can define these styles in CSS:\n\n```css\n.icon {\n    width: 64px;\n    min-height: 64px;\n    text-align: center;\n    margin: 5px;\n    cursor: pointer;\n}\n\n.emoji {\n    display: inline-block;\n    font-size: 30px;\n    position: relative;\n}\n\n.app-name {\n    display: block;\n    font-size: 8px;\n    font-family: monospace;\n    color: black;\n    padding: 5px;\n    word-wrap: break-word;\n}\n\n```"
                },
                {
                    "id": "custom-icons",
                    "result": "Sure, here are the CSS styles for each of these classes with the specified properties:\n\n```css\n.icon-script::after {\n    content: \"\\1F4DC\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    font-size: 16px;\n}\n\n.icon-style::after {\n    content: \"\\1F3A8\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    font-size: 16px;\n}\n\n.icon-html::after {\n    content: \"\\1F4C4\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    font-size: 16px;\n}\n\n.icon-txt::after {\n    content: \"\\1F4C4\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    font-size: 16px;\n}\n\n```"
                },
                {
                    "id": "browser-styles",
                    "result": "Sure, you can define a CSS class named `.browser` with `display: flex;` and `flex-wrap: wrap;` in your CSS file like this:\n\n```css\n.browser {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n```"
                }
            ]
        }
    },
    "body": {
        "script": {
            "_html_": [
                {
                    "id": "runtime-compile",
                    "result": "Here is an example of how you can achieve this using JavaScript and Fetch API to make an HTTP request. \n\n```javascript\n// Define the function on window.os.runtime under compile key\nwindow.os.runtime = window.os.runtime || {};\nwindow.os.runtime.compile = async (code) => {\n    // Make an asynchronous POST request to http://localhost:8080/compile with json body {\"model\": \"deepseek-coder-6.7b-instruct.Q5_K_M.gguf\", instruction: code}\n    const response = await fetch('http://localhost:8080/compile', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({model: \"deepseek-coder-6.7b-instruct.Q5_K_M.gguf\", instruction: code})\n    });\n    \n    // Read the resulted text from the response and store it in a variable called result\n    const result = await response.text();\n    \n    // Search the script element with ID 'dev' and if it exists remove it\n    const existingScript = document.getElementById('dev');\n    if (existingScript) {\n        existingScript.remove();\n    }\n    \n    // Create a new script element with ID 'dev' and set its inner text to the result\n    const newScript = document.createElement('script');\n    newScript.id = 'dev';\n    newScript.text = result;\n    document.body.appendChild(newScript);\n    \n    // Return result \n    return result;\n};\n\n```"
                },
                {
                    "id": "editor-desktop-icon",
                    "result": "Sure, here is how you can create a self-executing function in JavaScript:\n\n```javascript\n(function() {\n    os.gui.addIcon('Text Editor', '\ud83d\udcc4', () => os.apps.editor(), document.body);\n})();\n\n```"
                },
                {
                    "id": "ide-desktop-icon",
                    "result": "Sure, here is an example of how you can create a self-executing function in JavaScript:\n\n```javascript\n(function() {\n    os.gui.addIcon('IDE', '\ud83d\udd25', () => os.apps.ide(), document.body);\n})();\n\n```"
                },
                {
                    "id": "add browser to desktop",
                    "result": "Sure, here is how you can create a self-executing function in JavaScript:\n\n```javascript\n(function() {\n    os.gui.addIcon('Browser', '\ud83d\udcc1', () => os.apps.browser(''), document.body);\n})();\n\n```"
                }
            ]
        }
    }
}