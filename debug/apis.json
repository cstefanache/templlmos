{
    "general-styles": "",
    "global-objects": "",
    "about": "/**\n * Returns information about the operating system.\n * @return {string} Information about the operating system.\n */\nwindow.os.about = function() { ... }\n/**\n * Logs a message to the console.\n * @param {string} message - The message to be logged.\n */\nwindow.os.log = function(message) { ... }\n",
    "tests": "/**\n * Executes log with about message.\n */\nfunction executeLogWithAbout() { ... }\n",
    "filesystem": "/**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() { ... }\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) { ... }\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) { ... }\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') { ... }\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) { ... }\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) { ... }\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) { ... }\n",
    "fs-tests": "",
    "output-styles": "",
    "output-window": "",
    "content-style": "",
    "content": "",
    "styles": "",
    "icon": "/**\n * Create an icon element with an emoji and a tooltip.\n * @param {HTMLElement} parent - The parent element to append this icon to.\n * @param {string} emoji - The emoji to display in this icon.\n * @param {string} title - The tooltip text to display when hovering over this icon.\n * @param {function} callback - The callback to call when this icon is clicked.\n */\nwindow.os.icon = function(parent, emoji, title, callback) { ... }\n",
    "desktop-app": "/**\n * Adds an application to the desktop content.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n */\nwindow.os.addApp = function(emoji, title, callback) { ... }\n",
    "draggable": "/**\n * Makes an element draggable by a given handle element.\n * @param {HTMLElement} root - The element to be made draggable.\n * @param {HTMLElement} dragHandleHTMLElement - The handle element to initiate the drag operation.\n */\nwindow.os.gui.makeDraggable = function(root, dragHandleHTMLElement) { ... }\n/**\n* Makes an element resizable by a given handle element.\n* @param {HTMLElement} root - The element to be made resizable.\n* @param {HTMLElement} resizeHandleHTMLElement - The handle element to initiate the resize operation.\n*/\nwindow.os.gui.makeResizable = function(root, resizeHandleHTMLElement) { ... }\n/**\n* Brings the specified DOM node to the front of its siblings.\n* @param {HTMLElement} rootDOMNode - The DOM node to bring to front.\n*/\nwindow.os.gui.bringToFront = function(rootDOMNode) { ... }\n",
    "titleBar": "/**\n * Creates a title bar with a title and a close button.\n * @param {HTMLElement} parentElement - The DOM element to append this title bar to.\n * @param {string} title - The title to display in the title bar.\n * @param {function} close - The callback to call when the close button is clicked.\n */\nwindow.os.gui.titleBar = function(parentElement, title, close) { ... }\n",
    "toolbar": "/**\n * Create a toolbar with a button inside it.\n * @param {HTMLElement} win - The window element to add toolbar to.\n * @returns {function(string, function): void} - The addButton function.\n */\nwindow.os.gui.createToolbar = function(win) { ... }\n",
    "window": "/**\n* Create a new window with given emoji, title, width and height.\n* @param {string} emoji - The emoji to display in the window's title bar.\n* @param {string} title - The title to display in the window's title bar.\n* @param {number} [width=400] - The width of the window in pixels.\n* @param {number} [height=300] - The height of the window in pixels.\n* @return {HTMLElement} The root DOM element of the newly created window.\n*/\nwindow.os.gui.createWindow = function(emoji, title, width = 400, height = 300) { ... }\n/**\n* Attach content to an existing window.\n* @param {HTMLElement} windowElement - The window to attach content to.\n* @param {HTMLElement} contentElement - The content to attach to the window.\n*/\nwindow.os.gui.attachToWindow = function(windowElement, contentElement) { ... }\n",
    "gui-styles": "",
    "extension": "/**\n * Register an extension with its corresponding emoji and callback.\n * @param {string} extension - The name of the extension to register.\n * @param {string} emoji - The corresponding emoji for this extension.\n * @param {function} callback - The callback to be executed when this extension is used.\n */\nwindow.os.registerExtension = function(extension, emoji, callback) { ... }\n",
    "app-icon": "/**\n * Create an icon element for a file or directory at given path\n * @param {string} path - The path to the file or directory\n * @param {function} callback - The callback to call when the icon is clicked\n * @returns {HTMLElement} - The icon element\n */\nwindow.os.getOSIcon = function(path, callback) { ... }\n",
    "registry": "/**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions this application can handle.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n",
    "hello-world": "/**\n * Create a root element div with an h1 child element containing 'Hello World'\n * If path is defined append a pre element containing the content of reading the file at the path\n * @param {HTMLElement} parent - The parent element to append the root element to\n * @param {string} [path] - The path to a file to read content from\n * @returns {HTMLElement} - The root element containing h1 and pre child elements\n */\nfunction helloWorld(parent, path) { ... }\n",
    "editor": "function editor(win, path) { ... }\n",
    "browser": "function browser(win, path='') { ... }\n",
    "run": "/**\n * Run an application in a new window.\n * @param {function} callback - The callback to run in the new window.\n * @param {number} [width=500] - The width of the window in pixels.\n * @param {number} [height=400] - The height of the window in pixels.\n */\nwindow.os.runApp = function(callback, width = 500, height = 400) { ... }\n",
    "ide": "/**\n * Compile a source code string into a runnable script.\n * @param {string} source - The source code string to compile.\n */\nfunction compile(source) { ... }\nfunction ide(win, path) { ... }\n",
    "minesweper": "function minesweeper() { ... }\n"
}