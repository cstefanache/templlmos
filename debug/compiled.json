{
    "head": {
        "_children_": [
            "<style id='osbase_general-styles'>\nbody {\n    background-color: #2E393D;\n}\n\n</style>",
            "<script id='osbase_global-objects'>\n(() => {\nwindow.os = {};\n\n\n})()\n</script>",
            "<script id='osbase_filesystem'>\n(() => {\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.fs) {\n    window.os.fs = {\n        filesystem: {},\n        sync: function () {\n            window.localStorage.setItem('filesystem', JSON.stringify(this.filesystem));\n        },\n        readPath: function (path) {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let parts = path.split('/');\n            let obj = this.filesystem;\n            for (let part of parts) {\n                if (obj[part] === undefined) {\n                    return undefined;\n                } else {\n                    obj = obj[part];\n                }\n            }\n            return obj;\n        },\n        write: function (path, content) {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let parts = path.split('/');\n            let obj = this.filesystem;\n            for (let i = 0; i < parts.length - 1; i++) {\n                if (obj[parts[i]] === undefined) {\n                    obj[parts[i]] = {};\n                }\n                obj = obj[parts[i]];\n            }\n            obj[parts[parts.length - 1]] = content;\n            this.sync();\n        },\n        ls: function (path = '') {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let obj = this.filesystem;\n            if (path !== '') {\n                let parts = path.split('/');\n                for (let part of parts) {\n                    if (obj[part] === undefined) {\n                        return undefined;\n                    } else {\n                        obj = obj[part];\n                    }\n                }\n            }\n            return Object.keys(obj);\n        },\n        mkdir: function (path, dirName) {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let parts = path.split('/');\n            let obj = this.filesystem;\n            for (let i = 0; i < parts.length - 1; i++) {\n                if (obj[parts[i]] === undefined) {\n                    obj[parts[i]] = {};\n                }\n                obj = obj[parts[i]];\n            }\n            obj[dirName] = {};\n            this.sync();\n        },\n        rm: function (path) {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let parts = path.split('/');\n            let obj = this.filesystem;\n            let parent = obj;\n            for (let i = 0; i < parts.length - 1; i++) {\n                if (obj[parts[i]] === undefined) {\n                    return;\n                } else {\n                    parent = obj;\n                    obj = obj[parts[i]];\n                }\n            }\n            delete parent[parts[parts.length - 1]];\n            this.sync();\n        },\n        isFile: function (path) {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let parts = path.split('/');\n            let obj = this.filesystem;\n            for (let part of parts) {\n                if (obj[part] === undefined || typeof obj[part] !== 'string') {\n                    return false;\n                } else {\n                    obj = obj[part];\n                }\n            }\n            return true;\n        }\n    };\n}\n\n\n})()\n</script>",
            "<style id='gui_temp'>\n</style>",
            "<style id='gui_gui-styles'>\n.titleBar {\n    background-color: orange;\n    border-bottom: 1px solid black;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: monospace;\n    font-size: small;\n    padding: 5px;\n    user-select: none; /* This will prevent text selection */\n}\n\n/* This will apply styles to buttons inside the title bar */\n.titleBar button {\n    background: none;\n    border: none;\n    cursor: pointer;\n    font-size: 6;\n    padding: 0; /* This will remove default button padding */\n}\n\n.window {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    background-color: white;\n    padding: 1px;\n    border: 2px solid black;\n    border-radius: 4px;\n}\n\n.contentPlaceholder {\n    flex-grow: 1;\n    overflow: auto;\n    padding: 5px;\n}\n\n.toolbarPlaceholder {\n    border-bottom: 1px solid black;\n}\n\n.statusPlaceholder {\n    border-top: 1px solid black;\n    font-family: monospace;\n    font-size: small;\n}\n\n.resizeHandle {\n    width: 10px;\n    height: 10px;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    cursor: se-resize;\n    background-color: #000; /* Change this to your desired handle color */\n}\n\n</style>",
            "<script id='gui_gui-global-objects'>\n(() => {\nif (typeof window.os === 'undefined') {\n    window.os = {};\n}\n\nwindow.os.gui = {};\n\n\n})()\n</script>",
            "<script id='gui_titleBar'>\n(() => {\nif (!window.os) window.os = {};\nif (!window.os.gui) window.os.gui = {};\n\nwindow.os.gui.titleBar = function(title, buttonClickCallback, parentElement) {\n    // Create root element\n    var titleBar = document.createElement('div');\n    titleBar.className = 'titleBar';\n    \n    // Create title span and append to title bar\n    var titleSpan = document.createElement('span');\n    titleSpan.textContent = title;\n    titleBar.appendChild(titleSpan);\n    \n    // Create close button and append to title bar\n    var closeButton = document.createElement('button');\n    closeButton.textContent = '\u274c';\n    closeButton.addEventListener('click', function() {\n        buttonClickCallback();  // Callback when button is clicked\n    });\n    titleBar.appendChild(closeButton);\n    \n    // Append title bar to parent element\n    parentElement.appendChild(titleBar);\n};\n\n\n})()\n</script>",
            "<script id='gui_temp-script'>\n(() => {\n// Assuming window.os is already defined\nif (!window.os) {\n    window.os = {};\n}\n\n// Assuming window.os.gui is already defined\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Move function\nwindow.os.gui.move = function (root, dragHandle) {\n    let offsetX = 0;\n    let offsetY = 0;\n    \n    dragHandle.addEventListener('mousedown', (e) => {\n        offsetX = e.clientX - root.getBoundingClientRect().left;\n        offsetY = e.clientY - root.getBoundingClientRect().top;\n        \n        document.addEventListener('mousemove', mouseMove);\n        document.addEventListener('mouseup', mouseUp);\n    });\n    \n    function mouseMove(e) {\n        root.style.left = (e.clientX - offsetX) + 'px';\n        root.style.top = (e.clientY - offsetY) + 'px';\n    }\n    \n    function mouseUp() {\n        document.removeEventListener('mousemove', mouseMove);\n        document.removeEventListener('mouseup', mouseUp);\n    }\n};\n\n// Resize function\nwindow.os.gui.resize = function (root, resizeHandle) {\n    let width = root.offsetWidth;\n    let height = root.offsetHeight;\n    \n    resizeHandle.addEventListener('mousedown', (e) => {\n        document.addEventListener('mousemove', mouseMove);\n        document.addEventListener('mouseup', mouseUp);\n    });\n    \n    function mouseMove(e) {\n        width += e.clientX - resizeHandle.getBoundingClientRect().left;\n        height += e.clientY - resizeHandle.getBoundingClientRect().top;\n        \n        root.style.width = width + 'px';\n        root.style.height = height + 'px';\n    }\n    \n    function mouseUp() {\n        document.removeEventListener('mousemove', mouseMove);\n        document.removeEventListener('mouseup', mouseUp);\n    }\n};\n\n\n})()\n</script>",
            "<script id='gui_window'>\n(() => {\n// Define the createWindow function on the window.os.gui object\nwindow.os.gui.createWindow = function(emoji = '\ud83d\udda5\ufe0f', title = 'New Window', content = null, width = 400, height = 300) {\n    // Create the root DOM element with the class .window\n    var root = document.createElement('div');\n    root.className = 'window';\n    root.style.width = width + 'px';\n    root.style.height = height + 'px';\n    \n    // Add an empty div with class titlePlaceholder to the root DOM element\n    var titlePlaceholder = document.createElement('div');\n    titlePlaceholder.className = 'titlePlaceholder';\n    root.appendChild(titlePlaceholder);\n    \n    // Add an empty div with class toolbarPlaceholder to the root DOM element\n    var toolbarPlaceholder = document.createElement('div');\n    toolbarPlaceholder.className = 'toolbarPlaceholder';\n    root.appendChild(toolbarPlaceholder);\n    \n    // Add an empty div with class contentPlaceholder to the root DOM element\n    var contentPlaceholder = document.createElement('div');\n    contentPlaceholder.className = 'contentPlaceholder';\n    root.appendChild(contentPlaceholder);\n    \n    // Add an empty div with class statusPlaceholder to the root DOM element\n    var statusPlaceholder = document.createElement('div');\n    statusPlaceholder.className = 'statusPlaceholder';\n    root.appendChild(statusPlaceholder);\n    \n    // Add a resize handle to the root DOM element with class resizeHandle\n    var resizeHandle = document.createElement('div');\n    resizeHandle.className = 'resizeHandle';\n    root.appendChild(resizeHandle);\n    \n    // Add the title bar with the provided emoji + title, the root DOM element, and the titlePlaceholder child element\n    window.os.gui.titleBar(emoji + ' ' + title, null, titlePlaceholder);\n    \n    // Add the root element to the document body\n    document.body.appendChild(root);\n    \n    // Make the root element draggable by the title placeholder element\n    window.os.gui.move(root, titlePlaceholder);\n    \n    // Make the root element resizable by the resize handle element\n    window.os.gui.resize(root, resizeHandle);\n    \n    // If content is provided, append it to the contentPlaceholder element\n    if(content) {\n        contentPlaceholder.appendChild(content);\n    }\n    \n    // Return the root DOM element\n    return root;\n};\n\n\n})()\n</script>"
        ]
    },
    "body": {
        "_children_": [
            "<script id='osbase_test'>\n(() => {\n// Define your path and content\nvar path = 'test/a/test.txt';\nvar content = 'hello world';\n\n// Use the write function from your OS's fs module\nwindow.os.fs.write(path, content);\n\n\n})()\n</script>",
            "<script id='gui_window-tests'>\n(() => {\nlet div = document.createElement('div'); // Create a div element\ndiv.innerHTML = \"Hello World!\"; // Set the inner HTML of the div element\nlet win = window.os.gui.createWindow(\"\ud83d\ude03\", \"My Window\", div); // Create the window\n\n\n})()\n</script>"
        ]
    },
    "_children_": []
}