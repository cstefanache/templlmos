{
    "head": {
        "_children_": [
            "<style id='osbase_general-styles'>\nbody {\n    background-color: #f8d0e8; /* Lite Pink */\n    overflow: hidden; /* Hidden Overflow */\n}\n\n</style>",
            "<script id='osbase_global-objects'>\n(() => {\nwindow.os = {};\n\n\n})()\n</script>",
            "<script id='osbase_about'>\n(() => {\n/**\n * Returns information about the operating system.\n * @return {string} Information about the operating system.\n */\nwindow.os.about = function() {\n    return \"TempLLMOS is an experimental WebOS controlled by a Large Language Model.\";\n};\n\n/**\n * Logs a message to the console.\n * @param {string} message - The message to be logged.\n */\nwindow.os.log = function(message) {\n    console.log(message);\n};\n\n\n})()\n</script>",
            "<script id='osbase_filesystem'>\n(() => {\n// Load the filesystem object from localStorage\nlet filesystem = JSON.parse(localStorage.getItem('filesystem')) || {};\n\n// Define window.os.fs\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.fs) {\n    window.os.fs = {};\n}\n\n/**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() {\n    localStorage.setItem('filesystem', JSON.stringify(filesystem));\n}\n\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            return undefined;\n        }\n        current = current[dir];\n    }\n    return typeof current === 'string' ? current : undefined;\n}\n\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path.slice(0, -1)) {\n        if (!current[dir]) {\n            current[dir] = {};\n        }\n        current = current[dir];\n    }\n    current[path[path.length - 1]] = content;\n    this.sync();\n}\n\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            return Object.keys(filesystem);\n        }\n        current = current[dir];\n    }\n    return Object.keys(current);\n}\n\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            current[dir] = {};\n        }\n        current = current[dir];\n    }\n    this.sync();\n}\n\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    let parent = filesystem;\n    for (let dir of path.slice(0, -1)) {\n        if (!current[dir]) {\n            return; // Path not found\n        }\n        parent = current;\n        current = current[dir];\n    }\n    delete parent[path[path.length - 1]];\n    this.sync();\n}\n\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            return false; // Path not found or not a file\n        }\n        current = current[dir];\n    }\n    return typeof current === 'string'; // Check if current is a string (file)\n}\n\n\n})()\n</script>",
            "<style id='output_output-styles'>\n.output-wrapper {\n    position: fixed;\n    top: 0;\n    right: 0;\n    width: 300px;\n    height: 100vh; /* viewport height */\n    z-index: -1;\n}\n\n.output {\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* semi-transparent black */\n    color: white; /* white text */\n    white-space: pre-wrap; /* text wrap */\n    font-size: 9px; /* font size of 9px */\n    padding: 10px; /* padding of 10px */\n    margin: 0; /* no margins */\n    overflow: auto; /* overflow auto */\n}\n\n</style>",
            "<style id='desktop_content-style'>\n#desktop_content {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow-y: hidden;\n    padding: 10px;\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    align-content: flex-start;\n}\n\n</style>",
            "<style id='desktop_styles'>\n.icon {\n    width: 64px;\n    min-height: 64px;\n    text-align: center;\n    margin: 5px;\n    cursor: pointer;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n.emoji {\n    display: block;\n    font-size: 30px;\n    display: inline-block;\n    position: relative;\n}\n\n.title {\n    display: block;\n    font-size: 8px;\n    font-family: monospace;\n    color: black;\n    padding: 5px;\n    word-wrap: break-word;\n    border: 2px solid black;\n    background-color: white;\n    border-radius: 5px;\n}\n\n.app-emoji {\n    position: absolute;\n    right: 12px;\n    top: 20px;\n}\n\n</style>",
            "<script id='desktop_icon'>\n(() => {\n// Check if window.os exists, if not create it\nif (!window.os) {\n    window.os = {};\n}\n\n/**\n * Create an icon element with an emoji and a tooltip.\n * @param {HTMLElement} parent - The parent element to append this icon to.\n * @param {string} emoji - The emoji to display in this icon.\n * @param {string} title - The tooltip text to display when hovering over this icon.\n * @param {function} callback - The callback to call when this icon is clicked.\n */\nwindow.os.icon = function(parent, emoji, title, callback) {\n    // Create root DOM element with class .icon\n    var icon = document.createElement('div');\n    icon.classList.add('icon');\n    \n    // Create span with class .emoji and add it to icon\n    var emojiSpan = document.createElement('span');\n    emojiSpan.classList.add('emoji');\n    emojiSpan.textContent = emoji;\n    icon.appendChild(emojiSpan);\n    \n    // Create span with class .title and add it to icon\n    var titleSpan = document.createElement('span');\n    titleSpan.classList.add('title');\n    titleSpan.textContent = title;\n    icon.appendChild(titleSpan);\n    \n    // Add click event listener to icon\n    icon.addEventListener('click', callback);\n    \n    // Append icon to parent\n    parent.appendChild(icon);\n};\n\n\n})()\n</script>",
            "<script id='desktop_desktop-app'>\n(() => {\n/**\n * Adds an application to the desktop content.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n */\nwindow.os.addApp = function(emoji, title, callback) {\n    window.os.icon(document.querySelector('#desktop_content'), emoji, title, callback);\n};\n\n\n})()\n</script>",
            "<script id='gui_draggable'>\n(() => {\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n/**\n * Makes an element draggable by a given handle element.\n * @param {HTMLElement} root - The element to be made draggable.\n * @param {HTMLElement} dragHandleHTMLElement - The handle element to initiate the drag operation.\n */\nwindow.os.gui.makeDraggable = function(root, dragHandleHTMLElement) {\n    let isDragging = false;\n    let offsetX = 0;\n    let offsetY = 0;\n    \n    const handleMouseDown = (event) => {\n        isDragging = true;\n        offsetX = event.clientX - root.getBoundingClientRect().left;\n        offsetY = event.clientY - root.getBoundingClientRect().top;\n        \n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    const handleMouseMove = (event) => {\n        if (isDragging) {\n            const x = event.clientX - offsetX;\n            const y = event.clientY - offsetY;\n            \n            // Prevent the element from being dragged off the screen\n            const boundingRect = document.body.getBoundingClientRect();\n            const rootRect = root.getBoundingClientRect();\n            if (x < boundingRect.left || y < boundingRect.top || x + rootRect.width > boundingRect.right || y + rootRect.height > boundingRect.bottom) {\n                return;\n            }\n            \n            root.style.left = `${x}px`;\n            root.style.top = `${y}px`;\n        }\n    };\n    \n    const handleMouseUp = () => {\n        isDragging = false;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n    };\n    \n    dragHandleHTMLElement.addEventListener('mousedown', handleMouseDown);\n};\n\n/**\n* Makes an element resizable by a given handle element.\n* @param {HTMLElement} root - The element to be made resizable.\n* @param {HTMLElement} resizeHandleHTMLElement - The handle element to initiate the resize operation.\n*/\nwindow.os.gui.makeResizable = function(root, resizeHandleHTMLElement) {\n    let startWidth = root.offsetWidth;\n    let startHeight = root.offsetHeight;\n    let startX;\n    let startY;\n    \n    resizeHandleHTMLElement.addEventListener('mousedown', (e) => {\n        e.preventDefault();\n        startX = e.clientX;\n        startY = e.clientY;\n        \n        document.addEventListener('mousemove', resize);\n        document.addEventListener('mouseup', stopResize);\n    });\n    \n    function resize(e) {\n        let width = startWidth + (e.clientX - startX);\n        let height = startHeight + (e.clientY - startY);\n        \n        // Ensure width and height are not negative\n        width = Math.max(width, 0);\n        height = Math.max(height, 0);\n        \n        // Update width and height of root element\n        root.style.width = width + 'px';\n        root.style.height = height + 'px';\n    }\n    \n    function stopResize() {\n        // Update starting width and height on mouseup\n        startWidth = root.offsetWidth;\n        startHeight = root.offsetHeight;\n        \n        // Remove event listeners\n        document.removeEventListener('mousemove', resize);\n        document.removeEventListener('mouseup', stopResize);\n    }\n};\n\n/**\n* Brings the specified DOM node to the front of its siblings.\n* @param {HTMLElement} rootDOMNode - The DOM node to bring to front.\n*/\nwindow.os.gui.bringToFront = function(rootDOMNode) {\n    // Internal function to bring to front\n    var bringToFront = function() {\n        // Get all elements with same class as rootDOMNode\n        var siblings = document.getElementsByClassName(rootDOMNode.className);\n        // Iterate through them and set z-index to 0\n        for (var i = 0; i < siblings.length; i++) {\n            siblings[i].style.zIndex = 0;\n        }\n        // Set z-index of rootDOMNode to 1\n        rootDOMNode.style.zIndex = 1;\n    };\n    \n    // Call internal function on mousedown event of rootDOMNode\n    rootDOMNode.addEventListener('mousedown', bringToFront);\n    \n    // Call internal function immediately to bring to front on load\n    bringToFront();\n};\n\n\n})()\n</script>",
            "<script id='gui_titleBar'>\n(() => {\n// Assuming window.os is an existing object with gui as its property\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n/**\n * Creates a title bar with a title and a close button.\n * @param {HTMLElement} parentElement - The DOM element to append this title bar to.\n * @param {string} title - The title to display in the title bar.\n * @param {function} close - The callback to call when the close button is clicked.\n */\nwindow.os.gui.titleBar = function(parentElement, title, close) {\n    // Create root element\n    var root = document.createElement('div');\n    root.classList.add('titleBar');\n    \n    // Create title span\n    var titleSpan = document.createElement('span');\n    titleSpan.textContent = title;\n    root.appendChild(titleSpan);\n    \n    // Create close button\n    var closeButton = document.createElement('button');\n    closeButton.textContent = '\u274c';\n    closeButton.classList.add('close');\n    closeButton.addEventListener('click', close); // Add click event listener to close button\n    root.appendChild(closeButton);\n    \n    // Append root to parent element\n    parentElement.appendChild(root);\n};\n\n\n})()\n</script>",
            "<script id='gui_toolbar'>\n(() => {\n/**\n * Create a toolbar with a button inside it.\n * @param {HTMLElement} win - The window element to add toolbar to.\n * @returns {function(string, function): void} - The addButton function.\n */\nwindow.os.gui.createToolbar = function(win) {\n    // Create a root DOM element with class .toolbar\n    var toolbar = document.createElement('div');\n    toolbar.className = 'toolbar';\n    \n    // Append the root DOM element to .toolbarPlaceholder from win HTML element\n    win.querySelector('.toolbarPlaceholder').appendChild(toolbar);\n    \n    /**\n     * Add a button to the toolbar with a specific text and callback when clicked.\n     * @param {string} text - The text to display on the button.\n     * @param {function} callback - The callback to call when the button is clicked.\n     */\n    var addButton = function(text, callback) {\n        // Create a button element with text parameter\n        var button = document.createElement('button');\n        button.textContent = text;\n        \n        // Add event listener to call callback when button is clicked\n        button.addEventListener('click', callback);\n        \n        // Append button to toolbar root element\n        toolbar.appendChild(button);\n    };\n    \n    // Return addButton function\n    return addButton;\n};\n\n\n})()\n</script>",
            "<script id='gui_window'>\n(() => {\n/**\n* Create a new window with given emoji, title, width and height.\n* @param {string} emoji - The emoji to display in the window's title bar.\n* @param {string} title - The title to display in the window's title bar.\n* @param {number} [width=400] - The width of the window in pixels.\n* @param {number} [height=300] - The height of the window in pixels.\n* @return {HTMLElement} The root DOM element of the newly created window.\n*/\nwindow.os.gui.createWindow = function(emoji, title, width = 400, height = 300) {\n    // Create root DOM element\n    const root = document.createElement('div');\n    root.className = 'window';\n    root.style.width = `${width}px`;\n    root.style.height = `${height}px`;\n    document.body.appendChild(root);\n    \n    // Bring to front\n    window.os.gui.bringToFront(root);\n    \n    // Create placeholders for title bar, toolbar, content, status\n    ['titlePlaceholder', 'toolbarPlaceholder', 'contentPlaceholder', 'statusPlaceholder'].forEach(className => {\n        const placeholder = document.createElement('div');\n        placeholder.className = className;\n        root.appendChild(placeholder);\n    });\n    \n    // Create resize handle\n    const resizeHandle = document.createElement('div');\n    resizeHandle.className = 'resizeHandle';\n    root.appendChild(resizeHandle);\n    \n    // Create title bar\n    window.os.gui.titleBar(root.querySelector('.titlePlaceholder'), emoji + ' ' + title, () => document.body.removeChild(root));\n    \n    // Make window draggable by title bar\n    window.os.gui.makeDraggable(root, root.querySelector('.titlePlaceholder'));\n    \n    // Make window resizable by resize handle\n    window.os.gui.makeResizable(root, resizeHandle);\n    \n    // Position window in center of document\n    root.style.position = 'absolute';\n    root.style.left = `${window.innerWidth / 2 - width / 2}px`;\n    root.style.top = `${window.innerHeight / 2 - height / 2}px`;\n    \n    return root;\n};\n\n/**\n* Attach content to an existing window.\n* @param {HTMLElement} windowElement - The window to attach content to.\n* @param {HTMLElement} contentElement - The content to attach to the window.\n*/\nwindow.os.gui.attachToWindow = function(windowElement, contentElement) {\n    // Find the .contentPlaceholder element in the windowElement\n    var contentPlaceholder = windowElement.querySelector('.contentPlaceholder');\n    \n    // Append the contentElement to the .contentPlaceholder element\n    contentPlaceholder.appendChild(contentElement);\n};\n\n\n})()\n</script>",
            "<style id='gui_gui-styles'>\n/* Define styles for .titleBar */\n.titleBar {\n    background-color: orange;\n    border-bottom: 1px solid black;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: monospace;\n    font-size: small;\n    padding: 0px 5px;\n    border-bottom: 2px solid black;\n    user-select: none; /* Prevent text selection */\n}\n\n/* Define styles for buttons */\n.titleBar button {\n    border: none;\n    background: none;\n    cursor: pointer;\n    font-size: 6px;\n    padding: 5px;\n}\n\n.window {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    border: 2px solid black;\n    border-radius: 8px;\n    box-shadow: 4px 4px 0 0 rgba(0,0,0,0.5);\n    overflow: hidden;\n    background-color: white;\n    -webkit-user-select: none; /* Safari */\n    -ms-user-select: none; /* IE 10+ */\n    user-select: none; /* Standard syntax */\n}\n\n.contentPlaceholder {\n    padding: 5px;\n    flex-grow: 1;\n    overflow: auto;\n}\n\n.statusPlaceholder {\n    border-top: 1px solid black;\n    font-family: monospace;\n    font-size: small;\n}\n\n.resizeHandle {\n    position: absolute;\n    width: 0px;\n    height: 0px;\n    bottom: 0;\n    right: 0;\n    cursor: se-resize;\n    border-width: 0 0 10px 10px;\n    border-style: solid;\n    border-color: transparent transparent #ff7200 transparent;\n    transform: rotate(0deg);\n}\n\n.toolbar {\n    padding: 2px;\n    background-color: antiquewhite;\n    margin-bottom: 2px;\n    border-bottom: 1px solid black;\n    display: flex;\n    justify-content: flex-start;\n}\n\nbutton {\n    border: none;\n    cursor: pointer;\n    background-color: transparent;\n}\n\n</style>",
            "<script id='registry_extension'>\n(() => {\n// Assuming window.os is already defined\nif (!window.os) {\n    window.os = {};\n}\n\n// Assuming window.os.registry is already defined\nif (!window.os.registry) {\n    window.os.registry = {};\n}\n\n/**\n * Register an extension with its corresponding emoji and callback.\n * @param {string} extension - The name of the extension to register.\n * @param {string} emoji - The corresponding emoji for this extension.\n * @param {function} callback - The callback to be executed when this extension is used.\n */\nwindow.os.registerExtension = function(extension, emoji, callback) {\n    window.os.registry[extension] = {emoji: emoji, callback: callback};\n};\n\n\n})()\n</script>",
            "<script id='registry_app-icon'>\n(() => {\n/**\n * Create an icon element for a file or directory at given path\n * @param {string} path - The path to the file or directory\n * @param {function} callback - The callback to call when the icon is clicked\n * @returns {HTMLElement} - The icon element\n */\nwindow.os.getOSIcon = function(path, callback) {\n    const isFile = window.os.fs.isFile(path);\n    const rootElement = document.createElement('div');\n    rootElement.classList.add('icon');\n    \n    const emojiElement = document.createElement('span');\n    emojiElement.classList.add('emoji');\n    emojiElement.textContent = isFile ? '\ud83d\udcc4' : '\ud83d\udcc1';\n    rootElement.appendChild(emojiElement);\n    \n    const titleElement = document.createElement('div');\n    titleElement.classList.add('title');\n    titleElement.textContent = path.split('/').pop(); // Assuming path is a Unix-like path\n    rootElement.appendChild(titleElement);\n    \n    const ext = path.split('.').pop(); // Assuming path has an extension\n    const extData = window.os.registry[ext];\n    if (extData) {\n        const appEmojiElement = document.createElement('span');\n        appEmojiElement.classList.add('app-emoji');\n        appEmojiElement.textContent = extData.emoji;\n        rootElement.appendChild(appEmojiElement);\n        \n        let currentCallback = path => extData.callback(path); // Closure for path\n        rootElement.addEventListener('click', () => currentCallback(path));\n    } else {\n        let currentCallback = path => callback(path); // Closure for path\n        rootElement.addEventListener('click', () => currentCallback(path));\n    }\n    \n    return rootElement;\n};\n\n\n})()\n</script>",
            "<script id='registry_registry'>\n(() => {\n/**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions this application can handle.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) {\n    const execute = (...params) => {\n        const windowInstance = window.os.gui.createWindow(emoji, title, width, height);\n        window.os.gui.attachToWindow(windowInstance, callback(windowInstance, ...params));\n    };\n    \n    if (extensions) {\n        extensions.forEach(extension => {\n            // Assuming `registerExtension` is also available on `window.os` object\n            // and it takes an extension, emoji and callback as parameters\n            window.os.registerExtension(extension, emoji, execute);\n        });\n    }\n    \n    window.os.addApp(emoji, title, execute);\n};\n\n\n})()\n</script>",
            "<style id='apps_styles'>\n.browser {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n</style>",
            "<style id='games_styles'>\n.gmroot {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    margin: 2px;\n    padding: 4px;\n    background-color: white;\n}\n\n.row {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n}\n\n.cell {\n    width: 22px;\n    height: 22px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid darkgray;\n    border-radius: 2px;\n    margin: 1px;\n    font-family: monospace;\n}\n\n.cell.visited {\n    background-color: white;\n    border: 1px solid white;\n}\n\n.score {\n    margin: 4px;\n    font-family: monospace;\n    font-weight: bold;\n    text-align: center;\n    background-color: white;\n    border: 2px solid white;\n    border-radius: 2px;\n}\n\n</style>"
        ]
    },
    "body": {
        "_children_": [
            "<script id='osbase_tests'>\n(() => {\n/**\n * Executes log with about message.\n */\nfunction executeLogWithAbout() {\n    window.os.log(window.os.about());\n}\n\n\n})()\n</script>",
            "<script id='osbase_fs-tests'>\n(() => {\n// Create a new directory in the root directory called `fstest`\nwindow.os.fs.mkdir('fstest');\n\n// Create a new file in the `fstest` directory called `test.txt` with the content `hello world`\nwindow.os.fs.write('fstest/test.txt', 'hello world');\n\n// List the entries in the `fstest` directory and log it to console\nconsole.log(window.os.fs.ls('fstest'));\n\n// Read the content of the `fstest/test.txt` file and log it to console\nconsole.log(window.os.fs.getFileContentFromPath('fstest/test.txt'));\n\n// Remove the `fstest` directory \nwindow.os.fs.rm('fstest');\n\n\n})()\n</script>",
            "<script id='output_output-window'>\n(() => {\n// Create root container div element\nlet outputWrapper = document.createElement('div');\noutputWrapper.className = 'output-wrapper';\noutputWrapper.id = 'output-wrapper';\ndocument.body.appendChild(outputWrapper);\n\n// Create pre element\nlet output = document.createElement('pre');\noutput.className = 'output';\noutput.id = 'output';\noutputWrapper.appendChild(output);\n\n// Internal function to fetch content from 'http://localhost:8080/output'\nasync function fetchContent() {\n    try {\n        let response = await fetch('http://localhost:8080/output');\n        let data = await response.text();\n        output.innerHTML = data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\n// Call http://localhost:8080/ping\nfetch('http://localhost:8080/ping')\n    .then(response => {\n        if (response.status === 200) {\n            // If response is 200, set an interval to call fetchContent every 1000ms\n            setInterval(fetchContent, 1000);\n        } else {\n            console.error('Ping failed with status', response.status);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n\n\n})()\n</script>",
            "<div id='desktop_content'>\n</div>",
            "<script id='registry_hello-world'>\n(() => {\n/**\n * Create a root element div with an h1 child element containing 'Hello World'\n * If path is defined append a pre element containing the content of reading the file at the path\n * @param {HTMLElement} parent - The parent element to append the root element to\n * @param {string} [path] - The path to a file to read content from\n * @returns {HTMLElement} - The root element containing h1 and pre child elements\n */\nfunction helloWorld(parent, path) {\n    // Create root div element\n    const root = document.createElement('div');\n    \n    // Create h1 element with 'Hello World' text\n    const h1 = document.createElement('h1');\n    h1.textContent = 'Hello World';\n    root.appendChild(h1);\n    \n    // If path is defined, create pre element with file content\n    if (path) {\n        const pre = document.createElement('pre');\n        pre.textContent = window.os.fs.getFileContentFromPath(path);\n        root.appendChild(pre);\n    }\n    \n    // Append root element to parent\n    parent.appendChild(root);\n    \n    return root;\n}\n\n// Register application with 'hello world' title, \ud83d\udc4b as emoji, helloWorld function and 300x200 size\nwindow.os.registerApplication('hello world', '\ud83d\udc4b', helloWorld, 300, 200);\n\n\n})()\n</script>",
            "<script id='apps_editor'>\n(() => {\nfunction editor(win, path) {\n    // Create a div element with class 'editor'\n    const editorDiv = document.createElement('div');\n    editorDiv.className = 'editor';\n    \n    // Create a textarea element with 100% width and 400px height\n    const textarea = document.createElement('textarea');\n    textarea.style.width = '100%';\n    textarea.style.height = '400px';\n    editorDiv.appendChild(textarea);\n    \n    // Create toolbar on the window parameter\n    const addButton = window.os.gui.createToolbar(win);\n    \n    // If path is not empty, read the file content and set it to the textarea\n    if (path) {\n        const content = window.os.fs.getFileContentFromPath(path);\n        if (content) textarea.value = content;\n    }\n    \n    // Add button on the toolbar with '\ud83d\udcbe' text save textarea content to the path if path is defined, prompt for the path otherwise\n    addButton('\ud83d\udcbe', () => {\n        const newPath = path || window.prompt('Enter a path');\n        if (newPath) window.os.fs.write(newPath, textarea.value);\n    });\n    \n    // Return the div element\n    return editorDiv;\n}\n\n// Register application with 'Editor' title, \u270d\ufe0f as emoji, editor function reference and 400x450 size for [txt,doc] extensions \nwindow.os.registerApplication('Editor', '\u270d\ufe0f', editor, 400, 450, ['txt', 'doc']);\n\n\n})()\n</script>",
            "<script id='apps_browser'>\n(() => {\nfunction browser(win, path='') {\n    // Create a container dom element with class `browser`\n    let container = document.createElement('div');\n    container.className = 'browser';\n    \n    // Set browserPath to path or `''` if path is undefined or not string\n    let browserPath = (typeof path === 'string') ? path : '';\n    \n    // Generate internal load function that takes path parameter\n    let load = (path) => {\n        // Set browserPath to path\n        browserPath = path;\n        \n        // Removes all children of the container element\n        while (container.firstChild) {\n            container.removeChild(container.firstChild);\n        }\n        \n        // If path is not empty, create a new `div` with class icon, inner element `.emoji` with internal span element having content '\ud83d\udd19'  and class `emoji` and on click call load with `path.split('/').slice(0, -1).join('/')`\n        if (path !== '') {\n            let backButtonDiv = document.createElement('div');\n            backButtonDiv.className = 'icon';\n            let backButtonSpan = document.createElement('span');\n            backButtonSpan.className = 'emoji';\n            backButtonSpan.innerText = '\ud83d\udd19';\n            backButtonSpan.onclick = () => load(path.split('/').slice(0, -1).join('/'));\n            backButtonDiv.appendChild(backButtonSpan);\n            container.appendChild(backButtonDiv);\n        }\n        \n        // ls all files in the path and for each item call `getOsIcon` with path+'/'+item and load function as callback\n        window.os.fs.ls(path).forEach(item => {\n            let iconElement = window.os.getOSIcon(path+'/'+item, load);\n            container.appendChild(iconElement);\n        });\n    };\n    \n    // Execute load on browserPath variable\n    load(browserPath);\n    \n    // Create toolbar\n    let toolbar = window.os.gui.createToolbar(win);\n    \n    // Call `addButton` on the toolbar with `\ud83d\udcc1` text and prompt for a name and call mkdir on current browserPath and provided name\n    toolbar('\ud83d\udcc1', () => {\n        let name = prompt('Enter directory name');\n        window.os.fs.mkdir(browserPath + '/' + name);\n        load(browserPath);\n    });\n    \n    // Call `addButton` on the toolbar with `\ud83d\udcc4` text and prompt for a name and call write on current browserPath and provided name and '' as content\n    toolbar('\ud83d\udcc4', () => {\n        let name = prompt('Enter file name');\n        window.os.fs.write(browserPath + '/' + name, '');\n        load(browserPath);\n    });\n    \n    // Return dom element \n    return container;\n}\n\nwindow.os.registerApplication('Browser', '\ud83d\udcc2', browser, 450, 400);\n\n\n})()\n</script>",
            "<script id='apps_run'>\n(() => {\n/**\n * Create a chat application with a root DOM element and input element.\n * \n * @param {HTMLElement} parent - The parent element where the chat application will be appended.\n */\nfunction application(parent) {\n    // Create a root DOM element with class 'chat'\n    const chat = document.createElement('div');\n    chat.className = 'chat';\n    parent.appendChild(chat);\n\n    // Create an input element with 100% width\n    const input = document.createElement('input');\n    input.style.width = '100%';\n    chat.appendChild(input);\n\n    // Variable to save input value\n    let instruction = '';\n\n    // Event listener for keyup event on input element\n    input.addEventListener('keyup', async (event) => {\n        // If enter key is pressed\n        if (event.key === 'Enter') {\n            // Save input value to instruction variable and clear input\n            instruction = event.target.value;\n            event.target.value = '';\n            \n            // POST instruction and full as false to 'http://localhost:8080'\n            const response = await fetch('http://localhost:8080', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ instruction: instruction, full: false })\n            });\n            \n            // Get response text content\n            const content = await response.text();\n            \n            // Create a script tag with id 'run-script' and add response content to it\n            const script = document.createElement('script');\n            script.id = 'run-script';\n            script.textContent = content;\n            document.body.appendChild(script);\n        }\n    });\n    \n    // Return root DOM element\n    return chat;\n}\n\nwindow.os.registerApplication('Run', '\u25b6\ufe0f', application, 400, 70);\n\n\n})()\n</script>",
            "<script id='games_minesweper'>\n(() => {\nfunction minesweeper() {\n    // Create root element\n    const root = document.createElement('div');\n    root.className = 'gmroot';\n    \n    // Create matrix of size 8x8 with values 0\n    const matrix = Array(8).fill().map(() => Array(8).fill(0));\n    \n    // Pick 10 random cells and set their value to -40 and increase the number value of the neighbouring cells\n    let mines = [];\n    for (let i = 0; i < 10; i++) {\n        let x = Math.floor(Math.random() * 8);\n        let y = Math.floor(Math.random() * 8);\n        mines.push({x, y});\n        matrix[x][y] = -40;\n        for (let dx = -1; dx <= 1; dx++) {\n            for (let dy = -1; dy <= 1; dy++) {\n                if (dx === 0 && dy === 0) continue;\n                let nx = x + dx;\n                let ny = y + dy;\n                if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) matrix[nx][ny]++;\n            }\n        }\n    }\n    \n    // Set score to 64\n    let score = 64;\n    \n    // Add score div\n    const scoreDiv = document.createElement('div');\n    scoreDiv.className = 'score';\n    scoreDiv.textContent = `Discovered: ${score}`;\n    root.appendChild(scoreDiv);\n    \n    // Add matrix rows\n    for (let i = 0; i < 8; i++) {\n        const rowDiv = document.createElement('div');\n        rowDiv.className = 'row';\n        for (let j = 0; j < 8; j++) {\n            const cellDiv = document.createElement('div');\n            cellDiv.className = 'cell';\n            cellDiv.textContent = ' ';\n            cellDiv.dataset.x = i;\n            cellDiv.dataset.y = j;\n            cellDiv.addEventListener('click', () => reveal(i, j));\n            rowDiv.appendChild(cellDiv);\n        }\n        root.appendChild(rowDiv);\n    }\n    \n    // Define reveal function\n    const reveal = (x, y) => {\n        let cellDiv = document.querySelector(`div[data-x=\"${x}\"][data-y=\"${y}\"]`);\n        if (cellDiv.classList.contains('visited')) return;\n        let value = matrix[x][y];\n        cellDiv.textContent = value < 0 ? '\ud83d\udca3' : value;\n        cellDiv.classList.add('visited');\n        if (value < 0) {\n            alert('Game Over');\n            return;\n        } else if (value === 0) {\n            for (let dx = -1; dx <= 1; dx++) {\n                for (let dy = -1; dy <= 1; dy++) {\n                    if (dx === 0 && dy === 0) continue;\n                    let nx = x + dx;\n                    let ny = y + dy;\n                    if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) reveal(nx, ny);\n                }\n            }\n        }\n        score--;\n        scoreDiv.textContent = `Discovered: ${score}`;\n    };\n    \n    return root;\n};\n\nwindow.os.registerApplication('Minesweeper', '\ud83d\udca3', minesweeper, 300, 300);\n\n\n})()\n</script>"
        ]
    },
    "_children_": []
}