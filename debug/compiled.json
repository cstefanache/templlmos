{
    "head": {
        "_children_": [
            "<style id='osbase_general-styles'>\nbody {\n    background-color: #ffe4e1; /* This is a light pink color */\n    overflow: hidden; /* This will hide any content that exceeds the size of the element */\n}\n\n</style>",
            "<script id='osbase_global-objects'>\n(() => {\nwindow.os = {};\n\n\n})()\n</script>",
            "<script id='osbase_filesystem'>\n(() => {\n// Load filesystem object from local storage if it exists\nlet filesystem = JSON.parse(localStorage.getItem('filesystem')) || {};\n\n// Define window.os.fs object\nif (!window.os) { window.os = {}; }\nif (!window.os.fs) { window.os.fs = {}; }\n\n// Define sync function\nwindow.os.fs.sync = function() {\n    localStorage.setItem('filesystem', JSON.stringify(filesystem));\n}\n\n// Define readPath function\nwindow.os.fs.readPath = function(path) {\n    if (path[0] === '/') { path = path.substring(1); } // remove leading '/' if exists\n    let pathArray = path.split('/');\n    let current = filesystem;\n    for (let i = 0; i < pathArray.length; i++) {\n        if (current[pathArray[i]] === undefined) { return undefined; } // path not found\n        current = current[pathArray[i]];\n    }\n    return current;\n}\n\n// Define write function\nwindow.os.fs.write = function(path, content) {\n    if (path[0] === '/') { path = path.substring(1); } // remove leading '/' if exists\n    let pathArray = path.split('/');\n    let current = filesystem;\n    for (let i = 0; i < pathArray.length - 1; i++) { // skip last element (file name)\n        if (current[pathArray[i]] === undefined) { current[pathArray[i]] = {}; } // create path if it doesn't exist\n        current = current[pathArray[i]];\n    }\n    current[pathArray[pathArray.length - 1]] = content; // set content of file at path\n    this.sync(); // save changes to filesystem\n}\n\n// Define ls function\nwindow.os.fs.ls = function(path = '') {\n    if (path[0] === '/') { path = path.substring(1); } // remove leading '/' if exists\n    let current = this.readPath(path) || filesystem; // get directory at path or root if path is empty or not found\n    return Object.keys(current); // return list of entries in directory\n}\n\n// Define mkdir function\nwindow.os.fs.mkdir = function(path) {\n    if (path[0] === '/') { path = path.substring(1); } // remove leading '/' if exists\n    let pathArray = path.split('/');\n    let current = filesystem;\n    for (let i = 0; i < pathArray.length - 1; i++) { // skip last element (directory name)\n        if (current[pathArray[i]] === undefined) { current[pathArray[i]] = {}; } // create path if it doesn't exist\n        current = current[pathArray[i]];\n    }\n    current[pathArray[pathArray.length - 1]] = {}; // create directory at path\n    this.sync(); // save changes to filesystem\n}\n\n// Define rm function\nwindow.os.fs.rm = function(path) {\n    if (path[0] === '/') { path = path.substring(1); } // remove leading '/' if exists\n    let pathArray = path.split('/');\n    let current = filesystem;\n    for (let i = 0; i < pathArray.length - 1; i++) { // skip last element (file name)\n        if (current[pathArray[i]] === undefined) { return; } // path not found\n        current = current[pathArray[i]];\n    }\n    delete current[pathArray[pathArray.length - 1]]; // remove file at path\n    this.sync(); // save changes to filesystem\n}\n\n// Define isFile function\nwindow.os.fs.isFile = function(path) {\n    if (path[0] === '/') { path = path.substring(1); } // remove leading '/' if exists\n    let value = this.readPath(path); // get value at path\n    return typeof value === 'string'; // return true if value is string (file)\n}\n\n\n})()\n</script>",
            "<style id='desktop_content-style'>\n#desktop_content {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow-y: hidden;\n    padding: 10px;\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    align-content: flex-start;\n}\n\n</style>",
            "<style id='desktop_styles'>\n.icon {\n    width: 64px;\n    min-height: 64px;\n    text-align: center;\n    margin: 5px;\n    cursor: pointer;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n.emoji {\n    display: block;\n    font-size: 30px;\n    inline-block;\n    position: relative;\n}\n\n.title {\n    display: block;\n    font-size: 8px;\n    font-family: monospace;\n    color: black;\n    padding: 5px;\n    word-wrap: break-word;\n    border: 2px solid black;\n    background-color: white;\n    border-radius: 5px;\n}\n\n.app-emoji {\n    position: absolute;\n    right: 12px;\n    top: 20px;\n}\n\n</style>",
            "<script id='desktop_icon'>\n(() => {\n// Check if window.os exists, if not create it\nif (!window.os) {\n    window.os = {};\n}\n\n// Function to create icon\nwindow.os.icon = function(parent, emoji, title, callback) {\n    // Create root DOM element with class .icon\n    var icon = document.createElement('div');\n    icon.className = 'icon';\n    \n    // Create span with class .emoji and add it to icon\n    var emojiSpan = document.createElement('span');\n    emojiSpan.className = 'emoji';\n    emojiSpan.textContent = emoji;\n    icon.appendChild(emojiSpan);\n    \n    // Create span with class .title and add it to icon\n    var titleSpan = document.createElement('span');\n    titleSpan.className = 'title';\n    titleSpan.textContent = title;\n    icon.appendChild(titleSpan);\n    \n    // Add click event listener to icon\n    icon.addEventListener('click', function() {\n        // Call the callback when the icon is clicked\n        if (callback && typeof(callback) === 'function') {\n            callback();\n        }\n    });\n    \n    // Add icon to the parent element\n    parent.appendChild(icon);\n}\n\n\n})()\n</script>",
            "<script id='desktop_desktop-app'>\n(() => {\nwindow.os = window.os || {}; // If window.os doesn't exist, create it\nwindow.os.addApp = function(emoji, title, callback) {\n  window.os.icon(document.querySelector('#desktop_content'), emoji, title, callback);\n};\n\n\n})()\n</script>",
            "<style id='debug_styles'>\n.debug {\n    position: fixed;\n    top: 0;\n    right: 0;\n    width: 300px;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* semi-transparent black */\n    color: white; /* white text */\n    white-space: pre-wrap; /* text wrap */\n    padding: 10px; /* padding */\n    margin: 0; /* no margins */\n}\n\n</style>",
            "<style id='gui_gui-styles'>\n.titleBar {\n    background-color: orange;\n    border-bottom: 1px solid black;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: monospace;\n    font-size: small;\n    padding: 5px;\n    border-bottom: 2px solid black;\n}\n\n.titleBar button {\n    border: none;\n    background: none;\n    cursor: pointer;\n    font-size: 6;\n    padding: 0;\n    -webkit-user-select: none; /* Safari */\n    -ms-user-select: none; /* IE 10+ */\n    user-select: none; /* Standard syntax */\n}\n\n.window {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    background-color: white;\n    border: 2px solid black;\n    border-radius: 8px;\n    box-shadow: 4px 4px 0 0 rgba(0,0,0,0.5);\n    overflow: hidden;\n    padding: 0;\n}\n\n.contentPlaceholder {\n    flex-grow: 1;\n    overflow: auto;\n    padding: 5px;\n}\n\n.statusPlaceholder {\n    border-top: 1px solid black;\n    font-family: monospace;\n    font-size: small;\n}\n\n.resizeHandle {\n    width: 0px;\n    height: 0px;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    cursor: se-resize;\n    border-width: 0 0 10px 10px;\n    border-style: solid;\n    border-color: transparent transparent #ff7200 transparent;\n    transform: rotate(0deg);\n}\n\n.toolbar {\n    display: flex;\n    justify-content: flex-start;\n    padding: 2px;\n    margin-bottom: 2px;\n    border-bottom: 1px solid black;\n    background-color: antiquewhite;\n}\n\n.toolbar button {\n    border: none;\n    cursor: pointer;\n    background-color: transparent;\n}\n\n</style>",
            "<script id='gui_draggable'>\n(() => {\n// Firstly, we need to check if window.os exists and gui exists inside it. If not, we create them.\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Now we implement makeDraggable function\nwindow.os.gui.makeDraggable = function (root, dragHandleHTMLElement) {\n    var isDragging = false; // flag to check if we're currently dragging\n    var offsetX = 0; // offset from mouse to element start position\n    var offsetY = 0; // offset from mouse to element start position\n    \n    // function to start dragging\n    function startDragging(e) {\n        e = e || window.event; // for IE\n        e.preventDefault(); // prevent selection of text while dragging\n        isDragging = true; // set flag to true\n        offsetX = e.clientX - root.getBoundingClientRect().left; // calculate offsets\n        offsetY = e.clientY - root.getBoundingClientRect().top;\n        document.onmousemove = function (e) { moveElement(e); }; // set mousemove event handler\n        document.onmouseup = function () { stopDragging(); }; // set mouseup event handler\n    }\n    \n    // function to move element during dragging\n    function moveElement(e) {\n        e = e || window.event; // for IE\n        if (isDragging) { // if we're currently dragging\n            var newX = e.clientX - offsetX; // calculate new position\n            var newY = e.clientY - offsetY; // calculate new position\n            root.style.left = newX + 'px'; // set new position\n            root.style.top = newY + 'px'; // set new position\n        }\n    }\n    \n    // function to stop dragging\n    function stopDragging() {\n        isDragging = false; // set flag to false\n        document.onmousemove = null; // remove mousemove event handler\n        document.onmouseup = null; // remove mouseup event handler\n    }\n    \n    // add mousedown event listener to drag handle\n    dragHandleHTMLElement.addEventListener('mousedown', startDragging);\n}\n\n// Create 'gui' namespace if it doesn't exist\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to make an element resizable\nwindow.os.gui.makeResizable = function (root, resizeHandleElement) {\n    var startX;\n    var startY;\n    var startWidth = root.offsetWidth;\n    var startHeight = root.offsetHeight;\n    \n    // Function to handle mouse down event\n    function handleMouseDown(e) {\n        e = e || window.event;\n        startX = e.clientX;\n        startY = e.clientY;\n        document.onmouseup = handleMouseUp;\n        document.onmousemove = handleMouseMove;\n    }\n    \n    // Function to handle mouse up event\n    function handleMouseUp() {\n        document.onmouseup = null;\n        document.onmousemove = null;\n        startWidth = root.offsetWidth;\n        startHeight = root.offsetHeight;\n    }\n    \n    // Function to handle mouse move event\n    function handleMouseMove(e) {\n        e = e || window.event;\n        var diffX = e.clientX - startX;\n        var diffY = e.clientY - startY;\n        root.style.width = (startWidth + diffX) + 'px';\n        root.style.height = (startHeight + diffY) + 'px';\n    }\n    \n    // Add event listeners to handle mouse events\n    resizeHandleElement.addEventListener('mousedown', handleMouseDown);\n}\n\n// Assuming window.os.gui is already defined\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to bring to front\nwindow.os.gui.bringToFront = function (rootDomNode) {\n    // Internal function to set z-index to 0 for all elements with same class as rootDomNode\n    var setZIndexToZero = function (className) {\n        var elements = document.getElementsByClassName(className);\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.zIndex = 0;\n        }\n    };\n    \n    // Set z-index of rootDomNode to 1\n    rootDomNode.style.zIndex = 1;\n    \n    // Add mousedown event listener to rootDomNode\n    rootDomNode.addEventListener('mousedown', function () {\n        setZIndexToZero(rootDomNode.className);\n    });\n};\n\n\n})()\n</script>",
            "<script id='gui_titleBar'>\n(() => {\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\nwindow.os.gui.titleBar = function(parentElement, title, close) {\n    // Create root DOM element with class .titleBar\n    var root = document.createElement('div');\n    root.className = 'titleBar';\n    \n    // Create span containing the title parameter\n    var span = document.createElement('span');\n    span.textContent = title;\n    root.appendChild(span);\n    \n    // Create button with text '\u274c' and class 'close'\n    var button = document.createElement('button');\n    button.textContent = '\u274c';\n    button.className = 'close';\n    button.addEventListener('click', close); // Add click event listener to the button\n    root.appendChild(button);\n    \n    // Append root DOM element to parentElement\n    parentElement.appendChild(root);\n};\n\n\n})()\n</script>",
            "<script id='gui_toolbar'>\n(() => {\n// Assuming os.gui is already defined as an object\nif (typeof window.os === 'undefined') window.os = {};\nif (typeof window.os.gui === 'undefined') window.os.gui = {};\n\n// Function to create toolbar\nwindow.os.gui.createToolbar = function(win) {\n    // Create root DOM element with class .toolbar\n    var toolbar = document.createElement('div');\n    toolbar.className = 'toolbar';\n    \n    // Append root DOM element to .toolbarPlaceholder from win parameter\n    win.querySelector('.toolbarPlaceholder').appendChild(toolbar);\n    \n    // Return an object with addButton function\n    return {\n        addButton: function(text, callback) {\n            // Create button element\n            var button = document.createElement('button');\n            button.textContent = text;\n            \n            // Add click event listener to button\n            button.addEventListener('click', callback);\n            \n            // Append button to toolbar\n            toolbar.appendChild(button);\n        }\n    };\n};\n\n\n})()\n</script>",
            "<script id='gui_window'>\n(() => {\nwindow.os.gui = window.os.gui || {};\nwindow.os.gui.createWindow = function(emoji = '\ud83d\udda5\ufe0f', title = 'Window', width = 400, height = 300) {\n    // Create root DOM element\n    var rootElement = document.createElement('div');\n    rootElement.className = 'window';\n    rootElement.style.width = width + 'px';\n    rootElement.style.height = height + 'px';\n    document.body.appendChild(rootElement);\n    \n    // Bring root element to front\n    window.os.gui.bringToFront(rootElement);\n    \n    // Create placeholder elements\n    ['titlePlaceholder', 'toolbarPlaceholder', 'contentPlaceholder', 'statusPlaceholder'].forEach(function(className) {\n        var placeholder = document.createElement('div');\n        placeholder.className = className;\n        rootElement.appendChild(placeholder);\n    });\n    \n    // Create resize handle\n    var resizeHandle = document.createElement('div');\n    resizeHandle.className = 'resizeHandle';\n    rootElement.appendChild(resizeHandle);\n    \n    // Create titleBar\n    window.os.gui.titleBar(rootElement.querySelector('.titlePlaceholder'), emoji + ' ' + title, function() {\n        document.body.removeChild(rootElement);\n    });\n    \n    // Make root element draggable by title placeholder\n    window.os.gui.makeDraggable(rootElement, rootElement.querySelector('.titlePlaceholder'));\n    \n    // Make root element resizable by resize handle\n    window.os.gui.makeResizable(rootElement, resizeHandle);\n    \n    // Set root DOM element position\n    rootElement.style.position = 'absolute';\n    rootElement.style.left = (window.innerWidth / 2 - width / 2) + 'px';\n    rootElement.style.top = (window.innerHeight / 2 - height / 2) + 'px';\n    \n    return rootElement;\n};\n\nwindow.os = window.os || {};\nwindow.os.gui = window.os.gui || {};\nwindow.os.gui.attachToWindow = function(windowElement, contentElement) {\n    var contentPlaceholder = windowElement.querySelector('.contentPlaceholder');\n    contentPlaceholder.appendChild(contentElement);\n};\n\n\n})()\n</script>",
            "<script id='registry_extension'>\n(() => {\n// Check if window.os exists, if not create it\nif (typeof window.os === 'undefined') {\n    window.os = {};\n}\n\n// Check if window.os.registry exists, if not create it\nif (typeof window.os.registry === 'undefined') {\n    window.os.registry = {};\n}\n\n// Define registerExtension function\nwindow.os.registerExtension = function(extension, emoji, callback) {\n    // Store extension, emoji and callback in window.os.registry\n    window.os.registry[extension] = {emoji: emoji, callback: callback};\n};\n\n\n})()\n</script>",
            "<script id='registry_app-icon'>\n(() => {\nwindow.os = window.os || {};\nwindow.os.getOSIcon = function(path, callback) {\n    const root = document.createElement('div');\n    root.classList.add('icon');\n    \n    const isFile = window.os.fs.isFile(path);\n    const emoji = document.createElement('span');\n    emoji.classList.add('emoji');\n    emoji.textContent = isFile ? '\ud83d\udcc4' : '\ud83d\udcc1';\n    root.appendChild(emoji);\n    \n    const title = document.createElement('div');\n    title.classList.add('title');\n    title.textContent = path.split('/').pop();  // Assuming path is in Unix format\n    root.appendChild(title);\n    \n    const extension = path.split('.').pop();  // Assuming path has an extension\n    let currentCallback = callback;\n    if (extension in window.os.registry) {\n        const {emoji: regEmoji, callback: regCallback} = window.os.registry[extension];\n        const appEmoji = document.createElement('span');\n        appEmoji.classList.add('app-emoji');\n        appEmoji.textContent = regEmoji;\n        root.appendChild(appEmoji);\n        \n        currentCallback = regCallback;\n    }\n    \n    root.addEventListener('click', () => currentCallback(path));\n    \n    return root;\n};\n\n\n})()\n</script>",
            "<script id='registry_registry'>\n(() => {\n// Define new function on window.os object\nwindow.os.registerApplication = function(title, emoji, callback, width=400, height=400, extensions=undefined) {\n  // Define internal execute function\n  const execute = (...params) => {\n    // Create new window instance with title, emoji, width and height\n    const windowInstance = window.os.gui.createWindow(emoji, title, width, height);\n    // Attach to window the result of calling callback with windowInstance and spread params\n    window.os.gui.attachToWindow(windowInstance, callback(windowInstance, ...params));\n  };\n  \n  // If extensions is defined, call registerExtension for each extension with emoji and execute function\n  if (extensions) {\n    extensions.forEach(extension => {\n      window.os.registerExtension(extension, emoji, execute);\n    });\n  }\n  \n  // Call addApp with emoji, title and execute function\n  window.os.addApp(emoji, title, execute);\n};\n\n\n})()\n</script>",
            "<style id='apps_styles'>\n.browser {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n</style>",
            "<style id='apps_assistant-styles'>\n.chat {\n    display: flex;\n    flex-direction: column;\n}\n\n.results {\n    width: 100%;\n    height: 300px;\n    overflow-y: scroll;\n    margin: 10px;\n}\n\n.results pre {\n    white-space: pre-wrap;\n}\n\n</style>"
        ]
    },
    "body": {
        "_children_": [
            "<div id='desktop_content'>\n</div>",
            "<script id='debug_debug-window'>\n(() => {\n// Create and append to body a pre element having the class 'debug' and id 'debug'\nvar debugDiv = document.createElement('pre');\ndebugDiv.id = 'debug';\ndebugDiv.className = 'debug';\ndocument.body.appendChild(debugDiv);\n\n// Internal function that fetches the content from 'http://localhost:8080/output' \n// and sets the innerHTML of the debug div to the fetched content\nfunction fetchContent() {\n    fetch('http://localhost:8080/output')\n        .then(response => response.text())\n        .then(data => { debugDiv.innerHTML = data; })\n        .catch(error => console.error('Error:', error));\n}\n\n// Call http://localhost:8080/ping \nfetch('http://localhost:8080/ping')\n    .then(response => {\n        if (response.status === 200) {\n            // If response is 200, set an interval to call the internal function every 1000ms \n            setInterval(fetchContent, 1000);\n        } else {\n            console.error('Ping failed with status', response.status);\n        }\n    })\n    .catch(error => console.error('Error:', error));\n\n\n})()\n</script>",
            "<script id='registry_hello-world'>\n(() => {\n// Define your helloWorld function\nfunction helloWorld(parent, path) {\n  // Create root div element\n  const root = document.createElement('div');\n  parent.appendChild(root);\n  \n  // Create h1 element\n  const h1 = document.createElement('h1');\n  h1.textContent = 'Hello World';\n  root.appendChild(h1);\n  \n  // If path is defined, create pre element containing content of file at path\n  if (path) {\n    const pre = document.createElement('pre');\n    pre.textContent = window.os.fs.readPath(path);\n    root.appendChild(pre);\n  }\n  \n  // Return root element\n  return root;\n}\n\n// Register your application\nwindow.os.registerApplication('Hello World', '\ud83d\udc4b', helloWorld, 300, 200);\n\n\n})()\n</script>",
            "<script id='apps_editor'>\n(() => {\nfunction editor(win, path) {\n    // Create a new div element with class 'editor'\n    let editorDiv = document.createElement('div');\n    editorDiv.className = 'editor';\n    \n    // Create a textarea element\n    let textarea = document.createElement('textarea');\n    textarea.style.width = '100%';\n    textarea.style.height = '400px';\n    \n    // Save reference to textarea for later usage\n    let textareaRef = textarea;\n    \n    // Append textarea to editorDiv\n    editorDiv.appendChild(textarea);\n    \n    // Create toolbar on win parameter\n    let toolbarInstance = os.gui.createToolbar(win); \n    \n    // If path is defined, read file content and set it to textarea\n    if (path) {\n        let content = window.os.fs.readPath(path);\n        textareaRef.value = content;\n    }\n    \n    // Add button on toolbar with '\ud83d\udcbe' text to save textarea content to path if path is defined, prompt for path otherwise\n    toolbarInstance.addButton('\ud83d\udcbe', function() {\n        if (path) {\n            window.os.fs.write(path, textareaRef.value);\n        } else {\n            path = prompt('Please enter a path');\n            window.os.fs.write(path, textareaRef.value);\n        }\n    });\n    \n    // Return editorDiv element\n    return editorDiv;\n}\n\n// Register application with 'Editor' title, \u270d\ufe0f as emoji, editor function reference and 400x450 size for [txt,doc] extensions \nos.registerApplication('Editor', '\u270d\ufe0f', editor, 400, 450, ['txt', 'doc']); \n\n\n})()\n</script>",
            "<script id='apps_browser'>\n(() => {\nfunction createBrowser(parent) {\n  const root = document.createElement('div');\n  root.classList.add('browser');\n  let browserPath = '';\n  \n  const load = (path) => {\n    browserPath = path;\n    root.innerHTML = '';\n    if (browserPath !== '') {\n      const backButton = document.createElement('div');\n      backButton.classList.add('icon');\n      const backEmoji = document.createElement('span');\n      backEmoji.classList.add('emoji');\n      backEmoji.textContent = '\ud83d\udd19';\n      backButton.appendChild(backEmoji);\n      backButton.onclick = () => load(browserPath.split('/').slice(0, -1).join('/'));\n      root.appendChild(backButton);\n    }\n    window.os.fs.ls(browserPath).forEach(item => {\n      const iconDiv = window.os.getOSIcon(browserPath + '/' + item, () => load(browserPath + '/' + item));\n      root.appendChild(iconDiv);\n    });\n  };\n  \n  const toolbar = window.os.gui.createToolbar(parent);\n  toolbar.addButton('\ud83d\udcc1', () => {\n    const name = prompt('Enter directory name');\n    if (name) {\n      window.os.fs.mkdir(browserPath + '/' + name);\n      load(browserPath);\n    }\n  });\n  toolbar.addButton('\ud83d\udcc4', () => {\n    const name = prompt('Enter file name');\n    if (name) {\n      window.os.fs.write(browserPath + '/' + name, '');\n      load(browserPath);\n    }\n  });\n  \n  load(browserPath);\n  \n  return root;\n}\n\n// Register application with 'Browser' title, \ud83d\udcc2 as emoji, createBrowser function as callback and 400x400 size \nwindow.os.registerApplication('Browser', '\ud83d\udcc2', createBrowser, 400, 400); \n\n\n})()\n</script>",
            "<script id='apps_run'>\n(() => {\n// Define your application's callback function\nconst application = (parent) => {\n  // Create root DOM element\n  const root = document.createElement('div');\n  root.className = 'chat';\n  parent.appendChild(root);\n  \n  // Create input element\n  const input = document.createElement('input');\n  input.style.width = '100%';\n  input.addEventListener('keyup', (event) => {\n    if (event.key === 'Enter') {\n      // Save input value to instruction variable\n      const instruction = event.target.value;\n      event.target.value = '';\n      \n      // POST instruction to server\n      fetch('http://localhost:8080', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ instruction: instruction, full: false })\n      })\n      .then(response => response.text())\n      .then(data => {\n        // Add script tag to body with response text content\n        const script = document.createElement('script');\n        script.id = 'run-script';\n        script.textContent = data;\n        document.body.appendChild(script);\n      });\n    }\n  });\n  root.appendChild(input);\n  \n  return root;\n};\n\n// Register your application\nwindow.os.registerApplication('Run', '\u25b6\ufe0f', application, 400, 70); \n\n\n})()\n</script>",
            "<script id='apps_assistant'>\n(() => {\n// Define your assistant function\nconst assistant = (parent) => {\n  // Create root dom element with class 'chat'\n  const chat = document.createElement('div');\n  chat.className = 'chat';\n  parent.appendChild(chat);\n  \n  // Create div element with class 'results'\n  const results = document.createElement('div');\n  results.style.width = '100%';\n  results.style.height = '300px';\n  results.className = 'results';\n  chat.appendChild(results);\n  \n  // Create input element\n  const input = document.createElement('input');\n  input.style.width = '100%';\n  chat.appendChild(input);\n  \n  // Add button\n  const button = document.createElement('button');\n  button.textContent = '\u27a1\ufe0f';\n  button.onclick = () => {\n    // Save input value to instruction variable\n    const instruction = input.value;\n    input.value = '';  // Clear input\n    \n    // POST request\n    fetch('http://localhost:8080', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ instruction: instruction, full: true })\n    })\n    .then(response => response.text())  // Get response text\n    .then(data => {\n      // Add pre tag with response text content to results\n      const pre = document.createElement('pre');\n      pre.textContent = data;\n      results.appendChild(pre);\n    });\n  };\n  chat.appendChild(button);\n  \n  return chat;  // Return dom element\n};\n\n// Register your assistant application\nwindow.os.registerApplication('Assistant', '\ud83d\udc68\ud83c\udffd\u200d\u2695\ufe0f', assistant, 400, 400);  // assuming os object has been defined elsewhere\n\n\n})()\n</script>"
        ]
    },
    "_children_": []
}