{
    "head": {
        "_children_": [
            "<style id='osbase_general-styles'>\nbody {\n    background-color: #FFF4DF;\n    overflow: hidden;\n}\n</style>",
            "<script id='osbase_global-objects'>\n(() => {\nwindow.os = {};\n\n})()\n</script>",
            "<script id='osbase_filesystem'>\n(() => {\n// Load the filesystem object from local storage or create a default one\nconst filesystem = JSON.parse(localStorage.getItem('filesystem')) || {\n    'about.txt': 'Welcome to TempLLMOS'\n};\nlocalStorage.setItem('filesystem', JSON.stringify(filesystem));\n\n// Define the os.fs object\nwindow.os = window.os || {};\nwindow.os.fs = {};\n\n/**\n * Processes and returns a path by taking into account '..', '//' and '/'.\n * @param {string} path - The path to process.\n * @returns {string|null} - The processed path or null if invalid.\n */\nwindow.os.fs.getPath = function(path) {\n    const parts = path.split('/').filter(part => part !== '' && part !== '.');\n    const stack = [];\n    for (const part of parts) {\n        if (part === '..') {\n            if (stack.length > 0) {\n                stack.pop();\n            } else {\n                return null;\n            }\n        } else {\n            stack.push(part);\n        }\n    }\n    return '/' + stack.join('/');\n};\n\n/**\n * Checks if the path is valid.\n * @param {string} path - The path to check.\n * @returns {boolean} - True if valid, false otherwise.\n */\nwindow.os.fs.isValidPath = function(path) {\n    return typeof path === 'string' && path.startsWith('/') && !path.includes('//');\n};\n\n/**\n * Returns a list of entries in the filesystem object at the given path.\n * @param {string} path - The path to list entries from.\n * @returns {Array} - An array of entries.\n */\nwindow.os.fs.ls = function(path) {\n    const currentDir = filesystem;\n    const parts = path.split('/').filter(part => part !== '');\n    for (const part of parts) {\n        if (currentDir[part]) {\n            currentDir = currentDir[part];\n        } else {\n            return [];\n        }\n    }\n    return Object.keys(currentDir);\n};\n\n/**\n * Creates an empty object at the given path.\n * @param {string} path - The path where to create the object.\n */\nwindow.os.fs.mkdir = function(path) {\n    const parts = path.split('/').filter(part => part !== '');\n    let currentDir = filesystem;\n    for (const part of parts) {\n        if (!currentDir[part]) {\n            currentDir[part] = {};\n        }\n        currentDir = currentDir[part];\n    }\n};\n\n/**\n * Removes the object at the given path.\n * @param {string} path - The path of the object to remove.\n */\nwindow.os.fs.rm = function(path) {\n    const parts = path.split('/').filter(part => part !== '');\n    let currentDir = filesystem;\n    for (let i = 0; i < parts.length - 1; i++) {\n        if (currentDir[parts[i]]) {\n            currentDir = currentDir[parts[i]];\n        } else {\n            return;\n        }\n    }\n    delete currentDir[parts[parts.length - 1]];\n};\n\n/**\n * Writes the content to an entry in the filesystem object at the given path.\n * @param {string} path - The path where to write the content.\n * @param {string} content - The content to write.\n */\nwindow.os.fs.write = function(path, content) {\n    const parts = path.split('/').filter(part => part !== '');\n    let currentDir = filesystem;\n    for (let i = 0; i < parts.length - 1; i++) {\n        if (!currentDir[parts[i]]) {\n            currentDir[parts[i]] = {};\n        }\n        currentDir = currentDir[parts[i]];\n    }\n    currentDir[parts[parts.length - 1]] = content;\n};\n\n/**\n * Reads an entry split by '\\n' in the filesystem object at the given path.\n * @param {string} path - The path of the file to read.\n * @returns {Array|null} - An array of lines or null if not found.\n */\nwindow.os.fs.read = function(path) {\n    const parts = path.split('/').filter(part => part !== '');\n    let currentDir = filesystem;\n    for (const part of parts) {\n        if (currentDir[part]) {\n            currentDir = currentDir[part];\n        } else {\n            return null;\n        }\n    }\n    return currentDir.split('\\n');\n};\n\n})()\n</script>",
            "<style id='terminal_terminal-style'>\n.terminal {\n    width: 100%;\n    height: 100%;\n    background-color: black;\n    color: white;\n    font-family: monospace;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n}\n.terminal-output {\n    flex: 1;\n    overflow-y: auto;\n    padding: 10px;\n    display: flex;\n    flex-direction: column-reverse;\n}\n.terminal-line {\n    display: flex;\n    flex-direction: row;\n    overflow-wrap: anywhere;\n}\n.terminal-input {\n    display: flex;\n    flex-direction: row;\n}\n.terminal-input-text {\n    background-color: transparent;\n    border: none;\n    color: white;\n    font-family: monospace;\n    font-size: 16px;\n    flex: 1;\n    outline: none;\n}\n</style>"
        ]
    },
    "body": {
        "_children_": [
            "<span id='osbase_logo'>\n<svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" style=\"position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);\">\n    <g fill=\"none\" stroke=\"black\" stroke-width=\"2\">\n        <polygon points=\"50,10 90,40 10,40\" />\n        <rect x=\"30\" y=\"40\" width=\"40\" height=\"40\" />\n        <line x1=\"50\" y1=\"40\" x2=\"50\" y2=\"80\" />\n        <line x1=\"30\" y1=\"60\" x2=\"70\" y2=\"60\" />\n    </g>\n    <text x=\"50\" y=\"95\" font-family=\"Arial\" font-size=\"8\" text-anchor=\"middle\" fill=\"black\">TempLLM OS</text>\n</svg>\n</span>",
            "<script id='osbase_outputs'>\n(() => {\nconst asciiArt = `\nTTTTT  EEEEE  M   M  PPPP   L     L      MM   MM      OOO   SSSS\n  T    E      MM MM  P   P  L     L      MMM MMM     O   O S\n  T    EEEE   M M M  PPPP   L     L      M M M M     O   O  SSSS\n  T    E      M   M  P      L     L      M   M M     O   O     S\n  T    EEEEE  M   M  P      LLLLL LLLLL  M   M M      OOO  SSSS\n`.replace(/ /g, '.');\n\nwindow.os.fs.write('/logo.txt', asciiArt);\n\n})()\n</script>",
            "<script id='terminal_terminal-runtime'>\n(() => {\nlet currentPath = '/';\n\n/**\n * Changes the current path to the specified path.\n * @param {string} path - The path to change to.\n */\nfunction cd(path) {\n    currentPath = path;\n}\n\n/**\n * Returns the current working directory.\n * @returns {string} - The current path.\n */\nfunction pwd() {\n    return currentPath;\n}\n\nconst bin = {\n    getPath: window.os.fs.getPath,\n    isValidPath: window.os.fs.isValidPath,\n    ls: window.os.fs.ls,\n    mkdir: window.os.fs.mkdir,\n    rm: window.os.fs.rm,\n    write: window.os.fs.write,\n    read: window.os.fs.read,\n    cd: cd,\n    pwd: pwd\n};\n/**\n * Executes a command with the given parameters, processing the path accordingly.\n * @param {string} commandString - The command string to execute.\n * @returns {any} - The result of the command execution or an error message.\n */\nfunction execute(commandString) {\n    const args = commandString.split(' ');\n    let path = currentPath;\n    const command = 'bin.' + args[0];\n\n    if (args[1]) {\n        if (!args[1].startsWith('/')) {\n            path = window.os.fs.getPath(currentPath + '/' + args[1]);\n        } else {\n            path = window.os.fs.getPath(args[1]);\n        }\n    }\n\n    try {\n        return eval(`${command}('${path}'${args.slice(2).map(arg => `, '${arg}'`).join('')})`);\n    } catch (error) {\n        return error.message;\n    }\n}\nwindow.apps = window.apps || {};\n\nwindow.apps.terminal = function() {\n    const terminal = document.createElement('div');\n    terminal.className = 'terminal';\n\n    const terminalOutput = document.createElement('div');\n    terminalOutput.className = 'terminal-output';\n    terminal.appendChild(terminalOutput);\n\n    const welcomeLine = document.createElement('div');\n    welcomeLine.className = 'terminal-line';\n    welcomeLine.textContent = 'Welcome to TempLLM OS';\n    terminalOutput.appendChild(welcomeLine);\n\n    const terminalInput = document.createElement('div');\n    terminalInput.className = 'terminal-input';\n    terminal.appendChild(terminalInput);\n\n    const prefix = document.createElement('span');\n    prefix.className = 'prefix';\n    prefix.textContent = '>';\n    terminalInput.appendChild(prefix);\n\n    const inputText = document.createElement('input');\n    inputText.className = 'terminal-input-text';\n    terminalInput.appendChild(inputText);\n\n    function output(value, color = 'white') {\n        const line = document.createElement('div');\n        line.className = 'terminal-line';\n        line.style.color = color;\n\n        if (Array.isArray(value)) {\n            value.forEach(item => {\n                const itemLine = document.createElement('div');\n                itemLine.textContent = item;\n                itemLine.style.color = color;\n                terminalOutput.prepend(itemLine);\n            });\n        } else {\n            line.textContent = value;\n            terminalOutput.prepend(line);\n        }\n    }\n\n    inputText.addEventListener('keydown', function(event) {\n        if (event.key === 'Enter') {\n            const currentTime = new Date().toLocaleTimeString();\n            const content = inputText.value;\n            output(`[${currentTime}] ${content}`, 'yellow');\n            const result = execute(content);\n            output(result);\n            inputText.value = '';\n            inputText.focus();\n        }\n    });\n\n    return terminal;\n};\ndocument.body.appendChild(window.apps.terminal());\n\n})()\n</script>",
            "<script></script>"
        ]
    },
    "_children_": []
}