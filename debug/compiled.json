{
    "head": {
        "_children_": [
            "<style id='osbase_general-styles'>\nbody {\n    background-color: #FFF4DF;\n    overflow: hidden;\n}\n</style>",
            "<script id='osbase_global-objects'>\n(() => {\nwindow.os = {};\n\n})()\n</script>",
            "<script id='osbase_filesystem'>\n(() => {\n(function() {\n    if (!window.os) {\n        window.os = {};\n    }\n    if (!window.os.fs) {\n        window.os.fs = {};\n    }\n\n    const fsKey = 'filesystem';\n    let filesystem = JSON.parse(localStorage.getItem(fsKey)) || {\n        'about.txt': 'Welcome to TempLLMOS'\n    };\n\n    /**\n     * Saves the filesystem object to local storage.\n     * @function\n     */\n    window.os.fs.sync = function() {\n        localStorage.setItem(fsKey, JSON.stringify(filesystem));\n    };\n\n    /**\n     * Processes and returns a path, handling '..', '//' and '/'.\n     * @param {string} path - The path to process.\n     * @returns {string|null} - The processed path or null if invalid.\n     */\n    window.os.fs.getPath = function(path) {\n        const parts = path.split('/').filter(Boolean);\n        const stack = [];\n        for (const part of parts) {\n            if (part === '..') {\n                if (stack.length > 0) {\n                    stack.pop();\n                } else {\n                    return null;\n                }\n            } else {\n                stack.push(part);\n            }\n        }\n        return '/' + stack.join('/');\n    };\n\n    /**\n     * Checks if the path is valid.\n     * @param {string} path - The path to check.\n     * @returns {boolean} - True if valid, false otherwise.\n     */\n    window.os.fs.isValidPath = function(path) {\n        return typeof path === 'string' && path.startsWith('/');\n    };\n\n    /**\n     * Returns a list of entries in the filesystem object at the given path.\n     * @param {string} path - The path to list entries from.\n     * @returns {Array} - An array of entries.\n     */\n    window.os.fs.ls = function(path) {\n        const processedPath = this.getPath(path);\n        if (!this.isValidPath(processedPath)) return [];\n        const parts = processedPath.split('/').filter(Boolean);\n        let current = filesystem;\n        for (const part of parts) {\n            if (current[part]) {\n                current = current[part];\n            } else {\n                return [];\n            }\n        }\n        return Object.keys(current);\n    };\n\n    /**\n     * Creates an empty object at the given path.\n     * @param {string} path - The path to create the directory at.\n     */\n    window.os.fs.mkdir = function(path) {\n        const processedPath = this.getPath(path);\n        if (!this.isValidPath(processedPath)) return;\n        const parts = processedPath.split('/').filter(Boolean);\n        let current = filesystem;\n        for (const part of parts) {\n            if (!current[part]) {\n                current[part] = {};\n            }\n            current = current[part];\n        }\n        this.sync();\n    };\n\n    /**\n     * Removes the object at the given path.\n     * @param {string} path - The path to remove the object from.\n     */\n    window.os.fs.rm = function(path) {\n        const processedPath = this.getPath(path);\n        if (!this.isValidPath(processedPath)) return;\n        const parts = processedPath.split('/').filter(Boolean);\n        let current = filesystem;\n        for (let i = 0; i < parts.length - 1; i++) {\n            if (current[parts[i]]) {\n                current = current[parts[i]];\n            } else {\n                return;\n            }\n        }\n        delete current[parts[parts.length - 1]];\n        this.sync();\n    };\n\n    /**\n     * Writes the content to an entry in the filesystem object at the given path.\n     * @param {string} path - The path to write to.\n     * @param {string} content - The content to write.\n     */\n    window.os.fs.write = function(path, content) {\n        const processedPath = this.getPath(path);\n        if (!this.isValidPath(processedPath)) return;\n        const parts = processedPath.split('/').filter(Boolean);\n        let current = filesystem;\n        for (const part of parts.slice(0, -1)) {\n            if (!current[part]) {\n                current[part] = {};\n            }\n            current = current[part];\n        }\n        current[parts[parts.length - 1]] = content;\n        this.sync();\n    };\n\n    /**\n     * Reads an entry split by '\\n' in the filesystem object at the given path.\n     * @param {string} path - The path to read from.\n     * @returns {Array|null} - An array of lines or null if not found.\n     */\n    window.os.fs.read = function(path) {\n        const processedPath = this.getPath(path);\n        if (!this.isValidPath(processedPath)) return null;\n        const parts = processedPath.split('/').filter(Boolean);\n        let current = filesystem;\n        for (const part of parts) {\n            if (current[part]) {\n                current = current[part];\n            } else {\n                return null;\n            }\n        }\n        return current.split('\\n');\n    };\n\n    window.os.fs.sync();\n})();\n\n})()\n</script>",
            "<style id='terminal_terminal-style'>\n.terminal {\n    width: 100%;\n    height: 100%;\n    background-color: black;\n    color: white;\n    font-family: monospace;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n}\n.terminal-output {\n    flex: 1;\n    overflow-y: auto;\n    padding: 10px;\n    display: flex;\n    flex-direction: column-reverse;\n}\n.terminal-line {\n    display: flex;\n    flex-direction: row;\n    overflow-wrap: anywhere;\n}\n.terminal-input {\n    display: flex;\n    flex-direction: row;\n}\n.terminal-input-text {\n    background-color: transparent;\n    border: none;\n    color: white;\n    font-family: monospace;\n    font-size: 16px;\n    flex: 1;\n    outline: none;\n}\n</style>"
        ]
    },
    "body": {
        "_children_": [
            "<span id='osbase_logo'>\n<svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" style=\"position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);\">\n    <g fill=\"none\" stroke=\"black\" stroke-width=\"2\">\n        <polygon points=\"50,10 90,40 10,40\" />\n        <rect x=\"30\" y=\"40\" width=\"40\" height=\"40\" />\n        <line x1=\"50\" y1=\"40\" x2=\"50\" y2=\"80\" />\n        <line x1=\"30\" y1=\"60\" x2=\"70\" y2=\"60\" />\n    </g>\n    <text x=\"50\" y=\"95\" font-family=\"Arial\" font-size=\"8\" text-anchor=\"middle\" fill=\"black\">TempLLM OS</text>\n</svg>\n</span>",
            "<script id='osbase_outputs'>\n(() => {\nconst asciiArt = `\nTTTTT  EEEEE  M   M  PPPP   L     L      M   M      OOO   SSSS\n  T    E      MM MM  P   P  L     L     MM MM     O   O S\n  T    EEEE   M M M  PPPP   L     L     M M M     O   O  SSSS\n  T    E      M   M  P      L     L     M   M     O   O     S\n  T    EEEEE  M   M  P      LLLLL LLLLL M   M      OOO  SSSS\n`.replace(/ /g, '.');\n\nwindow.os.fs.write('/logo.txt', asciiArt);\n\n})()\n</script>",
            "<script id='terminal_terminal-runtime'>\n(() => {\nlet currentPath = '/';\n\n/**\n * Changes the current directory to the specified path.\n * @param {string} path - The path to change to.\n */\nfunction cd(path) {\n    currentPath = path;\n}\n\n/**\n * Returns the current working directory.\n * @returns {string} - The current path.\n */\nfunction pwd() {\n    return currentPath;\n}\n\nconst bin = {\n    sync: window.os.fs.sync,\n    getPath: window.os.fs.getPath,\n    isValidPath: window.os.fs.isValidPath,\n    ls: window.os.fs.ls,\n    mkdir: window.os.fs.mkdir,\n    rm: window.os.fs.rm,\n    write: window.os.fs.write,\n    read: window.os.fs.read,\n    cd: cd,\n    pwd: pwd\n};\n/**\n * Executes a command with the given parameters, processing the path accordingly.\n * @param {string} input - The command string to execute.\n * @returns {any} - The result of the command execution or an error message.\n */\nfunction execute(input) {\n    const args = input.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g);\n    let path = currentPath;\n    const command = `bin.${args[0]}`;\n    \n    if (args[1]) {\n        if (!args[1].startsWith('/')) {\n            path = window.os.fs.getPath(`${currentPath}/${args[1]}`);\n        } else {\n            path = window.os.fs.getPath(args[1]);\n        }\n    }\n\n    try {\n        return eval(`${command}(\"${path}\", ${args.slice(2).map(arg => `\"${arg}\"`).join(', ')})`);\n    } catch (error) {\n        return error.message;\n    }\n}\nwindow.apps = window.apps || {};\n\nwindow.apps.terminal = function() {\n    const terminal = document.createElement('div');\n    terminal.className = 'terminal';\n\n    const terminalOutput = document.createElement('div');\n    terminalOutput.className = 'terminal-output';\n    const welcomeLine = document.createElement('div');\n    welcomeLine.className = 'terminal-line';\n    welcomeLine.textContent = 'Welcome to TempLLM OS';\n    terminalOutput.appendChild(welcomeLine);\n    terminal.appendChild(terminalOutput);\n\n    const terminalInput = document.createElement('div');\n    terminalInput.className = 'terminal-input';\n    const prefix = document.createElement('div');\n    prefix.className = 'prefix';\n    prefix.textContent = '>';\n    const input = document.createElement('input');\n    input.className = 'terminal-input-text';\n    terminalInput.appendChild(prefix);\n    terminalInput.appendChild(input);\n    terminal.appendChild(terminalInput);\n\n    function output(value, color = 'white') {\n        const line = document.createElement('div');\n        line.className = 'terminal-line';\n        line.style.color = color;\n        if (Array.isArray(value)) {\n            value.forEach(item => {\n                const itemLine = document.createElement('div');\n                itemLine.textContent = item;\n                itemLine.style.color = color;\n                terminalOutput.prepend(itemLine);\n            });\n        } else {\n            line.textContent = value;\n            terminalOutput.prepend(line);\n        }\n    }\n\n    input.addEventListener('keydown', function(event) {\n        if (event.key === 'Enter') {\n            const currentTime = new Date().toLocaleTimeString();\n            const content = input.value;\n            output(`[${currentTime}] ${content}`, 'yellow');\n            const result = execute(content);\n            output(result);\n            input.value = '';\n            input.focus();\n        }\n    });\n\n    return terminal;\n};\ndocument.body.appendChild(window.apps.terminal());\n\n})()\n</script>",
            "<script>window.os.fs.write('/sources/chatgpt_os/general-styles.txt', 'Package: general-styles\\ncss to apply a #FFF4DF background color to the body and overflow hidden')\nwindow.os.fs.write('/sources/chatgpt_os/logo.txt', 'Package: logo\\nSVG dom element, fixed centered on the screen, with a width of 100px and height of 100px of a line art temple logo and the text that says \"TempLLM OS\"')\nwindow.os.fs.write('/sources/chatgpt_os/global-objects.txt', 'Package: global-objects\\nCreate a new empty object `os` on the window global object')\nwindow.os.fs.write('/sources/chatgpt_filesystem/filesystem.txt', 'Package: filesystem\\nLoad the `filesystem` object from the local storage as json, if it does not exist create an empty object with a property `about.txt` with the content `Welcome to TempLLMOS`\\nDefine the following functions on the window.os.fs object:\\n `sync` - save the filesystem object to the local storage that will be called by the other functions that modify the filesystem object\\n `getPath` - process and return a path by taking into account `..`, `//` and `/`. return null if the path is invalid\\n `isValidPath` - checks if the path is valid\\n `ls` - returns a list of entries in the filesystem object at the given path\\n `mkdir` - creates an empty object at the given path\\n `rm` - removes the object at the given path\\n `write` - writes the content to an entry in the filesystem object at the given path\\n `read` - reads an entry split by `\\n` in the filesystem object at the given path, last element in path is the file name')\nwindow.os.fs.write('/sources/chatgpt_filesystem/outputs.txt', 'Package: outputs\\ncall write with the path `/logo.txt` and ascii art of text `TempLLM OS` fill empty spaces with .')\nwindow.os.fs.write('/sources/chatgpt_filesystem/utils.txt', 'Package: utils\\nDefine a function `cat` on `window.os` namespace that takes a path as a parameter and returns the content of the file split by `\\n` ')\nwindow.os.fs.write('/sources/chatgpt_filesystem/fs-tests.txt', 'Package: fs-tests\\ncreate a new directory in the root directory called `fstest`\\ncreate a new file in the `fstest` directory called `test.txt` with the content `hello world`\\nlist the entries in the `fstest` directory and log it to console\\nread the content of the `fstest/test.txt` file and log it to console\\nremove the `fstest` directory')\nwindow.os.fs.write('/sources/chatgpt_terminal/terminal-style.txt', 'Package: terminal-style\\ndefine a terminal class with the following css properties\\n- width: 100%\\n- height: 100%\\n- background-color: black\\n- color: white\\n- font-family: monospace\\n- overflow: hidden\\n- display: flex\\n- flex-direction: column\\ndefine a terminal-output class with the following css properties\\n- flex: 1\\n- overflow-y: auto\\n- padding: 10px\\n- display: flex\\n- flex-direction: column-reverse\\ndefine a terminal-line class with the following css properties\\n- display: flex\\n- flex-direction: row\\n- overflow-wrap: anywhere\\ndefine a terminal-input class with the following css properties\\n- display: flex\\n- flex-direction: row\\ndefine a terminal-input-text class with the following css properties\\n- background-color: transparent\\n- border: none\\n- color: white\\n- font-family: monospace\\n- font-size: 16px\\n- flex: 1\\n- outline: none')\nwindow.os.fs.write('/sources/chatgpt_terminal/terminal-runtime.txt', 'Package: terminal-runtime\\nkeep a local variable called currentPath with value \"/\"\\ndefine a local function `cd` that takes a string parameter and sets currentPath to it\\ndefine a local function `pwd` that returns the parent scope defined currentPath\\ndefine and object called bin and referece functions from objects:\\n - window.os.fs\\n - `cd` and `pwd` functions\\ncurrentPath is defined in parent scope\\ndefine a function `execute` that takes a string parameter and:\\n - splits the string by space but keeps in a single element if it is in quotes\\n - set path to currentPath\\n - the first element is the command and prepend `bin.` to it\\n - if the second element exists:\\n    - if it does not start with `/`, prepend `currentPath` to it and assign it to path after calling `getPath` on it\\n    - if it starts with `/`, assign it to path after calling `getPath` on it\\n - return eval of `command` with `path` and rest of the parameters from the list as string arguments\\n - if the eval throws an error, return the error message\\ndefine a function `terminal` on window.apps that creates a root element with class terminal and returns it at the end\\ncreate the following dom structure:\\n - .terminal\\n   - .terminal-output\\n     - .terminal-line with text \"Welcome to TempLLM OS\"\\n   - .terminal-input\\n     - .prefix with text \">\"\\n     - input.terminal-input-text\\ndefine inner function called output that takes two parameters: value and color with default value white. The function prepends a div with class terminal-line having color style as provided in the function and the value as text to the terminal-output div. if the value is a list then prepend each item in the list as a separate div\\nwhen the user hits the enter key on the input take the content call the output function with the content prefixed with `[%current_time%]` and color yellow, call `output` with the resul of calling `execute` function with the value of the input, clear the input and focus it again\\nappend to the body the dom element resulted from executing the terminal function')</script>",
            "<script>window.os.fs.write('/presentation.md', '# Introduction\\n\\n## Hello World\\n\\n# What\\n\\n## Can LLM Write Good OS?\\n\\n### Don\"t know\\n\\n# First\\n\\n## Can LLM Write Bad OS?\\n\\n### Let\"s try')</script>"
        ]
    },
    "_children_": []
}