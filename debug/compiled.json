{
    "head": {
        "_children_": [
            "<style id='osbase_general-styles'>\nbody {\n    background-color: #ffe4e1; /* This is a hexadecimal representation of a light pink color */\n}\n\n</style>",
            "<script id='osbase_global-objects'>\n(() => {\nwindow.os = {};\n\n\n})()\n</script>",
            "<script id='osbase_filesystem'>\n(() => {\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.fs) {\n    window.os.fs = {\n        filesystem: {},\n        sync: function () {\n            window.localStorage.setItem('filesystem', JSON.stringify(this.filesystem));\n        },\n        readPath: function (path) {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let parts = path.split('/');\n            let obj = this.filesystem;\n            for (let part of parts) {\n                if (obj[part] === undefined) {\n                    return undefined;\n                } else {\n                    obj = obj[part];\n                }\n            }\n            return obj;\n        },\n        write: function (path, content) {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let parts = path.split('/');\n            let obj = this.filesystem;\n            for (let i = 0; i < parts.length - 1; i++) {\n                if (obj[parts[i]] === undefined) {\n                    obj[parts[i]] = {};\n                }\n                obj = obj[parts[i]];\n            }\n            obj[parts[parts.length - 1]] = content;\n            this.sync();\n        },\n        ls: function (path = '') {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let obj = this.filesystem;\n            if (path !== '') {\n                let parts = path.split('/');\n                for (let part of parts) {\n                    if (obj[part] === undefined) {\n                        return undefined;\n                    } else {\n                        obj = obj[part];\n                    }\n                }\n            }\n            return Object.keys(obj);\n        },\n        mkdir: function (path, dirName) {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let parts = path.split('/');\n            let obj = this.filesystem;\n            for (let i = 0; i < parts.length - 1; i++) {\n                if (obj[parts[i]] === undefined) {\n                    obj[parts[i]] = {};\n                }\n                obj = obj[parts[i]];\n            }\n            obj[dirName] = {};\n            this.sync();\n        },\n        rm: function (path) {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let parts = path.split('/');\n            let obj = this.filesystem;\n            let parent = obj;\n            for (let i = 0; i < parts.length - 1; i++) {\n                if (obj[parts[i]] === undefined) {\n                    return;\n                } else {\n                    parent = obj;\n                    obj = obj[parts[i]];\n                }\n            }\n            delete parent[parts[parts.length - 1]];\n            this.sync();\n        },\n        isFile: function (path) {\n            if (path[0] === '/') {\n                path = path.substring(1);\n            }\n            let parts = path.split('/');\n            let obj = this.filesystem;\n            for (let part of parts) {\n                if (obj[part] === undefined || typeof obj[part] !== 'string') {\n                    return false;\n                } else {\n                    obj = obj[part];\n                }\n            }\n            return true;\n        }\n    };\n}\n\n\n})()\n</script>",
            "<style id='desktop_content-style'>\n#desktop_content {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow-y: hidden;\n    padding: 10px;\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    align-content: flex-start;\n}\n\n</style>",
            "<style id='desktop_styles'>\n.icon {\n    width: 64px;\n    min-height: 64px;\n    text-align: center;\n    margin: 5px;\n    cursor: pointer;\n}\n\n.emoji {\n    display: inline-block;\n    font-size: 30px;\n    position: relative;\n}\n\n.title {\n    display: block;\n    font-size: 8px;\n    font-family: monospace;\n    color: black;\n    padding: 5px;\n    word-wrap: break-word;\n    border: 2px solid black;\n    background-color: white;\n    border-radius: 5px;\n}\n\n</style>",
            "<script id='desktop_desktop-app'>\n(() => {\n// Check if os.desktop exists, if not create it\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.desktop) {\n    window.os.desktop = {};\n}\n\n// Add addApp function to os.desktop\nwindow.os.desktop.addApp = function(emoji, title, callback) {\n    // Create root DOM element with class .icon\n    var icon = document.createElement('div');\n    icon.className = 'icon';\n    \n    // Create span with class .emoji and add it to icon\n    var emojiSpan = document.createElement('span');\n    emojiSpan.className = 'emoji';\n    emojiSpan.textContent = emoji;\n    icon.appendChild(emojiSpan);\n    \n    // Create span with class .title and add it to icon\n    var titleSpan = document.createElement('span');\n    titleSpan.className = 'title';\n    titleSpan.textContent = title;\n    icon.appendChild(titleSpan);\n    \n    // Append icon to #desktop_content\n    document.querySelector('#desktop_content').appendChild(icon);\n    \n    // Add click event listener to icon\n    icon.addEventListener('click', function() {\n        // Call callback when icon is clicked\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n};\n\n\n})()\n</script>",
            "<style id='gui_gui-styles'>\n.titleBar {\n    background-color: orange;\n    border-bottom: 1px solid black;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: monospace;\n    font-size: small;\n    padding: 5px;\n    user-select: none; /* This will prevent text selection */\n}\n\n/* This will apply styles to buttons inside the title bar */\n.titleBar button {\n    background: none;\n    border: none;\n    cursor: pointer;\n    font-size: 6;\n    padding: 0; /* This will remove default button padding */\n}\n\n.window {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    background-color: white;\n    padding: 0;\n    border: 2px solid black;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 4px 4px 0 0 rgba(0,0,0,0.5);\n}\n\n.contentPlaceholder {\n    flex-grow: 1;\n    overflow: auto;\n    padding: 5px;\n}\n\n.toolbarPlaceholder {\n    border-bottom: 1px solid black;\n}\n\n.statusPlaceholder {\n    border-top: 1px solid black;\n    font-family: monospace;\n    font-size: small;\n}\n\n.resizeHandle {\n    width: 0px;\n    height: 0px;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    cursor: se-resize;\n    border-width: 0 0 5px 5px;\n    border-style: solid;\n    border-color: transparent transparent #ff7200 transparent;\n    transform: rotate(0deg);\n}\n\n</style>",
            "<script id='gui_gui-global-objects'>\n(() => {\nif (typeof window.os === 'undefined') {\n    window.os = {};\n}\n\nwindow.os.gui = {};\n\n\n})()\n</script>",
            "<script id='gui_draggable'>\n(() => {\n// Assuming window.os is already defined and has a gui property\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Define makeDraggable function\nwindow.os.gui.makeDraggable = function (root, dragHandle) {\n    let offsetX = 0;\n    let offsetY = 0;\n    let mouseX = 0;\n    let mouseY = 0;\n    \n    const handleMouseDown = function (e) {\n        e = e || window.event;\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        offsetX = root.offsetLeft - mouseX;\n        offsetY = root.offsetTop - mouseY;\n        \n        document.onmouseup = function () {\n            document.onmousemove = null;\n            document.onmouseup = null;\n        };\n        \n        document.onmousemove = function (e) {\n            e = e || window.event;\n            mouseX = e.clientX;\n            mouseY = e.clientY;\n            root.style.left = (mouseX + offsetX) + 'px';\n            root.style.top = (mouseY + offsetY) + 'px';\n        };\n    };\n    \n    dragHandle.onmousedown = handleMouseDown;\n};\n\n// Assuming window.os exists and has a gui property\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Define makeResizable function\nwindow.os.gui.makeResizable = function(root, resizeHandle) {\n    let startX;\n    let startY;\n    let startWidth = root.offsetWidth;\n    let startHeight = root.offsetHeight;\n    \n    // Handle mousedown event to start resizing\n    resizeHandle.addEventListener('mousedown', function(e) {\n        e.preventDefault();\n        startX = e.clientX;\n        startY = e.clientY;\n        \n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n    });\n    \n    // Handle mousemove event to resize element\n    function handleMouseMove(e) {\n        let width = startWidth + e.clientX - startX;\n        let height = startHeight + e.clientY - startY;\n        \n        root.style.width = width + 'px';\n        root.style.height = height + 'px';\n    }\n    \n    // Handle mouseup event to stop resizing and update starting width and height\n    function handleMouseUp() {\n        startWidth = root.offsetWidth;\n        startHeight = root.offsetHeight;\n        \n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n    }\n};\n\nif (!window.os || !window.os.gui) {\n    window.os = window.os || {};\n    window.os.gui = window.os.gui || {};\n}\n\nwindow.os.gui.bringToFront = function (rootDomNode) {\n    // Internal function to bring other nodes to front\n    var bringOthersToFront = function () {\n        // Get all nodes with same class as rootDomNode\n        var nodes = document.getElementsByClassName(rootDomNode.className);\n        // Iterate through them and set z-index to 0\n        for (var i = 0; i < nodes.length; i++) {\n            nodes[i].style.zIndex = 0;\n        }\n        // Set z-index of rootDomNode to 1\n        rootDomNode.style.zIndex = 1;\n    }\n    \n    // Add mousedown event listener to rootDomNode\n    rootDomNode.addEventListener('mousedown', bringOthersToFront);\n}\n\n\n})()\n</script>",
            "<script id='gui_titleBar'>\n(() => {\nif (!window.os) window.os = {};\nif (!window.os.gui) window.os.gui = {};\n\nwindow.os.gui.titleBar = function(parentElement, title, close) {\n    // Create root DOM element with class .titleBar\n    var root = document.createElement('div');\n    root.className = 'titleBar';\n    \n    // Add span containing title to root DOM element\n    var span = document.createElement('span');\n    span.textContent = title;\n    root.appendChild(span);\n    \n    // Add button with text '\u274c' and class 'close' to root DOM element\n    var button = document.createElement('button');\n    button.textContent = '\u274c';\n    button.className = 'close';\n    button.addEventListener('click', close); // Add event listener for close callback\n    root.appendChild(button);\n    \n    // Append root DOM element to parentElement\n    parentElement.appendChild(root);\n};\n\n\n})()\n</script>",
            "<script id='gui_window'>\n(() => {\n// Ensure window.os and window.os.gui exist\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Define createWindow function\nwindow.os.gui.createWindow = function (emoji = '\ud83d\udda5\ufe0f', title = 'Window', contentElement = null, width = 400, height = 300) {\n    // Create root DOM element with class .window and add it to document body in the middle of the document\n    const root = document.createElement('div');\n    root.className = 'window';\n    root.style.width = width + 'px';\n    root.style.height = height + 'px';\n    document.body.appendChild(root);\n    \n    // Call bringToFront on root element\n    window.os.gui.bringToFront(root);\n    \n    // Add placeholder divs to root DOM element\n    const titlePlaceholder = document.createElement('div');\n    titlePlaceholder.className = 'titlePlaceholder';\n    root.appendChild(titlePlaceholder);\n    \n    const toolbarPlaceholder = document.createElement('div');\n    toolbarPlaceholder.className = 'toolbarPlaceholder';\n    root.appendChild(toolbarPlaceholder);\n    \n    const contentPlaceholder = document.createElement('div');\n    contentPlaceholder.className = 'contentPlaceholder';\n    root.appendChild(contentPlaceholder);\n    \n    const statusPlaceholder = document.createElement('div');\n    statusPlaceholder.className = 'statusPlaceholder';\n    root.appendChild(statusPlaceholder);\n    \n    // Add resize handle to root DOM element\n    const resizeHandle = document.createElement('div');\n    resizeHandle.className = 'resizeHandle';\n    root.appendChild(resizeHandle);\n    \n    // Create and add title bar to titlePlaceholder\n    window.os.gui.titleBar(titlePlaceholder, emoji + ' ' + title, () => {\n        document.body.removeChild(root);\n    });\n    \n    // Make root element draggable by titlePlaceholder and resizable by resizeHandle\n    window.os.gui.makeDraggable(root, titlePlaceholder);\n    window.os.gui.makeResizable(root, resizeHandle);\n    \n    // Append content element to contentPlaceholder if it exists\n    if (contentElement) {\n        contentPlaceholder.appendChild(contentElement);\n    }\n    \n    return null;\n};\n\n\n})()\n</script>",
            "<script id='apps_app'>\n(() => {\nwindow.os = window.os || {};\n\nwindow.os.application = function(title, emoji, callback, width=400, height=400) {\n    // Create an internal initialize function that creates a new window with the title, emoji, width and height and add child the element returned by executing of the callback passed as parameter\n    const initialize = () => {\n        const contentElement = document.createElement('div');\n        contentElement.appendChild(callback()); // Assuming callback returns an element\n        window.os.gui.createWindow(emoji, title, contentElement, width, height);\n    };\n    \n    // Call addApp with the emoji, title and initialize function \n    window.os.desktop.addApp(emoji, title, initialize);\n};\n\n\n})()\n</script>"
        ]
    },
    "body": {
        "_children_": [
            "<div id='desktop_content'>\n</div>",
            "<script id='apps_hello-world'>\n(() => {\nfunction helloWorld() {\n    // Create a root dom element with class 'hw'\n    var root = document.createElement('div');\n    root.className = 'hw';\n    \n    // Create a new 'h1' element with the text 'Hello, World!' and append it to the root element\n    var h1 = document.createElement('h1');\n    h1.textContent = 'Hello, World\ud83d\udc4b';\n    root.appendChild(h1);\n    \n    // Return root dom element\n    return root;\n}\n\n// Create application with 'hello world' title, \ud83d\udc4b as emoji, helloWorld function and 300x200 size\nwindow.os.application('hello world', '\ud83d\udc4b', helloWorld, 300, 200);\n\n\n})()\n</script>"
        ]
    },
    "_children_": []
}