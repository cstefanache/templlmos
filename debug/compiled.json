{
    "head": {
        "_children_": [
            "<style id='osbase_general-styles'>\nbody {\n    background-color: rgb(21, 79, 114);\n    overflow: hidden;\n}\n\n</style>",
            "<script id='osbase_global-objects'>\n(() => {\nwindow.os = {};\n\n\n})()\n</script>",
            "<script id='osbase_about'>\n(() => {\n/**\n * Returns information about the operating system.\n * @return {string} Information about the operating system.\n */\nwindow.os.about = function() {\n    return \"TempLLMOS is an experimental WebOS controlled by a Large Language Model.\";\n};\n\n/**\n * Logs a message to the console.\n * @param {string} message - The message to be logged.\n */\nwindow.os.log = function(message) {\n    console.log(message);\n};\n\n\n})()\n</script>",
            "<script id='osbase_filesystem'>\n(() => {\n// Load the filesystem object from localStorage\nlet filesystem = JSON.parse(localStorage.getItem('filesystem')) || {};\n\n// Define window.os.fs\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.fs) {\n    window.os.fs = {};\n}\n\n/**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() {\n    localStorage.setItem('filesystem', JSON.stringify(filesystem));\n}\n\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            return undefined;\n        }\n        current = current[dir];\n    }\n    return typeof current === 'string' ? current : undefined;\n}\n\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path.slice(0, -1)) {\n        if (!current[dir]) {\n            current[dir] = {};\n        }\n        current = current[dir];\n    }\n    current[path[path.length - 1]] = content;\n    this.sync();\n}\n\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            return Object.keys(filesystem);\n        }\n        current = current[dir];\n    }\n    return Object.keys(current);\n}\n\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            current[dir] = {};\n        }\n        current = current[dir];\n    }\n    this.sync();\n}\n\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    let parent = filesystem;\n    for (let dir of path.slice(0, -1)) {\n        if (!current[dir]) {\n            return; // Path not found\n        }\n        parent = current;\n        current = current[dir];\n    }\n    delete parent[path[path.length - 1]];\n    this.sync();\n}\n\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            return false; // Path not found or not a file\n        }\n        current = current[dir];\n    }\n    return typeof current === 'string'; // Check if current is a string (file)\n}\n\n\n})()\n</script>",
            "<style id='desktop_content-style'>\n#desktop_content {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow-y: hidden;\n    padding: 10px;\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    align-content: flex-start;\n}\n\n</style>",
            "<style id='desktop_styles'>\n/* Style for .icon class */\n.icon {\n    width: 64px;\n    min-height: 64px;\n    text-align: center;\n    margin: 5px;\n    cursor: pointer;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n/* Style for .emoji class */\n.emoji {\n    display: block;\n    font-size: 30px;\n    inline-block;\n    position: relative;\n}\n\n/* Style for .title class */\n.title {\n    display: block;\n    font-size: 8px;\n    font-family: monospace;\n    color: black;\n    padding: 5px;\n    word-wrap: break-word;\n    border: 2px solid black;\n    border-radius: 5px;\n    background-color: white;\n}\n\n/* Style for .app-emoji class */\n.app-emoji {\n    position: absolute;\n    right: 12px;\n    top: 20px;\n}\n\n/* Style for checkbox */\ninput[type=\"checkbox\"] {\n    position: absolute;\n    left: 2px;\n    top: -6px;\n}\n\n</style>",
            "<script id='desktop_icon'>\n(() => {\n// Check if window.os exists, if not create it\nif (!window.os) {\n    window.os = {};\n}\n\n/**\n * Create an icon element with an emoji and a tooltip.\n * @param {HTMLElement} parent - The parent element to append this icon to.\n * @param {string} emoji - The emoji to display in this icon.\n * @param {string} title - The tooltip text to display when hovering over this icon.\n * @param {function} callback - The callback to call when this icon is clicked.\n */\nwindow.os.icon = function(parent, emoji, title, callback) {\n    // Create root DOM element with class .icon\n    var icon = document.createElement('div');\n    icon.classList.add('icon');\n    \n    // Create span with class .emoji and add it to icon\n    var emojiSpan = document.createElement('span');\n    emojiSpan.classList.add('emoji');\n    emojiSpan.textContent = emoji;\n    icon.appendChild(emojiSpan);\n    \n    // Create span with class .title and add it to icon\n    var titleSpan = document.createElement('span');\n    titleSpan.classList.add('title');\n    titleSpan.textContent = title;\n    icon.appendChild(titleSpan);\n    \n    // Add click event listener to icon\n    icon.addEventListener('click', callback);\n    \n    // Append icon to parent\n    parent.appendChild(icon);\n};\n\n\n})()\n</script>",
            "<script id='desktop_desktop-app'>\n(() => {\n/**\n * Adds an application to the desktop content.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n */\nwindow.os.addApp = function(emoji, title, callback) {\n    window.os.icon(document.querySelector('#desktop_content'), emoji, title, callback);\n};\n\n\n})()\n</script>",
            "<style id='output_output-styles'>\n.output-wrapper {\n    position: fixed;\n    top: 0;\n    right: 0;\n    width: 40%;\n    max-width: 500px;\n    height: 100vh; /* viewport height */\n}\n\n.output {\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* semi-transparent black */\n    color: white; /* white text */\n    white-space: pre-wrap; /* text wrap */\n    font-size: 12px;\n    padding: 10px; /* padding */\n    margin: 0; /* no margins */\n    overflow: auto; /* scroll if content overflows */\n}\n\n</style>",
            "<script id='gui_draggable'>\n(() => {\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n/**\n * Makes an element draggable by a given handle element.\n * @param {HTMLElement} root - The element to be made draggable.\n * @param {HTMLElement} dragHandleHTMLElement - The handle element to initiate the drag operation.\n */\nwindow.os.gui.makeDraggable = function(root, dragHandleHTMLElement) {\n    let isDragging = false;\n    let offsetX = 0;\n    let offsetY = 0;\n    \n    const handleMouseDown = (event) => {\n        isDragging = true;\n        offsetX = event.clientX - root.getBoundingClientRect().left;\n        offsetY = event.clientY - root.getBoundingClientRect().top;\n        \n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n    };\n    \n    const handleMouseMove = (event) => {\n        if (isDragging) {\n            const x = event.clientX - offsetX;\n            const y = event.clientY - offsetY;\n            \n            // Prevent the element from being dragged off the screen\n            const boundingRect = document.body.getBoundingClientRect();\n            const rootRect = root.getBoundingClientRect();\n            if (x < boundingRect.left || y < boundingRect.top || x + rootRect.width > boundingRect.right || y + rootRect.height > boundingRect.bottom) {\n                return;\n            }\n            \n            root.style.left = `${x}px`;\n            root.style.top = `${y}px`;\n        }\n    };\n    \n    const handleMouseUp = () => {\n        isDragging = false;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n    };\n    \n    dragHandleHTMLElement.addEventListener('mousedown', handleMouseDown);\n};\n\n/**\n* Makes an element resizable by a given handle element.\n* @param {HTMLElement} root - The element to be made resizable.\n* @param {HTMLElement} resizeHandleHTMLElement - The handle element to initiate the resize operation.\n*/\nwindow.os.gui.makeResizable = function(root, resizeHandleHTMLElement) {\n    let startWidth = root.offsetWidth;\n    let startHeight = root.offsetHeight;\n    let startX;\n    let startY;\n    \n    resizeHandleHTMLElement.addEventListener('mousedown', (e) => {\n        e.preventDefault();\n        startX = e.clientX;\n        startY = e.clientY;\n        \n        document.addEventListener('mousemove', resize);\n        document.addEventListener('mouseup', stopResize);\n    });\n    \n    function resize(e) {\n        let width = startWidth + (e.clientX - startX);\n        let height = startHeight + (e.clientY - startY);\n        \n        // Ensure width and height are not negative\n        width = Math.max(width, 0);\n        height = Math.max(height, 0);\n        \n        // Update width and height of root element\n        root.style.width = width + 'px';\n        root.style.height = height + 'px';\n    }\n    \n    function stopResize() {\n        // Update starting width and height on mouseup\n        startWidth = root.offsetWidth;\n        startHeight = root.offsetHeight;\n        \n        // Remove event listeners\n        document.removeEventListener('mousemove', resize);\n        document.removeEventListener('mouseup', stopResize);\n    }\n};\n\n/**\n* Brings the specified DOM node to the front of its siblings.\n* @param {HTMLElement} rootDOMNode - The DOM node to bring to front.\n*/\nwindow.os.gui.bringToFront = function(rootDOMNode) {\n    // Internal function to bring to front\n    var bringToFront = function() {\n        // Get all elements with same class as rootDOMNode\n        var siblings = document.getElementsByClassName(rootDOMNode.className);\n        // Iterate through them and set z-index to 0\n        for (var i = 0; i < siblings.length; i++) {\n            siblings[i].style.zIndex = 0;\n        }\n        // Set z-index of rootDOMNode to 1\n        rootDOMNode.style.zIndex = 1;\n    };\n    \n    // Call internal function on mousedown event of rootDOMNode\n    rootDOMNode.addEventListener('mousedown', bringToFront);\n    \n    // Call internal function immediately to bring to front on load\n    bringToFront();\n};\n\n\n})()\n</script>",
            "<script id='gui_titleBar'>\n(() => {\n// Assuming window.os is an existing object with gui as its property\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n/**\n * Creates a title bar with a title and a close button.\n * @param {HTMLElement} parentElement - The DOM element to append this title bar to.\n * @param {string} title - The title to display in the title bar.\n * @param {function} close - The callback to call when the close button is clicked.\n */\nwindow.os.gui.titleBar = function(parentElement, title, close) {\n    // Create root element\n    var root = document.createElement('div');\n    root.classList.add('titleBar');\n    \n    // Create title span\n    var titleSpan = document.createElement('span');\n    titleSpan.textContent = title;\n    root.appendChild(titleSpan);\n    \n    // Create close button\n    var closeButton = document.createElement('button');\n    closeButton.textContent = '\u274c';\n    closeButton.classList.add('close');\n    closeButton.addEventListener('click', close); // Add click event listener to close button\n    root.appendChild(closeButton);\n    \n    // Append root to parent element\n    parentElement.appendChild(root);\n};\n\n\n})()\n</script>",
            "<script id='gui_toolbar'>\n(() => {\n/**\n * Create a toolbar with a button inside it.\n * @param {HTMLElement} win - The window element to add toolbar to.\n * @returns {function(string, function): void} - The addButton function.\n */\nwindow.os.gui.createToolbar = function(win) {\n    // Create a root DOM element with class .toolbar\n    var toolbar = document.createElement('div');\n    toolbar.className = 'toolbar';\n    \n    // Append the root DOM element to .toolbarPlaceholder from win HTML element\n    win.querySelector('.toolbarPlaceholder').appendChild(toolbar);\n    \n    /**\n     * Add a button to the toolbar with a specific text and callback when clicked.\n     * @param {string} text - The text to display on the button.\n     * @param {function} callback - The callback to call when the button is clicked.\n     */\n    var addButton = function(text, callback) {\n        // Create a button element with text parameter\n        var button = document.createElement('button');\n        button.textContent = text;\n        \n        // Add event listener to call callback when button is clicked\n        button.addEventListener('click', callback);\n        \n        // Append button to toolbar root element\n        toolbar.appendChild(button);\n    };\n    \n    // Return addButton function\n    return addButton;\n};\n\n\n})()\n</script>",
            "<script id='gui_window'>\n(() => {\n/**\n* Create a new window with given emoji, title, width and height.\n* @param {string} emoji - The emoji to display in the window's title bar.\n* @param {string} title - The title to display in the window's title bar.\n* @param {number} [width=400] - The width of the window in pixels.\n* @param {number} [height=300] - The height of the window in pixels.\n* @return {HTMLElement} The root DOM element of the newly created window.\n*/\nwindow.os.gui.createWindow = function(emoji, title, width = 400, height = 300) {\n    // Create root DOM element\n    const root = document.createElement('div');\n    root.className = 'window';\n    root.style.width = `${width}px`;\n    root.style.height = `${height}px`;\n    document.body.appendChild(root);\n    \n    // Bring to front\n    window.os.gui.bringToFront(root);\n    \n    // Create placeholders for title bar, toolbar, content, status\n    ['titlePlaceholder', 'toolbarPlaceholder', 'contentPlaceholder', 'statusPlaceholder'].forEach(className => {\n        const placeholder = document.createElement('div');\n        placeholder.className = className;\n        root.appendChild(placeholder);\n    });\n    \n    // Create resize handle\n    const resizeHandle = document.createElement('div');\n    resizeHandle.className = 'resizeHandle';\n    root.appendChild(resizeHandle);\n    \n    // Create title bar\n    window.os.gui.titleBar(root.querySelector('.titlePlaceholder'), emoji + ' ' + title, () => document.body.removeChild(root));\n    \n    // Make window draggable by title bar\n    window.os.gui.makeDraggable(root, root.querySelector('.titlePlaceholder'));\n    \n    // Make window resizable by resize handle\n    window.os.gui.makeResizable(root, resizeHandle);\n    \n    // Position window in center of document\n    root.style.position = 'absolute';\n    root.style.left = `${window.innerWidth / 2 - width / 2}px`;\n    root.style.top = `${window.innerHeight / 2 - height / 2}px`;\n    \n    return root;\n};\n\n/**\n* Attach content to an existing window.\n* @param {HTMLElement} windowElement - The window to attach content to.\n* @param {HTMLElement} contentElement - The content to attach to the window.\n*/\nwindow.os.gui.attachToWindow = function(windowElement, contentElement) {\n    // Find the .contentPlaceholder element in the windowElement\n    var contentPlaceholder = windowElement.querySelector('.contentPlaceholder');\n    \n    // Append the contentElement to the .contentPlaceholder element\n    contentPlaceholder.appendChild(contentElement);\n};\n\n\n})()\n</script>",
            "<style id='gui_gui-styles'>\n/* Define styles for .titleBar */\n.titleBar {\n    background-color: orange;\n    border-bottom: 1px solid black;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: monospace;\n    font-size: small;\n    padding: 0px 5px;\n    border-bottom: 2px solid black;\n    user-select: none; /* Prevent text selection */\n}\n\n/* Define styles for buttons */\n.titleBar button {\n    border: none;\n    background: none;\n    cursor: pointer;\n    font-size: 6px;\n    padding: 5px;\n}\n\n.window {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    border: 2px solid black;\n    border-radius: 8px;\n    box-shadow: 4px 4px 0 0 rgba(0,0,0,0.5);\n    overflow: hidden;\n    background-color: white;\n    -webkit-user-select: none; /* Safari */\n    -ms-user-select: none; /* IE 10+ */\n    user-select: none; /* Standard syntax */\n}\n\n.contentPlaceholder {\n    padding: 5px;\n    flex-grow: 1;\n    overflow: auto;\n}\n\n.statusPlaceholder {\n    border-top: 1px solid black;\n    font-family: monospace;\n    font-size: small;\n}\n\n.resizeHandle {\n    position: absolute;\n    width: 0px;\n    height: 0px;\n    bottom: 0;\n    right: 0;\n    cursor: se-resize;\n    border-width: 0 0 10px 10px;\n    border-style: solid;\n    border-color: transparent transparent #ff7200 transparent;\n    transform: rotate(0deg);\n}\n\n.toolbar {\n    padding: 2px;\n    background-color: antiquewhite;\n    margin-bottom: 2px;\n    border-bottom: 1px solid black;\n    display: flex;\n    justify-content: flex-start;\n}\n\nbutton {\n    border: none;\n    cursor: pointer;\n    background-color: transparent;\n}\n\n</style>",
            "<script id='registry_extension'>\n(() => {\n// Assuming window.os is already defined\nif (!window.os) {\n    window.os = {};\n}\n\n// Assuming window.os.registry is already defined\nif (!window.os.registry) {\n    window.os.registry = {};\n}\n\n/**\n * Register an extension with its corresponding emoji and callback.\n * @param {string} extension - The name of the extension to register.\n * @param {string} emoji - The corresponding emoji for this extension.\n * @param {function} callback - The callback to be executed when this extension is used.\n */\nwindow.os.registerExtension = function(extension, emoji, callback) {\n    window.os.registry[extension] = {emoji: emoji, callback: callback};\n};\n\n\n})()\n</script>",
            "<script id='registry_app-icon'>\n(() => {\n/**\n * Create an icon element for a file or directory at given path\n * @param {string} path - The path to the file or directory\n * @param {function} callback - The callback to call when the icon is clicked\n * @returns {HTMLElement} - The icon element\n */\nwindow.os.getOSIcon = function(path, callback) {\n    const isFile = window.os.fs.isFile(path);\n    const rootElement = document.createElement('div');\n    rootElement.classList.add('icon');\n    \n    const emojiElement = document.createElement('span');\n    emojiElement.classList.add('emoji');\n    emojiElement.textContent = isFile ? '\ud83d\udcc4' : '\ud83d\udcc1';\n    rootElement.appendChild(emojiElement);\n    \n    const titleElement = document.createElement('div');\n    titleElement.classList.add('title');\n    titleElement.textContent = path.split('/').pop(); // Assuming path is a Unix-like path\n    rootElement.appendChild(titleElement);\n    \n    const ext = path.split('.').pop(); // Assuming path has an extension\n    const extData = window.os.registry[ext];\n    if (extData) {\n        const appEmojiElement = document.createElement('span');\n        appEmojiElement.classList.add('app-emoji');\n        appEmojiElement.textContent = extData.emoji;\n        rootElement.appendChild(appEmojiElement);\n        \n        let currentCallback = path => extData.callback(path); // Closure for path\n        rootElement.addEventListener('click', () => currentCallback(path));\n    } else {\n        let currentCallback = path => callback(path); // Closure for path\n        rootElement.addEventListener('click', () => currentCallback(path));\n    }\n    \n    return rootElement;\n};\n\n\n})()\n</script>",
            "<script id='registry_registry'>\n(() => {\n/**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions to register for this application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) {\n    const execute = (...params) => {\n        const windowInstance = window.os.gui.createWindow(emoji, title, width, height);\n        window.os.gui.attachToWindow(windowInstance, callback(windowInstance, ...params));\n    };\n    \n    if (extensions) {\n        extensions.forEach(extension => {\n            // Assuming `registerExtension` is also available on `window.os` object\n            // and it takes an extension, emoji and callback as parameters\n            window.os.registerExtension(extension, emoji, execute);\n        });\n    }\n    \n    // Add application to desktop\n    window.os.addApp(emoji, title, () => execute());\n};\n\n\n})()\n</script>",
            "<style id='apps_styles'>\n.browser {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n</style>",
            "<script id='development_run'>\n(() => {\n/**\n * Run an application in a new window.\n * @param {function} callback - The callback to run in the new window.\n * @param {number} [width=500] - The width of the window in pixels.\n * @param {number} [height=400] - The height of the window in pixels.\n */\nwindow.os.runApp = function(callback, width = 500, height = 400) {\n    // Create a new window instance\n    const appWindow = window.os.gui.createWindow('\ud83d\udd25', 'Development', width, height);\n    \n    // Attach content to the window\n    const contentElement = callback(appWindow);\n    window.os.gui.attachToWindow(appWindow, contentElement);\n};\n\n\n})()\n</script>",
            "<style id='games_styles'>\n.gmroot {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    margin: 2px;\n    padding: 4px;\n    background-color: white;\n}\n\n.row {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n}\n\n.cell {\n    width: 22px;\n    height: 22px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid darkgray;\n    border-radius: 2px;\n    margin: 1px;\n    font-family: monospace;\n}\n\n.cell.visited {\n    background-color: white;\n    border: 1px solid white;\n}\n\n.score {\n    margin: 4px;\n    font-family: monospace;\n    font-weight: bold;\n    text-align: center;\n    background-color: white;\n    border: 2px solid white;\n    border-radius: 2px;\n}\n\n</style>"
        ]
    },
    "body": {
        "_children_": [
            "<script id='osbase_tests'>\n(() => {\n/**\n * Executes log with about message.\n */\nfunction executeLogWithAbout() {\n    window.os.log(window.os.about());\n}\n\n\n})()\n</script>",
            "<script id='osbase_fs-tests'>\n(() => {\n// Create a new directory in the root directory called `fstest`\nwindow.os.fs.mkdir('fstest');\n\n// Create a new file in the `fstest` directory called `test.txt` with the content `hello world`\nwindow.os.fs.write('fstest/test.txt', 'hello world');\n\n// List the entries in the `fstest` directory and log it to console\nconsole.log(window.os.fs.ls('fstest'));\n\n// Read the content of the `fstest/test.txt` file and log it to console\nconsole.log(window.os.fs.getFileContentFromPath('fstest/test.txt'));\n\n// Remove the `fstest` directory \nwindow.os.fs.rm('fstest');\n\n\n})()\n</script>",
            "<div id='desktop_content'>\n</div>",
            "<script id='output_output-window'>\n(() => {\n// Create a root container div element with class 'output-wrapper' and id 'output-wrapper'\nlet rootContainer = document.createElement('div');\nrootContainer.className = 'output-wrapper';\nrootContainer.id = 'output-wrapper';\ndocument.body.appendChild(rootContainer);\n\n// Create and append to root container a pre element with class 'output' and id 'output'\nlet output = document.createElement('pre');\noutput.className = 'output';\noutput.id = 'output';\nrootContainer.appendChild(output);\n\n// Store empty string in a variable 'content'\nlet content = '';\n\n// Create an internal function fetches the content from '/output' if the data differs from the content\nasync function fetchContent() {\n    let response = await fetch('/output');\n    let newContent = await response.text();\n    if (newContent !== content) {\n        content = newContent;\n        output.innerHTML = content; // Set innerHTML of the pre element to the fetched content\n        output.scrollTop = output.scrollHeight; // Scroll output to bottom\n    }\n}\n\n// Call /ping and if the response is 200 then set an interval to call the internal function every 1000ms\nfetch('/ping')\n    .then(response => {\n        if (response.status === 200) {\n            setInterval(fetchContent, 1000);\n        }\n    });\n\n\n})()\n</script>",
            "<script id='registry_hello-world'>\n(() => {\n/**\n * Create a root element div having an h1 child element with 'Hello World' text\n * If path is defined append a pre element containing the content of reading the file at the path\n * @param {HTMLElement} parent - The parent element to append the created elements to\n * @param {string} [path] - The path to a file to read its content from\n * @returns {HTMLElement} - The root element containing h1 and pre elements\n */\nfunction helloWorld(parent, path) {\n    // Create root div element\n    const root = document.createElement('div');\n    \n    // Create h1 element with 'Hello World' text\n    const h1 = document.createElement('h1');\n    h1.textContent = 'Hello World';\n    root.appendChild(h1);\n    \n    // If path is provided, create pre element with file content\n    if (path) {\n        const pre = document.createElement('pre');\n        pre.textContent = window.os.fs.getFileContentFromPath(path);\n        root.appendChild(pre);\n    }\n    \n    // Append root element to parent\n    parent.appendChild(root);\n    \n    return root;\n}\n\n// Register application with 'hello world' title, \ud83d\udc4b as emoji, helloWorld function and 300x200 size\nwindow.os.registerApplication('hello world', '\ud83d\udc4b', helloWorld, 300, 200);\n\n\n})()\n</script>",
            "<script id='apps_simple-run'>\n(() => {\n/**\n * Create a chat application with a root DOM element and input element.\n * \n * @param {HTMLElement} parent - The parent element where the chat application will be appended.\n */\nfunction application(parent) {\n    // Create a root DOM element with class 'chat'\n    const chat = document.createElement('div');\n    chat.className = 'chat';\n    parent.appendChild(chat);\n\n    // Create an input element with 100% width\n    const input = document.createElement('input');\n    input.style.width = '100%';\n    chat.appendChild(input);\n\n    // Variable to save input value\n    let instruction = '';\n\n    // Event listener for keyup event on input element\n    input.addEventListener('keyup', async (event) => {\n        // If enter key is pressed\n        if (event.key === 'Enter') {\n            // Save input value to instruction variable and clear input\n            instruction = event.target.value;\n            event.target.value = '';\n            \n            // POST instruction and full as false to 'http://localhost:8080'\n            const response = await fetch('http://localhost:8080', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ instruction: instruction, full: false })\n            });\n            \n            // Get response text content\n            const content = await response.text();\n            \n            // Create a script tag with id 'run-script' and add response content to it\n            const script = document.createElement('script');\n            script.id = 'run-script';\n            script.textContent = content;\n            document.body.appendChild(script);\n        }\n    });\n    \n    // Return root DOM element\n    return chat;\n}\n\nwindow.os.registerApplication('Run', '\u25b6\ufe0f', application, 400, 70);\n\n\n})()\n</script>",
            "<script id='apps_editor'>\n(() => {\nfunction editor(win, path) {\n    // Create a div element with class 'editor'\n    const editorDiv = document.createElement('div');\n    editorDiv.className = 'editor';\n    \n    // Create a textarea element with 100% width and height\n    const textarea = document.createElement('textarea');\n    textarea.style.width = '100%';\n    textarea.style.height = '100%';\n    \n    // Add textarea to editorDiv\n    editorDiv.appendChild(textarea);\n    \n    // Create toolbar on win parameter\n    const addButton = window.os.gui.createToolbar(win);\n    \n    // If path is not empty, read file content and set it to textarea\n    if (path) {\n        const content = window.os.fs.getFileContentFromPath(path);\n        if (content) textarea.value = content;\n    }\n    \n    // Add button on toolbar with '\ud83d\udcbe' text that saves textarea content to path if path is defined, prompt for path otherwise\n    addButton('\ud83d\udcbe', () => {\n        const newPath = path || window.prompt('Enter a path');\n        if (newPath) window.os.fs.write(newPath, textarea.value);\n    });\n    \n    // Return editorDiv\n    return editorDiv;\n}\n\n// Register application with 'Editor' title, \u270d\ufe0f as emoji, editor function reference and 400x450 size for [txt,doc] extensions \nwindow.os.registerApplication('Editor', '\u270d\ufe0f', editor, 400, 450, ['txt', 'doc']);\n\n\n})()\n</script>",
            "<script id='apps_browser'>\n(() => {\nfunction browser(win, path='') {\n    // Create a container dom element with class `browser`\n    const container = document.createElement('div');\n    container.classList.add('browser');\n    \n    // Set browserPath to path or `''` if path is undefined or not string\n    let browserPath = (typeof path === 'string') ? path : '';\n    \n    // Generate internal load function that takes path parameter\n    const load = (path) => {\n        // Set browserPath to path\n        browserPath = path;\n        \n        // Removes all children of the container element\n        while (container.firstChild) {\n            container.removeChild(container.firstChild);\n        }\n        \n        // If path is not empty, create a new `div` with class icon, inner element `.emoji` with internal span element having content '\ud83d\udd19'  and class `emoji` and on click call load with `path.split('/').slice(0, -1).join('/')`\n        if (path !== '') {\n            const backButtonDiv = document.createElement('div');\n            backButtonDiv.classList.add('icon');\n            const backButtonSpan = document.createElement('span');\n            backButtonSpan.classList.add('emoji');\n            backButtonSpan.textContent = '\ud83d\udd19';\n            backButtonSpan.addEventListener('click', () => load(path.split('/').slice(0, -1).join('/')));\n            backButtonDiv.appendChild(backButtonSpan);\n            container.appendChild(backButtonDiv);\n        }\n        \n        // ls all files in the path and for each item: call `getOsIcon` with path+'/'+item and load function as callback\n        window.os.fs.ls(path).forEach(item => {\n            const iconElement = window.os.getOSIcon(path+'/'+item, () => load(path+'/'+item));\n            const checkboxElement = document.createElement('input');\n            checkboxElement.type = 'checkbox';\n            checkboxElement.value = path+'/'+item;\n            checkboxElement.addEventListener('click', (event) => event.stopPropagation()); // prevent event bubbling\n            iconElement.appendChild(checkboxElement);\n            container.appendChild(iconElement);\n        });\n    };\n    \n    // Execute load on browserPath variable\n    load(browserPath);\n    \n    // Create toolbar\n    const toolbar = window.os.gui.createToolbar(win);\n    \n    // Call `addButton` on the toolbar with `\ud83d\udcc1` text and prompt for a name and call mkdir on current browserPath and provided name\n    toolbar('\ud83d\udcc1', () => {\n        const name = prompt('Enter directory name');\n        if (name) window.os.fs.mkdir(browserPath + '/' + name);\n        load(browserPath);\n    });\n    \n    // Call `addButton` on the toolbar with `\ud83d\udcc4` text and prompt for a name and call write on current browserPath and provided name and '' as content\n    toolbar('\ud83d\udcc4', () => {\n        const name = prompt('Enter file name');\n        if (name) window.os.fs.write(browserPath + '/' + name, '');\n        load(browserPath);\n    });\n    \n    // Call `addButton` on the toolbar with `\ud83d\uddd1\ufe0f` text and list all the selected checkbox values, removes them and calls load on the current path\n    toolbar('\ud83d\uddd1\ufe0f', () => {\n        const checkboxes = container.querySelectorAll('input[type=checkbox]:checked');\n        checkboxes.forEach(checkbox => {\n            window.os.fs.rm(checkbox.value);\n            checkbox.parentNode.removeChild(checkbox); // remove checkbox from its parent node\n        });\n        load(browserPath);\n    });\n    \n    return container;\n}\n\nwindow.os.registerApplication('Browser', '\ud83d\udcc2', browser, 450, 400);\n\n\n})()\n</script>",
            "<script id='development_ide'>\n(() => {\n/**\n * Compile a source code string into a runnable script.\n * @param {string} source - The source code string to compile.\n */\nfunction compile(source) {\n    // Remove existing script tag with id 'run-script' if exists\n    var existingScriptTag = document.getElementById('run-script');\n    if (existingScriptTag) {\n        existingScriptTag.parentNode.removeChild(existingScriptTag);\n    }\n    \n    // Fetch POST request with source code as JSON data\n    fetch('http://localhost:8080', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({instruction: source})\n    })\n    .then(response => response.text()) // Get response text content\n    .then(data => {\n        // Create a new script tag with id 'run-script' and add response text content to it\n        var newScriptTag = document.createElement('script');\n        newScriptTag.id = 'run-script';\n        newScriptTag.textContent = data;\n        document.body.appendChild(newScriptTag);\n    })\n    .catch(error => console.error('Error:', error)); // Handle any errors that occurred during fetch request\n}\n\nfunction ide(win, path) {\n    // Create root element\n    const ideRoot = document.createElement('div');\n    ideRoot.className = 'ide';\n    \n    // Create textarea element\n    const textarea = document.createElement('textarea');\n    textarea.style.width = '100%';\n    textarea.style.height = '500px';\n    \n    // If path is not empty, read file content and set it to textarea\n    if (path) {\n        const content = window.os.fs.getFileContentFromPath(path);\n        if (content) textarea.value = content;\n    }\n    \n    // Create toolbar on win\n    const addButton = window.os.gui.createToolbar(win);\n    \n    // Add buttons on toolbar\n    addButton('\u25b6\ufe0f', () => compile(textarea.value)); // Execute compile on click\n    addButton('\ud83d\udcbe', () => { // Save on click\n        if (path) {\n            window.os.fs.write(path, textarea.value);\n        } else {\n            path = prompt('Please enter a path');\n            if (path) window.os.fs.write(path, textarea.value);\n        }\n    });\n    \n    // Append textarea to root element\n    ideRoot.appendChild(textarea);\n    \n    // Return root element\n    return ideRoot;\n}\n\n// Register application with 'IDE' title, \ud83e\udde0 as emoji, ide function reference and 800x600 size\nwindow.os.registerApplication('IDE', '\ud83e\udde0', ide, 800, 600, ['script']);\n\n\n})()\n</script>",
            "<script id='games_minesweper'>\n(() => {\nfunction minesweeper() {\n    // Create root element\n    const root = document.createElement('div');\n    root.className = 'gmroot';\n    \n    // Create matrix of size 8x8 with values 0\n    const matrix = Array(8).fill().map(() => Array(8).fill(0));\n    \n    // Pick 10 random cells and set their value to -40 and increase the number value of the neighbouring cells\n    let mines = [];\n    for (let i = 0; i < 10; i++) {\n        let x = Math.floor(Math.random() * 8);\n        let y = Math.floor(Math.random() * 8);\n        mines.push({x, y});\n        matrix[x][y] = -40;\n        for (let dx = -1; dx <= 1; dx++) {\n            for (let dy = -1; dy <= 1; dy++) {\n                if (dx === 0 && dy === 0) continue;\n                let nx = x + dx;\n                let ny = y + dy;\n                if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) matrix[nx][ny]++;\n            }\n        }\n    }\n    \n    // Set score to 64\n    let score = 64;\n    \n    // Add score div\n    const scoreDiv = document.createElement('div');\n    scoreDiv.className = 'score';\n    scoreDiv.textContent = `Discovered: ${score}`;\n    root.appendChild(scoreDiv);\n    \n    // Add matrix rows\n    for (let i = 0; i < 8; i++) {\n        const rowDiv = document.createElement('div');\n        rowDiv.className = 'row';\n        for (let j = 0; j < 8; j++) {\n            const cellDiv = document.createElement('div');\n            cellDiv.className = 'cell';\n            cellDiv.textContent = ' ';\n            cellDiv.dataset.x = i;\n            cellDiv.dataset.y = j;\n            cellDiv.addEventListener('click', () => reveal(i, j));\n            rowDiv.appendChild(cellDiv);\n        }\n        root.appendChild(rowDiv);\n    }\n    \n    // Define reveal function\n    const reveal = (x, y) => {\n        let cellDiv = document.querySelector(`div[data-x=\"${x}\"][data-y=\"${y}\"]`);\n        if (cellDiv.classList.contains('visited')) return;\n        let value = matrix[x][y];\n        cellDiv.textContent = value < 0 ? '\ud83d\udca3' : value;\n        cellDiv.classList.add('visited');\n        if (value < 0) {\n            alert('Game Over');\n            return;\n        } else if (value === 0) {\n            for (let dx = -1; dx <= 1; dx++) {\n                for (let dy = -1; dy <= 1; dy++) {\n                    if (dx === 0 && dy === 0) continue;\n                    let nx = x + dx;\n                    let ny = y + dy;\n                    if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) reveal(nx, ny);\n                }\n            }\n        }\n        score--;\n        scoreDiv.textContent = `Discovered: ${score}`;\n    };\n    \n    return root;\n};\n\nwindow.os.registerApplication('Minesweeper', '\ud83d\udca3', minesweeper, 300, 300);\n\n\n})()\n</script>",
            "<script>window.os.fs.write('/sources/os/general-styles.txt', 'Package: general-styles\\ncss to apply a rgb(21, 79, 114) background color to the body and overflow hidden')\nwindow.os.fs.write('/sources/os/global-objects.txt', 'Package: global-objects\\nCreate a new empty object `os` on the window global object')\nwindow.os.fs.write('/sources/os/about.txt', 'Package: about\\n- Define the `window.os.about` function that returns \"TempLLMOS is an experimental WebOS controlled by a Large Language Model.\\n- Define the `window.os.log` that takes a single parameter and calls console.log function')\nwindow.os.fs.write('/sources/os/tests.txt', 'Package: tests\\nexecute log with the about message')\nwindow.os.fs.write('/sources/filesystem/filesystem.txt', 'Package: filesystem\\nLoad the `filesystem` object from the local storage as json\\nDefine the `window.os.fs` object and define the following functions on it (remove leading and trailing `/` from the path):\\n- `window.os.fs.sync` function that save the `filesystem` object to the local storage.\\n- `window.os.fs.getFileContentFromPath` function that returns the content of the entry in the `filesystem` object at the given path. path should be split by `/` and the method should traverse the `filesystem` object and return the value at path (allow undefined or empty string). if the path starts with `/` remove the leading `/`\\n- `window.os.fs.write` function that writes the content to an entry in the `filesystem` object at the given path and file name. in the end execute the `sync` method.\\n- `window.os.fs.ls` function that returns a list of entries in the `filesystem` object at the given path. if path is empty or not found, return the root entries.\\n- `window.os.fs.mkdir` function that creates a new directory in the `filesystem` object at the given path and directory name. in the end execute the `sync` method.\\n- `window.os.fs.rm` function that removes the object at the given path and file name. in the end execute the `sync` method.\\n- `window.os.fs.isFile` function that returns true the entry at the given path is a string.')\nwindow.os.fs.write('/sources/filesystem/fs-tests.txt', 'Package: fs-tests\\ncreate a new directory in the root directory called `fstest`\\ncreate a new file in the `fstest` directory called `test.txt` with the content `hello world`\\nlist the entries in the `fstest` directory and log it to console\\nread the content of the `fstest/test.txt` file and log it to console\\nremove the `fstest` directory')\nwindow.os.fs.write('/sources/desktop/content-style.txt', 'Package: content-style\\ncss style the `#desktop_content` id to match the following rules:\\nabsolute position, fixed size, 100% width, 100% height, overflow-y hidden, padding of 10px, display flex, flex-wrap wrap, flex-direction column, align content: flex start')\nwindow.os.fs.write('/sources/desktop/content.txt', 'Package: content')\nwindow.os.fs.write('/sources/desktop/styles.txt', 'Package: styles\\ncss style the `.icon` class to match the following rules:\\n1. 64px width, 64px min height, text-align center, margin of 5px, pointer cursor, position relative, display flex with a column flex direction\\n2. containing `.emoji` class should be a block, have a font-size of 30px and inline-block display, position relative\\n3. containing `.title` class should be a block, have a font-size of 8px, monospaced font, black text, padding of 5px, allow word-wrap to break word, black rounded border with white background\\n4. containing `.app-emoji` class should be absolutely positioned  12px on the right of the icon and 20px top\\n5. containing checkbox should be absolutely positioned  2px on the left of the icon and -6px top')\nwindow.os.fs.write('/sources/desktop/icon.txt', 'Package: icon\\nDefine a function called `icon` on `window.os` namespace that takes three parameters: parent, emoji, title and a callback:\\n- create a root DOM element with the class `.icon` and add it to `parent`\\n- add a span with the class `.emoji` and the emoji as its content\\n- add a span with the class `.title` and the title as its content\\n- when the icon is clicked, call the callback')\nwindow.os.fs.write('/sources/desktop/desktop-app.txt', 'Package: desktop-app\\nDefine a function called `addApp` on `window.os` namespace that takes four parameters: emoji, title and a callback:\\n- call `icon` with element at `#desktop_content`, emoji, title and the callback as parameters')\nwindow.os.fs.write('/sources/desktop/tests.txt', 'Package: tests\\ncall addApp 10 times for 10 different emojis and random titles and callback to log the title when clicked')\nwindow.os.fs.write('/sources/output/output-styles.txt', 'Package: output-styles\\nstyle .output-wrapper class having a fixed position having top and right to 0 and width 40%  and max-width of 500px and 100% height of the screen\\nstyle .output class having:\\n - 100% width and height\\n - a semi-transparent black background\\n - white text\\n - text wrap\\n - font size of 12px\\n - padding of 10px and 0 margins\\n - overflow auto')\nwindow.os.fs.write('/sources/output/output-window.txt', 'Package: output-window\\nuse browser fetch for API requests\\ncrate a root container div element having the class `output-wrapper` and id `output-wrapper`\\ncreate and append to root container a pre element having the class `output` and id `output`\\nstore empty string in a variable `content`\\ncreate an internal function fetches the content from \"/output\" if the data differes from the content: sets the innerHTML of the pre element to the fetched content and  scroll output to bottom\\ncalls /ping and if the response is 200 then set an interval to call the internal function every 1000ms')\nwindow.os.fs.write('/sources/gui/draggable.txt', 'Package: draggable\\nImplement `makeDraggable` on `window.os.gui` object that takes two parameters root and dragHandleHTMLElement with the following functionality:\\n - change absolute position of root by dragging the dragHandleHTMLElement\\nImplement `makeResizable` on `window.os.gui` object  that takes two parameters: root, resizeHandleHTMLElement with the following functionality:` \\n - resize (both width and height) the root HTMLElement element by dragging the resizeHandle DOM element.\\n - update starting width and height on mouseup\\nImplement `bringToFront` on `window.os.gui` object that taskes a single parameter: rootDOMNode  with the following functionality:\\n- creates an internal function that:\\n  * takes all elements with the same class as rootDomNode\\n  * iterate through them and sets the z-index to 0 and at the end sets the z-index of rootDOMNode to 1\\n- adds a mousedown event listener to rootDOMNode that calls the internal function\\n- call the internal function')\nwindow.os.fs.write('/sources/gui/gui-tests.txt', 'Package: gui-tests')\nwindow.os.fs.write('/sources/gui/titleBar.txt', 'Package: titleBar\\nDefine a function `titleBar` on the `window.os.gui` object that takes two parameter: parentElement (DOM element), title (string), and a callback `close` and has the following functionality:\\n- create a root DOM element with the class `.titleBar`\\n- add to the root DOM element a `span` containing the title parameter\\n- add to the root DOM element a `button` with the text `\u274c` and class `close` that calls the close callback\\n- append the root DOM element to parentElement')\nwindow.os.fs.write('/sources/gui/toolbar.txt', 'Package: toolbar\\ncreate function `createToolbar` on the `window.os.gui` object and generate jsdoc that takes one HTMLElement parameter `win`\\n- create a root DOM element with the class `.toolbar`\\n- append the root DOM element to the `.toolbarPlaceholder` from `win` HTML element\\n- create internal function `addButton` that takes two parameters: text and callback that adds a button to the root DOM element with the text parameter and call the callback when the button is clicked\\n- return internal addButton function')\nwindow.os.fs.write('/sources/gui/window.txt', 'Package: window\\nDefine a function `createWindow` on the `window.os.gui` object that takes four parameters: emoji, title, width and height that are defaulting to 400 and 300, respectively if not passed and have the following functionality:\\n- create a root DOM element with the class `.window`, set the width and height only, and add it to document body in the middle of the document\\n- call bringToFront on the root element\\n- add and empty div with class `titlePlaceholder` to the root DOM element\\n- add and empty div with class `toolbarPlaceholder` to the root DOM element\\n- add and empty div with class `contentPlaceholder` to the root DOM element\\n- add and empty div with class `statusPlaceholder` to the root DOM element\\n- add a resize handle to the root DOM element with class `resizeHandle`\\n- add titleBar to `.titlePlaceholder` having the text `emoji + title` and close callback removes root DOM element from the document body\\n- make root element draggable by the `.titlePlaceholder` element\\n- make root element resizable by the `resizeHandle` element\\n- set root DOM element left position document width divided by 2 minus width divided by 2\\n- set root DOM element top position document height divided by 2 minus height divided by 2\\n- return root DOM element\\nDefine a function called `attachToWindow` on the `window.os.gui` object that takes two parameters: windowElement and contentElement that takes the contentElement and appends it to the `.contentPlaceholder` of the windowElement')\nwindow.os.fs.write('/sources/gui/gui-styles.txt', 'Package: gui-styles\\ncss style for a .titleBar class to follow the following rules:\\n- orange background color, a black bottom border of 1px solid\\n- display of flex, a justify-content of space-between, an align-items of center\\n- monospaced black small text\\n- 5px horizontal padding, 0 vertical padding\\n- 2px black border bottom\\n- render buttons flat, no border, no background, a cursor of pointer, font size of 6, 5px padding\\n- do not allow text selection\\ncss style for a .window class to follow the following rules:\\n- white background color\\n- disable text selection\\n- a border of 2px solid black\\n- a border-radius of 8px\\n- hidden overflow\\n- a box-shadow of 4px 4px 0 0 rgba(0,0,0,0.5)\\n- absolute position\\n- display of flex and flex-direction of column\\n- inner .contentPlaceholder class should have a padding of 5px, flex-grow of 1 and overflow of auto\\n- inner .statusPlaceholder class should have  a border-top of 1px solid black and a monospaced small text\\ncss style for a  `.resizeHandle` class with the following rules:\\n- a width and height of 0px\\n- an absolute position\\n- a bottom and right of 0\\n- a cursor of se-resize\\n- border width: 0 0 10px 10px\\n- border style: solid\\n- `border-color: transparent transparent #ff7200 transparent`\\n- transform: rotate(0deg)\\ncss style for `.toolbar` class to follow the following rules:\\n- a padding of 2px\\n- a background of antique white\\n- a margin-bottom of 2px\\n- a border-bottom of 1px solid black\\n- a display of flex\\n- a justify-content of flex-start\\ninner buttons have:\\n - no border\\n - cursor pointer\\n - transparent background')\nwindow.os.fs.write('/sources/gui/tests.txt', 'Package: tests\\ncreate an element h1 with text `hello world!` and attach to a window with title `Hello World` and emoji `\ud83c\udf0d` having 300x200 size\\ncreate an element h1 with text `good bye world!` and attach to a window with title `Good Bye` and emoji `\ud83d\udc4b` having 300x200 size\\ncreate a h3 element with the text \"here\\ncreate a window with title `Toolbar` and emoji `\ud83d\udee0`\\ncreate a toolbar on window and add button with text `\ud83d\udc4b` that alerts `clicked` on callback\\nattach the h3 element to the window')\nwindow.os.fs.write('/sources/registry/extension.txt', 'Package: extension\\ncreate a new function `registerExtension` on `window.os` object that takes an extension, an emoji and a callback function with the following functionality:\\n - stores on the `window.os.registry` object the extension as key and emoji and callback as value')\nwindow.os.fs.write('/sources/registry/app-icon.txt', 'Package: app-icon\\ncreate jsdoc and function `getOSIcon` on `window.os` object having a path and callback parameter with the following functionality:\\n- create a root element `div` having the class `icon`\\n- save isFile to constant\\n- add a span element with class `emoji` and content \ud83d\udcc4 if isFile, \ud83d\udcc1 otherwise\\n- add a div element with class title containing the name from path\\n- extract extension from path and search if is registered in the `window.os.registry` object\\n- sets `currentCallback` to function parameter callback\\n- if extension is registered reads stores it in a `extData` property and:\\n   - adds span element with class `app-emoji` with the content of `extData.emoji` \\n   - sets the `currentCallback` to a function that calls `extData.callback` with the path\\n- exit condition and add click listener to the root element that calls `currentCallback` with the path\\n- return the root element')\nwindow.os.fs.write('/sources/registry/registry.txt', 'Package: registry\\ncreate a new function `registerApplication` on the `window.os` object and jsdoc that takes a title, emoji, callback, width=400 and height = 400 and a an array of extensions being undefined by default having the following functionality:\\n- define an internal `execute` that takes a spread params:\\n  - creates a new window instance with the title, emoji, width and height and saves it to a constant\\n  - attach to window the result of calling the callback with the window instance and spread params\\n- if extensions is defined, call `registerExtension` for each extension with extension, emoji and the execute function\\n- call addApp with the emoji, title and callback that calls the execute function with no parameters')\nwindow.os.fs.write('/sources/registry/hello-world.txt', 'Package: hello-world\\nCreate a `helloWorld` function that takes a parent and path parameter:\\n - creates and returns a root element `div` having an h1 child element with \"Hello World\" text\\n - if path is defined append a pre element containing the content of reading the file at the path\\n - returns the root element\\nafter definition, register application with \"hello world\" title, \ud83d\udc4b as emoji, `helloWorld` function and 300x200 size')\nwindow.os.fs.write('/sources/apps/styles.txt', 'Package: styles\\ncss to style .browser class to have display flex and flex-wrap wrap')\nwindow.os.fs.write('/sources/apps/simple-run.txt', 'Package: simple-run\\nCreate an `application` function that takes a parent parameter having the following functionality:\\n - create a root dom element with class `chat`\\n - create an input element with 100% width with keyup event listener that on enter key press:\\n   - save the input value to instruction variable and clear the input\\n   - POST the json having instruction and full as false to `http://localhost:8080`, on response add a script tag to the body with id `run-script` and add the response text content to the script tag\\n - return dom element\\ncall register application with \"Run\" title, \u25b6\ufe0f as emoji, already defined `application` function reference and 400x70 size')\nwindow.os.fs.write('/sources/apps/editor.txt', 'Package: editor\\nCreate a `editor` function that takes a window and path parameter:\\n - create a dom element with class `editor`\\n - add a textarea element to the previously created element 100% width and 100% height\\n - save reference to the textarea element\\n - create toolbar on the `window` parameter\\n - if path is not empty, read the file content and set it to the textarea\\n - add button on the toolbar with `\ud83d\udcbe` text save textarea content to the path if path is defined, prompt for the path otherwise\\n - return  dom element\\n\\ncall register application with \"Editor\" title, \u270d\ufe0f as emoji, `editor` function reference and 400x450 size for [txt,doc] extensions')\nwindow.os.fs.write('/sources/apps/browser.txt', 'Package: browser\\n1. Create a `browser` function that takes a win and path defaulting to \"\" parameter:\\n - create a container dom element with class `browser`\\n - set browserPath to path or `\"\"` if path is undefined or not string\\n - generate internal load function that takes path parameter:\\n   - set browserPath to path\\n   - removes all children of the container element\\n   - if path is not empty, create a new `div` with class icon, inner element `.emoji` with internal span element having content \"\ud83d\udd19\"  and class `emoji` and on click call load with `path.split(\"/\").slice(0, -1).join(\"/\")`\\n   - ls all files in the path and for each item:\\n      - call `getOsIcon` with path+\"/\"+item and load function as callback\\n      - add a checkbox with value path+\"/\"+item that prevent event bubbling\\n - execute load on browserPath variable\\n - create toolbar\\n - call `addButton` on the toolbar with `\ud83d\udcc1` text and prompt for a name and call mkdir on current browserPath and provided name\\n - call `addButton` on the toolbar with `\ud83d\udcc4` text and prompt for a name and call write on current browserPath and provided name and \"\" as content\\n - call `addButton` on the toolbar with `\ud83d\uddd1\ufe0f` text and list all the selected checkbox values, removes them and calls load on the current path\\n - return dom element\\nCall register application with \"Browser\" title, \ud83d\udcc2 as emoji, browser and 450x400 size')\nwindow.os.fs.write('/sources/apps/assistant-styles.txt', 'Package: assistant-styles\\nstyle .chat class to have display flex and flex-direction column\\nstyle .results class to have 100% width and 300px height, overflow-y scroll and margin 10px\\nstyle .results pre to have white-space pre-wrap')\nwindow.os.fs.write('/sources/apps/assistant.txt', 'Package: assistant\\nCreate a `assistant` function that takes a parent parameter:\\n - create a root dom element with class `chat`\\n - create a div element with 100% width and 300px height with class `results`\\n - create an input element with 100% width\\n - add a button with `\u27a1\ufe0f` text and on click:\\n   - save the input value to instruction variable and clear the input\\n   - POST the json having instruction and full as true to `http://localhost:8080`, on response add pre tag with the response text content to the results\\n return dom element\\ncall register application with \"Assistant\" title, \ud83d\udc68\ud83c\udffd\u200d\u2695\ufe0f as emoji, already defined `assistant` function reference and 400x400 size')\nwindow.os.fs.write('/sources/development/run.txt', 'Package: run\\ncreate a new function `window.os.runApp` object that takes a callback, width and height defaulting to 500 and 400, having the following functionality:\\n  - creates a new window instance with the `Development` title , \ud83d\udd25 emoji, width and height and saves it to a constant\\n  - attach to window the result of calling the callback with the window instance')\nwindow.os.fs.write('/sources/development/ide.txt', 'Package: ide\\nCreate `compile` function that takes a source parameter and:\\n - remove the script tag with id `run-script` if exists\\n - fetch post  to `http://localhost:8080` with a json having {instruction: source}, and on response create a script tag with id `run-script` and add the response text content to the script tag\\n - add end function comment\\n1. Create an `ide` function that takes a win and path parameter: \\n - create a root dom element with class `ide`\\n - create a textarea element with 100% width and 500px height\\n - if path is not empty, read the file content and set it to the textarea\\n - create toolbar on win\\n - add button on the toolbar with `\u25b6\ufe0f` text and on click execute `compile` function with textarea content\\n - add button on the toolbar with `\ud83d\udcbe` text and on click fs.write textarea content to the path if path is defined, prompt for the path otherwise\\n - return dom element\\n2. Call register application with \"IDE\" title, \ud83e\udde0 as emoji, already defined `ide` function reference and 800x600 size and register for [\"script\"] extensions')\nwindow.os.fs.write('/sources/games/styles.txt', 'Package: styles\\ncss style for a .gmroot class to follow the following rules:\\n- `.gmroot` is a flex container with column direction, centered content, margin of 2px, padding of 4px, background color of white\\n- `.row` is display flex with row direction, centered content\\n- `.cell` classes in `.gmroot` be the size of 22px by 22px, inline flex with content centered vertically and horizontally, 2px rounded dark grey border 1px width, margin of 1px, monospace font\\n- `.cell.visited` class to have a background color of white, 1px white border\\n- `.score` class to have a margin of 4px, monospace font, bold, centered text, background color of white, 2px rounded white border')\nwindow.os.fs.write('/sources/games/minesweper.txt', 'Package: minesweper\\nCreate a callback function `minesweeper` that:\\n - creates a root dom element with the class `gmroot`\\n - generate a matrix of 8x8 with values 0\\n - pick a random of 10 cells and set their value to -40 and increase the number value of the neighbouring cells\\n - set score to 64\\n - add a div with the class `score` and the content `Discovered: 64` to the root dom element\\n - iterate through the matrix and for each row add a div element with the class `.row` and for each item add a div with the class `cell`,  ` ` as content and add data-x and data-y as attributes. when the div is clicked call `reveal` function for the current x and y\\n - define internal function reveal that:\\n   - get div at x and y using data-x and data-y attributes\\n   - if the div is already revealed return\\n   - set the div content to the value of the cell and add class `.visited` to the div\\n   - if the div has am integer value smaller than 0 set the div content to `\ud83d\udca3` and call `alert` with the message `Game Over` and the title `\ud83d\udca3 minesweeper`\\n   - else decrease the score by 1 and update the score div content to `Discovered: ${score}`\\n   - if the div has an integer value of 0 call `reveal` for all the neighbouring cells\\n - return root element\\nCall register application with \"Minesweeper\" title, \ud83d\udca3 as emoji, `minesweeper` callback function reference and 300x300 size')</script>"
        ]
    },
    "_children_": []
}