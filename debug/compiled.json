{
    "head": {
        "_children_": [
            "<style id='osbase_general-styles'>\nbody {\n    background-color: #ffe4e1; /* This is a hexadecimal representation of a light pink color */\n}\n\n</style>",
            "<script id='osbase_global-objects'>\n(() => {\nif (typeof window !== 'undefined') {\n    window.os = {};\n} else {\n    console.error(\"This script is meant to run in a browser environment.\");\n}\n\n\n})()\n</script>",
            "<script id='osbase_filesystem'>\n(() => {\n// Check if 'window.os' exists, if not, create it\nif (typeof window.os === 'undefined') {\n    window.os = {};\n}\n\n// Check if 'window.os.fs' exists, if not, create it\nif (typeof window.os.fs === 'undefined') {\n    window.os.fs = {};\n}\n\n// Load filesystem from localStorage if it exists, otherwise initialize it as an empty object\nif (localStorage.getItem('filesystem')) {\n    window.os.fs.filesystem = JSON.parse(localStorage.getItem('filesystem'));\n} else {\n    window.os.fs.filesystem = {};\n}\n\n// Sync filesystem to localStorage\nwindow.os.fs.sync = function () {\n    localStorage.setItem('filesystem', JSON.stringify(this.filesystem));\n}\n\n// Read path in filesystem\nwindow.os.fs.readPath = function (path) {\n    if (path[0] === '/') {\n        path = path.substring(1);\n    }\n    var pathArray = path.split('/');\n    var current = this.filesystem;\n    for (var i = 0; i < pathArray.length; i++) {\n        if (current[pathArray[i]] === undefined) {\n            return undefined;\n        } else {\n            current = current[pathArray[i]];\n        }\n    }\n    return current;\n}\n\n// Write content to path in filesystem and sync it\nwindow.os.fs.write = function (path, content) {\n    if (path[0] === '/') {\n        path = path.substring(1);\n    }\n    var pathArray = path.split('/');\n    var current = this.filesystem;\n    for (var i = 0; i < pathArray.length - 1; i++) {\n        if (current[pathArray[i]] === undefined) {\n            current[pathArray[i]] = {};\n        }\n        current = current[pathArray[i]];\n    }\n    current[pathArray[pathArray.length - 1]] = content;\n    this.sync();\n}\n\n// List entries in path in filesystem\nwindow.os.fs.ls = function (path) {\n    if (path === '') {\n        return Object.keys(this.filesystem);\n    } else {\n        var content = this.readPath(path);\n        if (typeof content === 'object') {\n            return Object.keys(content);\n        } else {\n            return [];\n        }\n    }\n}\n\n// Create directory in filesystem and sync it\nwindow.os.fs.mkdir = function (path, dirName) {\n    this.write(path + '/' + dirName, {});\n}\n\n// Remove path in filesystem and sync it\nwindow.os.fs.rm = function (path) {\n    if (path[0] === '/') {\n        path = path.substring(1);\n    }\n    var pathArray = path.split('/');\n    var current = this.filesystem;\n    for (var i = 0; i < pathArray.length - 1; i++) {\n        if (current[pathArray[i]] === undefined) {\n            return;\n        } else {\n            current = current[pathArray[i]];\n        }\n    }\n    delete current[pathArray[pathArray.length - 1]];\n    this.sync();\n}\n\n// Check if path in filesystem is a file (i.e., it's a string)\nwindow.os.fs.isFile = function (path) {\n    var content = this.readPath(path);\n    return typeof content === 'string';\n}\n\n\n})()\n</script>",
            "<style id='desktop_content-style'>\n#desktop_content {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow-y: hidden;\n    padding: 10px;\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    align-content: flex-start;\n}\n\n</style>",
            "<style id='desktop_styles'>\n.icon {\n    width: 64px;\n    min-height: 64px;\n    text-align: center;\n    margin: 5px;\n    cursor: pointer;\n}\n\n.emoji {\n    display: inline-block;\n    font-size: 30px;\n    position: relative;\n}\n\n.title {\n    display: block;\n    font-size: 8px;\n    font-family: monospace;\n    color: black;\n    padding: 5px;\n    word-wrap: break-word;\n    border: 2px solid black;\n    border-radius: 8px;\n    background-color: white;\n}\n\n</style>",
            "<script id='desktop_icon'>\n(() => {\n// Check if window.os exists, if not create it\nif (!window.os) {\n    window.os = {};\n}\n\n// Function to add icon to parent\nwindow.os.icon = function(parent, emoji, title, callback) {\n    // Create root DOM element\n    var icon = document.createElement('div');\n    icon.classList.add('icon');\n    \n    // Create span for emoji\n    var emojiSpan = document.createElement('span');\n    emojiSpan.classList.add('emoji');\n    emojiSpan.textContent = emoji;\n    \n    // Create span for title\n    var titleSpan = document.createElement('span');\n    titleSpan.classList.add('title');\n    titleSpan.textContent = title;\n    \n    // Append spans to icon\n    icon.appendChild(emojiSpan);\n    icon.appendChild(titleSpan);\n    \n    // Append icon to parent\n    parent.appendChild(icon);\n    \n    // Add click event listener to icon\n    icon.addEventListener('click', function() {\n        // Callback when icon is clicked\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n};\n\n\n})()\n</script>",
            "<script id='desktop_desktop-app'>\n(() => {\n// Assuming window.os exists and window.os.icon exists\nif (!window.os) {\n    window.os = {};\n}\n\nif (!window.os.addApp) {\n    window.os.addApp = function (emoji, title, callback) {\n        var parent = document.querySelector('#desktop_content');\n        window.os.icon(parent, emoji, title, callback);\n    };\n}\n\n\n})()\n</script>",
            "<style id='gui_gui-styles'>\n.titleBar {\n    background-color: orange;\n    border-bottom: 1px solid black;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-family: monospace;\n    font-size: small;\n    padding: 5px;\n    border-bottom: 2px solid black;\n    user-select: none; /* This will prevent text selection */\n}\n\n/* This will apply styles to buttons inside titleBar */\n.titleBar button {\n    border: none;\n    background: none;\n    cursor: pointer;\n    font-size: 6px;\n    padding: 0;\n}\n\n.window {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    background-color: white;\n    padding: 0;\n    border: 2px solid black;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 4px 4px 0 0 rgba(0,0,0,0.5);\n}\n\n.contentPlaceholder {\n    flex-grow: 1;\n    overflow: auto;\n    padding: 5px;\n}\n\n.statusPlaceholder {\n    border-top: 1px solid black;\n    font-family: monospace;\n    font-size: small;\n}\n\n.resizeHandle {\n    width: 0px;\n    height: 0px;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    cursor: se-resize;\n    border-width: 0 0 10px 10px;\n    border-style: solid;\n    border-color: transparent transparent #ff7200 transparent;\n    transform: rotate(0deg);\n}\n\n.toolbar {\n    display: flex;\n    justify-content: flex-start;\n    padding: 2px;\n    background-color: antiquewhite;\n    margin-bottom: 2px;\n    border-bottom: 1px solid black;\n}\n\n.toolbar button {\n    border: none;\n    cursor: pointer;\n    background-color: transparent;\n}\n\n</style>",
            "<script id='gui_draggable'>\n(() => {\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\nwindow.os.gui.makeDraggable = function (root, dragHandle) {\n    var offsetX = 0;\n    var offsetY = 0;\n    \n    dragHandle.addEventListener('mousedown', function (event) {\n        offsetX = event.clientX - root.getBoundingClientRect().left;\n        offsetY = event.clientY - root.getBoundingClientRect().top;\n        \n        document.addEventListener('mousemove', move);\n        document.addEventListener('mouseup', drop);\n    });\n    \n    function move (event) {\n        event.preventDefault();\n        root.style.position = 'absolute';\n        root.style.left = event.clientX - offsetX + 'px';\n        root.style.top = event.clientY - offsetY + 'px';\n    }\n    \n    function drop () {\n        document.removeEventListener('mousemove', move);\n        document.removeEventListener('mouseup', drop);\n    }\n};\n\n// Add gui namespace if it doesn't exist\nif (!window.os || !window.os.gui) {\n    window.os = window.os || {};\n    window.os.gui = {};\n}\n\n// Define makeResizable function\nwindow.os.gui.makeResizable = function (root, resizeHandleDOMElement) {\n    let rootRect = root.getBoundingClientRect();\n    let startX = rootRect.width;\n    let startY = rootRect.height;\n    let startMouseX;\n    let startMouseY;\n    let startRootX = rootRect.x;\n    let startRootY = rootRect.y;\n    \n    // Add event listeners for mousedown and mousemove events\n    resizeHandleDOMElement.addEventListener('mousedown', function (e) {\n        e.preventDefault();\n        startMouseX = e.clientX;\n        startMouseY = e.clientY;\n        document.addEventListener('mousemove', mouseMove);\n        document.addEventListener('mouseup', mouseUp);\n    });\n    \n    // Define mouseMove function\n    function mouseMove(e) {\n        let diffX = e.clientX - startMouseX;\n        let diffY = e.clientY - startMouseY;\n        root.style.width = startX + diffX + 'px';\n        root.style.height = startY + diffY + 'px';\n    }\n    \n    // Define mouseUp function\n    function mouseUp() {\n        document.removeEventListener('mousemove', mouseMove);\n        document.removeEventListener('mouseup', mouseUp);\n        let rootRect = root.getBoundingClientRect();\n        startX = rootRect.width;\n        startY = rootRect.height;\n        startRootX = rootRect.x;\n        startRootY = rootRect.y;\n    }\n};\n\nif (!window.os || !window.os.gui) {\n    window.os = window.os || {};\n    window.os.gui = window.os.gui || {};\n}\n\nwindow.os.gui.bringToFront = function (rootDomNode) {\n    // Internal function to bring other nodes to front\n    var bringOthersToFront = function () {\n        // Get all nodes with same class as rootDomNode\n        var nodes = document.getElementsByClassName(rootDomNode.className);\n        // Iterate through them and set z-index to 0\n        for (var i = 0; i < nodes.length; i++) {\n            nodes[i].style.zIndex = 0;\n        }\n        // Set z-index of rootDomNode to 1\n        rootDomNode.style.zIndex = 1;\n    }\n    \n    // Add mousedown event listener to rootDomNode\n    rootDomNode.addEventListener('mousedown', bringOthersToFront);\n}\n\n\n})()\n</script>",
            "<script id='gui_titleBar'>\n(() => {\nif (!window.os) window.os = {};\nif (!window.os.gui) window.os.gui = {};\n\nwindow.os.gui.titleBar = function(parentElement, title, close) {\n    // Create root DOM element with class .titleBar\n    var root = document.createElement('div');\n    root.className = 'titleBar';\n    \n    // Add span containing title to root DOM element\n    var span = document.createElement('span');\n    span.textContent = title;\n    root.appendChild(span);\n    \n    // Add button with text '\u274c' and class 'close' to root DOM element\n    var button = document.createElement('button');\n    button.textContent = '\u274c';\n    button.className = 'close';\n    button.addEventListener('click', close); // Add event listener for close callback\n    root.appendChild(button);\n    \n    // Append root DOM element to parentElement\n    parentElement.appendChild(root);\n};\n\n\n})()\n</script>",
            "<script id='gui_window'>\n(() => {\nwindow.os.gui.createWindow = function(emoji = \"\ud83d\udda5\ufe0f\", title = \"New Window\", appCallback = () => {}, width = 400, height = 300) {\n    // Create root DOM element\n    let root = document.createElement(\"div\");\n    root.classList.add(\"window\");\n    document.body.appendChild(root);\n    \n    // Bring window to front\n    window.os.gui.bringToFront(root);\n    \n    // Create placeholders for title bar, toolbar, content, status\n    let titlePlaceholder = document.createElement(\"div\");\n    titlePlaceholder.classList.add(\"titlePlaceholder\");\n    root.appendChild(titlePlaceholder);\n    \n    let toolbarPlaceholder = document.createElement(\"div\");\n    toolbarPlaceholder.classList.add(\"toolbarPlaceholder\");\n    root.appendChild(toolbarPlaceholder);\n    \n    let contentPlaceholder = document.createElement(\"div\");\n    contentPlaceholder.classList.add(\"contentPlaceholder\");\n    root.appendChild(contentPlaceholder);\n    \n    let statusPlaceholder = document.createElement(\"div\");\n    statusPlaceholder.classList.add(\"statusPlaceholder\");\n    root.appendChild(statusPlaceholder);\n    \n    // Create resize handle\n    let resizeHandle = document.createElement(\"div\");\n    resizeHandle.classList.add(\"resizeHandle\");\n    root.appendChild(resizeHandle);\n    \n    // Create title bar\n    window.os.gui.titleBar(titlePlaceholder, emoji + \" \" + title, () => { document.body.removeChild(root); });\n    \n    // Append appCallback to content placeholder\n    contentPlaceholder.appendChild(appCallback(root));\n    \n    // Make window draggable by title placeholder\n    window.os.gui.makeDraggable(root, titlePlaceholder);\n    \n    // Make window resizable by resize handle\n    window.os.gui.makeResizable(root, resizeHandle);\n    \n    // Set width and height of root element\n    root.style.width = width + \"px\";\n    root.style.height = height + \"px\";\n    \n    return root;\n};\n\n\n})()\n</script>",
            "<script id='gui_toolbar'>\n(() => {\n// Assuming window.os is already defined as an object\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to create toolbar\nwindow.os.gui.createToolbar = function(parent) {\n    // Create root DOM element\n    var toolbar = document.createElement('div');\n    toolbar.className = 'toolbar';\n    \n    // Append to parent's .toolbarPlaceholder\n    var toolbarPlaceholder = parent.querySelector('.toolbarPlaceholder');\n    toolbarPlaceholder.appendChild(toolbar);\n    \n    // Return object with addButton function\n    return {\n        addButton: function(text, callback) {\n            // Create button DOM element\n            var button = document.createElement('button');\n            button.textContent = text;\n            \n            // Append to toolbar\n            toolbar.appendChild(button);\n            \n            // Add click event listener to call callback\n            button.addEventListener('click', callback);\n        }\n    };\n};\n\n\n})()\n</script>",
            "<script id='apps_app'>\n(() => {\n// Assuming window.os exists and has methods window.os.addApp and window.os.gui.createWindow\nif (!window.os) {\n    window.os = {};\n}\n\nif (!window.os.addApp) {\n    window.os.addApp = function(emoji, title, callback) {\n        // Assuming this function adds application to OS\n    };\n}\n\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\nif (!window.os.gui.createWindow) {\n    window.os.gui.createWindow = function(title, emoji, callback, width=400, height=400) {\n        // Assuming this function creates a window with given parameters\n        // And returns HTMLElement\n    };\n}\n\n// New registerApplication function\nif (!window.os.registerApplication) {\n    window.os.registerApplication = function(title, emoji, callback, width=400, height=400) {\n        const initialize = () => {\n            window.os.gui.createWindow(title, emoji, callback, width, height);\n        };\n        window.os.addApp(emoji, title, initialize);\n        return null;  // or you can return anything you want\n    };\n}\n\n\n})()\n</script>"
        ]
    },
    "body": {
        "_children_": [
            "<div id='desktop_content'>\n</div>",
            "<script id='gui_gui-tests'>\n(() => {\n\n})()\n</script>",
            "<script id='apps_hello-world'>\n(() => {\nfunction helloWorld() {\n    // Create a root dom element with class 'hw'\n    let rootElement = document.createElement('div');\n    rootElement.className = 'hw';\n    \n    // Create a new 'h1' element with the text 'Hello, World!' and appends it to the root element\n    let h1Element = document.createElement('h1');\n    h1Element.textContent = 'Hello, World!';\n    rootElement.appendChild(h1Element);\n    \n    // Return root dom element\n    return rootElement;\n}\n\n// Register application with 'hello world' title, \ud83d\udc4b as emoji, helloWorld function and 300x200 size \nif (typeof window.os !== 'undefined' && typeof window.os.registerApplication === 'function') {\n    window.os.registerApplication('hello world', '\ud83d\udc4b', helloWorld, 300, 200);\n} else {\n    console.error('The os or registerApplication does not exist');\n}\n\n\n})()\n</script>",
            "<script id='apps_browser'>\n(() => {\nfunction browser(parent) {\n    var browserPath = '';\n    var root = document.createElement('div');\n    root.className = 'browser';\n    parent.appendChild(root);\n    \n    var load = function(path) {\n        browserPath = path;\n        while (root.firstChild) {\n            root.removeChild(root.firstChild);\n        }\n        if (browserPath !== '') {\n            var upButton = document.createElement('div');\n            upButton.textContent = '..';\n            upButton.addEventListener('click', function() {load(browserPath.split('/').slice(0, -1).join('/'));});\n            root.appendChild(upButton);\n        }\n        window.os.fs.ls(browserPath).forEach(function(entry) {\n            var entryDiv = document.createElement('div');\n            entryDiv.textContent = entry;\n            entryDiv.addEventListener('click', function() {\n                if (!window.os.fs.isFile(browserPath + '/' + entry)) {\n                    load(browserPath + '/' + entry);\n                }\n            });\n            root.appendChild(entryDiv);\n        });\n    };\n    load(browserPath);\n    \n    var toolbar = window.os.gui.createToolbar(parent);\n    toolbar.addButton('\ud83d\udcc1', function() {\n        var dirName = prompt('Enter directory name');\n        if (dirName) {\n            window.os.fs.mkdir(browserPath, dirName);\n            load(browserPath);\n        }\n    });\n    toolbar.addButton('\ud83d\udcc4', function() {\n        var fileName = prompt('Enter file name');\n        if (fileName) {\n            window.os.fs.write(browserPath + '/' + fileName, '');\n            load(browserPath);\n        }\n    });\n    \n    return root;\n}\n\nwindow.os.registerApplication('Browser', '\ud83d\udcc2', browser, 400, 400);\n\n\n})()\n</script>"
        ]
    },
    "_children_": []
}