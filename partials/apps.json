{
    "apps": {
        "styles": {
            "disabled": false,
            "rebuild": false,
            "to": "head",
            "tag": "style",
            "dependencies": [],
            "instructions": [
                [
                    "css to style .browser class to have display flex and flex-wrap wrap"
                ]
            ]
        },
        "simple-run": {
            "disabled": false,
            "rebuld": false,
            "to": "body",
            "tag": "script",
            "dependencies": [
                "registry"
            ],
            "instructions": [
                [
                    "Create an `application` function that takes a parent parameter having the following functionality:",
                    " - create a root dom element with class `chat`",
                    " - create an input element with 100% width with keyup event listener that on enter key press:",
                    "   - save the input value to instruction variable and clear the input",
                    "   - POST the json having instruction and full as false to `/`, on response add a script tag to the body with id `run-script` and add the response text content to the script tag",
                    " - return dom element"
                ],
                [
                    "call register application with 'Run' title, ‚ñ∂Ô∏è as emoji, already defined `application` function reference and 400x70 size"
                ]
            ]
        },
        "editor": {
            "disabled": false,
            "rebuild": false,
            "to": "body",
            "tag": "script",
            "dependencies": [
                "filesystem",
                "toolbar",
                "registry"
            ],
            "instructions": [
                [
                    "Create a `editor` function that takes a window and path parameter:",
                    " - create a dom element with class `editor`",
                    " - add a textarea element to the previously created element 100% width and 100% height",
                    " - save reference to the textarea element",
                    " - create toolbar on the `window` parameter",
                    " - if path is not empty, read the file content and set it to the textarea",
                    " - add button on the toolbar with `üíæ` text save textarea content to the path if path is defined, prompt for the path otherwise",
                    " - return  dom element",
                    "",
                    "call register application with 'Editor' title, ‚úçÔ∏è as emoji, `editor` function reference and 400x450 size for [txt,doc] extensions"
                ]
            ]
        },
        "browser": {
            "disabled": false,
            "rebuild": false,
            "to": "body",
            "tag": "script",
            "dependencies": [
                "filesystem",
                "toolbar",
                "registry",
                "app-icon"
            ],
            "instructions": [
                [
                    "1. Create a `browser` function that takes a win and path defaulting to '' parameter:",
                    " - create a container dom element with class `browser`",
                    " - set browserPath to path or `''` if path is undefined or not string",
                    " - generate internal load function that takes path parameter:",
                    "   - set browserPath to path",
                    "   - removes all children of the container element",
                    "   - if path is not empty, create a new `div` with class icon, inner element `.emoji` with internal span element having content 'üîô'  and class `emoji` and on click call load with `path.split('/').slice(0, -1).join('/')`",
                    "   - ls all files in the path and for each item:",
                    "      - call `getOsIcon` with path+'/'+item and load function as callback",
                    "      - add a checkbox with value path+'/'+item that prevent event bubbling",
                    " - execute load on browserPath variable",
                    " - create toolbar",
                    " - call `addButton` on the toolbar with `üìÅ` text and prompt for a name and call mkdir on current browserPath and provided name",
                    " - call `addButton` on the toolbar with `üìÑ` text and prompt for a name and call write on current browserPath and provided name and '' as content",
                    " - call `addButton` on the toolbar with `üóëÔ∏è` text and list all the selected checkbox values, removes them and calls load on the current path",
                    " - return dom element"
                ],
                [
                    "Call register application with 'Browser' title, üìÇ as emoji, browser and 450x400 size"
                ]
            ]
        },
        "assistant-styles": {
            "disabled": true,
            "rebuild": false,
            "to": "head",
            "tag": "style",
            "dependencies": [],
            "instructions": [
                [
                    "style .chat class to have display flex and flex-direction column",
                    "style .results class to have 100% width and 300px height, overflow-y scroll and margin 10px",
                    "style .results pre to have white-space pre-wrap"
                ]
            ]
        },
        "assistant": {
            "disabled": true,
            "rebuld": false,
            "to": "body",
            "tag": "script",
            "dependencies": [
                "registry"
            ],
            "instructions": [
                [
                    "Create a `assistant` function that takes a parent parameter:",
                    " - create a root dom element with class `chat`",
                    " - create a div element with 100% width and 300px height with class `results`",
                    " - create an input element with 100% width",
                    " - add a button with `‚û°Ô∏è` text and on click:",
                    "   - save the input value to instruction variable and clear the input",
                    "   - POST the json having instruction and full as true to `/`, on response add pre tag with the response text content to the results",
                    " return dom element",
                    "call register application with 'Assistant' title, üë®üèΩ‚Äç‚öïÔ∏è as emoji, already defined `assistant` function reference and 400x400 size"
                ]
            ]
        },
        "image": {
            "disabled": false,
            "rebuild": false,
            "to": "body",
            "tag": "script",
            "dependencies": [
                "filesystem",
                "registry"
            ],
            "instructions": [
                [
                    "Create a local `imageViewer` and generate jsdoc for it function that takes two parameters: `unused` and `path`  with the following functionality:",
                    "reads file content as base64 string from the path to a variable `content`",
                    "remove data:image/png;base64, or data:image/jpeg;base64 from the content",
                    "create image element with src to content",
                    "make the image fill the entire parent content",
                    "return image element"
                ],[
                    "call register application with 'Image Viewer' title, üñºÔ∏è as emoji, `imageViewer` function reference and 650x520 size and [png,jpg,jpeg] as extensions"
                ]
            ]
        }
    }
}