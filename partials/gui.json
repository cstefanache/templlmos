{
    "gui": {
        
        "gui-styles": {
            "to": "head",
            "tag": "style",
            "instructions": [
                [
                    "css style for a .titleBar class to follow the following rules:",
                    "1. orange background color, a black bottom border of 1px solid",
                    "2. display of flex, a justify-content of space-between, an align-items of center",
                    "3. monospaced black small text",
                    "4. internal padding of 5px",
                    "5. render buttons flat, no background, a cursor of pointer, font size of 6, no padding",
                    "6. do not allow text selection"
                ],
                [
                    "css style for a .window class to follow the following rules:",
                    "- white background color and a padding of 1px",
                    "- a border of 2px solid black",
                    "- a border-radius of 8px",
                    "- no padding",
                    "- hidden overflow",
                    "- a box-shadow of 4px 4px 0 0 rgba(0,0,0,0.5)",
                    "- absolute position",
                    "- display of flex and flex-direction of column",
                    "- inner .contentPlaceholder class should have a padding of 5px, flex-grow of 1 and overflow of auto",
                    "- inner .toolbarPlaceholder class should have a border-bottom of 1px solid black",
                    "- inner .statusPlaceholder class should have  a border-top of 1px solid black and a monospaced small text"
                ],
                [
                    "css style for a  `.resizeHandle` class with the following rules:",
                    "- a width and height of 0px",
                    "- an absolute position",
                    "- a bottom and right of 0",
                    "- a cursor of se-resize",
                    "- border width: 0 0 5px 5px",
                    "- border style: solid",
                    "- `border-color: transparent transparent #ff7200 transparent`",
                    "- transform: rotate(0deg)"
                ]
            ]
        },
        "gui-global-objects": {
            "to": "head",
            "tag": "script",
            "instructions": [
                [
                    "Create a new empty object `gui` on the `window.os`"
                ]
            ]
        },
        "draggable": {
            "disabled": false,
            "to": "head",
            "tag": "script",
            "rebuild": false,
            "library": true,
            "libraryPrefix": " ### Instruction:\nList functions on the `window.os.gui` object only:\n\n",
            "librarySuffix": "\n### Response:\n",
            "prefix": "do not use jquery.\n `window.os` object is already defined.\n### Instruction:\n",
            "instructions": [
                [
                    "Implement the following functions on the `window.os` object under `gui` key:",
                    "- `makeDraggable(root, dragHandle)` - move the root element by dragging the dragHandle element"
                ],
                [
                    "Implement the following functions on the `window.os` object under `gui` key:",
                    "`makeResizable(root, resizeHandle) that:` ",
                    " - resize (both width and height) the root element by dragging the resizeHandle element.",
                    " - update starting width and height on mouseup"
                ],
                [
                    "Implement `bringToFront(rootDOMNode)` on the `window.os.gui` that:",
                    "- creates an internal function that:",
                    "  * takes all elements with the same class as rootDomNode",
                    "  * iterate through them and sets the z-index to 0",
                    "  * sets the z-index of rootDOMNode to 1",
                    "- adds a mousedown event listener to rootDOMNode that calls the internal function"
                ]
            ]
        },   
        "development": {
            "disabled": true,
            "to": "head",
            "tag": "script",
            "rebuild": false,
            "library": true,
            "libraryPrefix": " ### Instruction:\nList functions on the `window.os.gui` object:\n\n",
            "librarySuffix": "\n### Response:\n",
            "prefix": "do not use jquery.\n `window.os` object is already defined.\n### Instruction:\n",
            "instructions": [
                
            ]
        },   
        "gui-tests": {
            "to": "body",
            "tag": "script",
            "disabled": true,
            "dependencies": [
                "draggable"
            ],
            "preventRebuild": false,
            "instructions": [
                [
                    "create a DOM element, absolute position, 100x100px, background color red, append to body",
                    "add another DOM element to the first one, relative position, width:100% height:20px, background color blue, append to first one",
                    "call make draggable the first element by the second one",
                    "add another DOM element to the first one, absolute position, right:0, bottom:0, width:10px height:10px, background color green, append to first one",
                    "call make resizable the first element by the third one"
                ]
            ]
        },

        "titleBar": {
            "disabled": false,
            "to": "head",
            "tag": "script",
            "rebuild": false,
            "library": true,
            "libraryPrefix": " ### Instruction:\nGenerate `window.os.gui.titleBar` method signature:\n\n",
            "librarySuffix": "\n### Response:\n",
            "prefix": "{deps} Generate browser vanilla JS code without the use of any library or framework. `window.os` function is already defined.\n### Instruction:\n",
            "instructions": [
                [
                    "Define a function called `titleBar` object on `window.os.gui` that takes two parameter: parentElement (DOM element), title (string), and a callback `close` and has the following functionality:",
                    "- create a root DOM element with the class `.titleBar`",
                    "- add to the root DOM element a `span` containing the title parameter",
                    "- add to the root DOM element a `button` with the text `‚ùå` and class `close` that calls the close callback",
                    "- append the root DOM element to parentElement"
                ]
            ]
        },
        "window": {
            "disabled": false,
            "to": "head",
            "tag": "script",
            "rebuild": false,
            "library": true,
            "libraryPrefix": " ### Instruction:\nGive an example of how to use `window.os.gui.createWindow`:\n",
            "librarySuffix": "\n### Response:\n",
            "dependencies": [
                "titleBar",
                "draggable",
                "development"
            ],
            "instructions": [
                [
                    "Define a function called `window.os.gui.createWindow` that takes four parameters: emoji, title, contentElement and width and height that are defaulting to 400 and 300, respectively if not passed and have the following functionality:",
                    "- create a root DOM element with the class `.window`, no border styles, and add it to document body in the middle of the document",
                    "- call bringToFront on the root element",
                    "- add and empty div with class `titlePlaceholder` to the root DOM element",
                    "- add and empty div with class `toolbarPlaceholder` to the root DOM element",
                    "- add and empty div with class `contentPlaceholder` to the root DOM element and append the contentElement parameter to it",
                    "- add and empty div with class `statusPlaceholder` to the root DOM element",
                    "- add a resize handle to the root DOM element with class `resizeHandle`",
                    "- add titleBar to `titlePlaceholder` having the text `emoji + title` and close callback removes root DOM element from the document body",
                    "- call makeDraggable on root element by the titlePlaceholder element",
                    "- make root element resizable by the resizeHandle element",
                    "- return null"
                ]
            ]
        },
        "tests": {
            "disabled": true,
            "to": "body",
            "tag": "script",
            "dependencies": [
                "window"
            ],
            "instructions": [
                [
                    "Create a new window with the title `My Window` and a div containing `hello world 1` as content having üòÉ as emoji",
                    "Create a new window with the title `My Window 2` and a div containing  `hello world 2` as content having üíÑ as emoji"
                ]
            ]
        }
    }
}