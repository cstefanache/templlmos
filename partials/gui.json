{
    "gui": {
        "gui-styles": {
            "to": "head",
            "tag": "style",
            "instructions": [
                [
                    "css style for a .titleBar class to follow the following rules:",
                    "- orange background color, a black bottom border of 1px solid",
                    "- display of flex, a justify-content of space-between, an align-items of center",
                    "- monospaced black small text",
                    "- internal padding of 5px",
                    "- 2px black border bottom",
                    "- render buttons flat, no border, no background, a cursor of pointer, font size of 6, no padding",
                    "- do not allow text selection"
                ],
                [
                    "css style for a .window class to follow the following rules:",
                    "- white background color and a padding of 1px",
                    "- a border of 2px solid black",
                    "- a border-radius of 8px",
                    "- no padding",
                    "- hidden overflow",
                    "- a box-shadow of 4px 4px 0 0 rgba(0,0,0,0.5)",
                    "- absolute position",
                    "- display of flex and flex-direction of column",
                    "- inner .contentPlaceholder class should have a padding of 5px, flex-grow of 1 and overflow of auto",
                    "- inner .statusPlaceholder class should have  a border-top of 1px solid black and a monospaced small text"
                ],
                [
                    "css style for a  `.resizeHandle` class with the following rules:",
                    "- a width and height of 0px",
                    "- an absolute position",
                    "- a bottom and right of 0",
                    "- a cursor of se-resize",
                    "- border width: 0 0 10px 10px",
                    "- border style: solid",
                    "- `border-color: transparent transparent #ff7200 transparent`",
                    "- transform: rotate(0deg)"
                ],
                [
                    "css style for a .toolbar class to follow the following rules:",
                    "- a padding of 2px",
                    "- a background of antique white",
                    "- a margin-bottom of 2px",
                    "- a border-bottom of 1px solid black",
                    "- a display of flex",
                    "- a justify-content of flex-start",
                    "inner buttons have:",
                    " - no border",
                    " - cursor pointer",
                    " - transparent background"
                ]
            ]
        },
        "draggable": {
            "disabled": false,
            "to": "head",
            "tag": "script",
            "rebuild": false,
            "library": true,
            "instructions": [
                [
                    "Implement the following functions on the `window.os` object under `gui` key:",
                    "- `makeDraggable(root, dragHandleHTMLElement)` - when user is dragging the dragHandleHTMLElement, move the root HTMLElement"
                ],
                [
                    "Implement the following functions on the `window.os` object under `gui` key:",
                    "`makeResizable(root, resizeHandleHTMLElement) that:` ",
                    " - resize (both width and height) the root HTMLElement element by dragging the resizeHandle DOM element.",
                    " - update starting width and height on mouseup"
                ],
                [
                    "Implement `bringToFront(rootDOMNode)` on the `window.os.gui` that:",
                    "- creates an internal function that:",
                    "  * takes all elements with the same class as rootDomNode",
                    "  * iterate through them and sets the z-index to 0",
                    "  * sets the z-index of rootDOMNode to 1",
                    "- adds a mousedown event listener to rootDOMNode that calls the internal function"
                ]
            ]
        },
        "gui-tests": {
            "to": "body",
            "tag": "script",
            "disabled": true,
            "dependencies": [],
            "preventRebuild": false,
            "instructions": []
        },
        "titleBar": {
            "disabled": false,
            "to": "head",
            "tag": "script",
            "rebuild": false,
            "library": true,
            "instructions": [
                [
                    "Define a function called `titleBar` object on `window.os.gui` that takes two parameter: parentElement (DOM element), title (string), and a callback `close` and has the following functionality:",
                    "- create a root DOM element with the class `.titleBar`",
                    "- add to the root DOM element a `span` containing the title parameter",
                    "- add to the root DOM element a `button` with the text `‚ùå` and class `close` that calls the close callback",
                    "- append the root DOM element to parentElement"
                ]
            ]
        },
        "toolbar": {
            "disabled": false,
            "to": "head",
            "tag": "script",
            "rebuild": false,
            "dependencies": [],
            "library": true,
            "instructions": [
                [
                    "Define a function called `createToolbar` on the `window.os.gui` object that takes one parameter `parent`",
                    "- create a root DOM element with the class `.toolbar`",
                    "- append the root DOM element to the `.toolbarPlaceholder` from passed `parent` as parameter",
                    "- return an object with the following functions:",
                    "  - addButton(text, callback) - add a button to the root DOM element with the text parameter and call the callback when the button is clicked"
                ]
            ]
        },
        "window": {
            "disabled": false,
            "to": "head",
            "tag": "script",
            "rebuild": false,
            "preventRebuild": false,
            "library": true,
            "dependencies": [
                "titleBar",
                "draggable",
                "gui-tests"
            ],
            "instructions": [
                [
                    "Define a function called `createWindow` on the `window.os.gui` object that takes four parameters: emoji, title, width and height that are defaulting to 400 and 300, respectively if not passed and have the following functionality:",
                    "- create a root DOM element with the class `.window`, set the width and height only, and add it to document body in the middle of the document",
                    "- call bringToFront on the root element",
                    "- add and empty div with class `titlePlaceholder` to the root DOM element",
                    "- add and empty div with class `toolbarPlaceholder` to the root DOM element",
                    "- add and empty div with class `contentPlaceholder` to the root DOM element",
                    "- add and empty div with class `statusPlaceholder` to the root DOM element",
                    "- add a resize handle to the root DOM element with class `resizeHandle`",
                    "- add titleBar to `.titlePlaceholder` having the text `emoji + title` and close callback removes root DOM element from the document body",
                    "- make root element draggable by the `.titlePlaceholder` element",
                    "- make root element resizable by the `resizeHandle` element",
                    "- set root DOM element left position document width divided by 2 minus width divided by 2",
                    "- set root DOM element top position document height divided by 2 minus height divided by 2",
                    "- return root DOM element"
                ],
                [
                    "Define a function called `attachToWindow` on the `window.os.gui` object that takes two parameters: windowElement and contentElement that takes the contentElement and appends it to the `.contentPlaceholder` of the windowElement"
                ]
            ]
        },
        "tests": {
            "disabled": true,
            "to": "body",
            "tag": "script",
            "preventRebuild": false,
            "dependencies": [
                "window"
            ],
            "instructions": [
                [
                    "create an element h1 with text `hello world!` and attach to a window with title `Hello World` and emoji `üåç` having 300x200 size"
                ]
            ]
        }
    }
}