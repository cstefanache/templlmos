{
    "apps": {
        "app": {
            "disabled": false,
            "to": "head",
            "tag": "script",
            "rebuild": false,
            "library": true,
            "dependencies": [
                "window",
                "desktop-app"
            ],
            "instructions": [
                [
                    "create a new function `registerApplication` on the `window.os` object that takes a title, emoji, callback, width=400 and height = 400 having the following functionality:",
                    "- define an internal `initialize` function that creates a new window with the title, emoji, callback, width and height ",
                    "- after initialized is defined, call `addApp` with the emoji, title and initialize function",
                    "- return null"
                ]
            ]
        },
        "appicon": {
            "disabled": false,
            "rebuild": false,
            "to": "head",
            "tag": "script",
            "library": true,
            "instructions": [
                [
                    "Create an app registry empty object on the `window.os` object",
                    "Create a `registerExtension` function on the `window.os` object that takes an extension, emoji and callback parameter and adds an object to the app registry under the extension key",
                    "Create a `appIcon` function on the `window.os` object that takes a isFile, path, name and callback parameter:",
                    " - create a root dom element with class `app-icon`",
                    " - create a new '.emoji' element with text `üìÑ` if isFile and `üìÅ`, otherwise and append it to the root element",
                    " - create a new `.text` element with text name and append it to the root element",
                    " - get extension from name",
                    " - add click event listener to the root element that calls the callback with the path if extension is found in the app registry or call the callback with the path if not found",
                    " - return root dom element"
                ],
                [
                    "execute already defined `window.os.registerExtension` with the following parameters 'script', '‚öôÔ∏è', (path) => alert(`open ${path}`)"
                ]
            ]
        },
        "editor": {
            "disabled": false,
            "rebuild": false,
            "to": "body",
            "tag": "script",
            "dependencies": [
                "app",
                "filesystem",
                "toolbar",
                "appicon"
            ],
            "instructions": [
                [
                    "Create a function `editor` that takes `parent` and `path` parameters with the following functionality:",
                    " - creates a root dom element",
                    " - create toolbar on the `parent` parameter",
                    " - add button on the toolbar with `üíæ` text and prompt for a name",
                    " - add a textarea element with class `editor` to the root element 100% width and 30 lines height",
                    " - return root dom element",
                    "after function is defined, register application with 'Editor' title, ‚úçÔ∏è as emoji, `editor` function and 500x400 size"
                ]
            ]
        },
        "hello-world": {
            "disabled": false,
            "to": "body",
            "tag": "script",
            "dependencies": [
                "app"
            ],
            "instructions": [
                [
                    "Create a `helloWorld` function that:",
                    " - creates a root dom element with class `hw`",
                    " - create a new `h1` element with the text `Hello, World!` and appends it to the root element",
                    " - return root dom element",
                    "register application with 'hello world' title, üëã as emoji, `helloWorld` function and 300x200 size"
                ]
            ]
        },
        "browser": {
            "disabled": false,
            "rebuild": false,
            "to": "body",
            "tag": "script",
            "dependencies": [
                "app",
                "filesystem",
                "toolbar",
                "appicon"
            ],
            "instructions": [
                [
                    "Create a function `browser` that takes a `parent` parameter with the following functionality:",
                    " - create a root dom element with class `browser`",
                    " - set browserPath variable to `''`",
                    " - generate internal load function that takes path parameter:",
                    "   - set browserPath to the path",
                    "   - removes all children of the root element",
                    "   - if path is not empty, create a new `div` element with text `..` and on click call load with `path.split('/').slice(0, -1).join('/')`",
                    "   - lists all files in the path that saves isFile to a constant and appends child to the root element the result of calling appIcon with isFile, path, name and load as callback",
                    " - execute load on browserPath variable",
                    " - create toolbar on the `parent` parameter",
                    " - add button on the toolbar with `üìÅ` text and prompt for a name and call mkdir on current browserPath and provided name",
                    " - add button on the toolbar with `üìÑ` text and prompt for a name and call write on current browserPath and provided name and '' as content",
                    " - return root dom element",
                    "after function is defined, register application with 'Browser' title, üìÇ as emoji, already defined `browser` function and 400x400 size"
                ]
            ]
        },
        "ide": {
            "disabled": true,
            "rebuild": false,
            "to": "body",
            "tag": "script",
            "dependencies": [
                "app",
                "toolbar"
            ],
            "instructions": [
                [
                    "create a new function `compile` that takes a code parameter and:",
                    " - removes element with id `ide-development` if exists",
                    " - sends a POST request to `localhost:8000/compiler` with the code as the body",
                    " - creates a new `script` element with id `ide-development` and appends it to the body",
                    " - sets the script element text to the response text"
                ],
                [
                    "Create a `ide` function that takes `win` parameter:",
                    " - creates a root dom element with class `ide`",
                    " - adds a `textarea` element with class `editor` to the root element 100% width and 30 lines height",
                    " - create toolbar on the `win` parameter",
                    " - add button on the toolbar with `‚ñ∂Ô∏è` text and call `compile` (do not define) with the textarea value as a parameter",
                    " - add button on the toolbar with `üíæ` text and alert `Save` as callback",
                    " - return root dom element",
                    "create `application` with 'IDE' title, üß† as emoji, `ide` function and 800x400 size"
                ]
            ]
        }
    }
}