{
    "crc": 984532806,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n /**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions to register for this application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\n/**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() { ... }\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) { ... }\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) { ... }\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') { ... }\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) { ... }\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) { ... }\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) { ... }\n\n\n\n Create a `helloWorld` function that takes a parent and path parameter:\n - creates and returns a root element `div` having an h1 child element with 'Hello World' text\n - if path is defined append a pre element containing the content of reading the file at the path\n - returns the root element\nafter definition, register application with 'hello world' title, \ud83d\udc4b as emoji, `helloWorld` function and 300x200 size \n### Response:\n",
    "output": "/**\n * Create a root element div having an h1 child element with 'Hello World' text\n * If path is defined append a pre element containing the content of reading the file at the path\n * @param {HTMLElement} parent - The parent element to append the created elements to\n * @param {string} [path] - The path to a file to read its content from\n * @returns {HTMLElement} - The root element containing h1 and pre elements\n */\nfunction helloWorld(parent, path) {\n    // Create root div element\n    const root = document.createElement('div');\n    \n    // Create h1 element with 'Hello World' text\n    const h1 = document.createElement('h1');\n    h1.textContent = 'Hello World';\n    root.appendChild(h1);\n    \n    // If path is provided, create pre element with file content\n    if (path) {\n        const pre = document.createElement('pre');\n        pre.textContent = window.os.fs.getFileContentFromPath(path);\n        root.appendChild(pre);\n    }\n    \n    // Append root element to parent\n    parent.appendChild(root);\n    \n    return root;\n}\n\n// Register application with 'hello world' title, \ud83d\udc4b as emoji, helloWorld function and 300x200 size\nwindow.os.registerApplication('hello world', '\ud83d\udc4b', helloWorld, 300, 200);\n\n",
    "library": "/**\n * Create a root element div having an h1 child element with 'Hello World' text\n * If path is defined append a pre element containing the content of reading the file at the path\n * @param {HTMLElement} parent - The parent element to append the created elements to\n * @param {string} [path] - The path to a file to read its content from\n * @returns {HTMLElement} - The root element containing h1 and pre elements\n */\nfunction helloWorld(parent, path) { ... }\n"
}