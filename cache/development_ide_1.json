{
    "crc": 4250723673,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n /**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() { ... }\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) { ... }\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) { ... }\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') { ... }\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) { ... }\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) { ... }\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) { ... }\n\n/**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions to register for this application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\n/**\n * Create a toolbar with a button inside it.\n * @param {HTMLElement} win - The window element to add toolbar to.\n * @returns {function(string, function): void} - The addButton function.\n */\nwindow.os.gui.createToolbar = function(win) { ... }\n\n/**\n * Compile a source code string into a runnable script.\n * \n * @param {string} source - The source code string to compile.\n */\nfunction compile(source) { ... }\n\n\n 1. Create an `ide` function that takes a win and path parameter: \n - create a root dom element with class `ide`\n - create a textarea element with 100% width and 500px height\n - if path is not empty, read the file content and set it to the textarea\n - create toolbar on win\n - add button on the toolbar with `\u25b6\ufe0f` text and on click execute `compile` function with textarea content\n - add button on the toolbar with `\ud83d\udcbe` text and on click fs.write textarea content to the path if path is defined, prompt for the path otherwise\n - return dom element\n2. Call register application with 'IDE' title, \ud83e\udde0 as emoji, already defined `ide` function reference and 800x600 size and register for ['script'] extensions \n### Response:\n",
    "output": "function ide(win, path) {\n    // Create root element\n    const ideRoot = document.createElement('div');\n    ideRoot.classList.add('ide');\n    \n    // Create textarea element\n    const textarea = document.createElement('textarea');\n    textarea.style.width = '100%';\n    textarea.style.height = '500px';\n    \n    // If path is not empty, read file content and set it to textarea\n    if (path) {\n        const content = window.os.fs.getFileContentFromPath(path);\n        if (content) textarea.value = content;\n    }\n    \n    // Create toolbar on win\n    const addButton = window.os.gui.createToolbar(win);\n    \n    // Add buttons on toolbar\n    addButton('\u25b6\ufe0f', () => compile(textarea.value)); // Execute compile on click\n    addButton('\ud83d\udcbe', () => { // Save on click\n        if (path) {\n            window.os.fs.write(path, textarea.value);\n        } else {\n            path = prompt('Please enter a path');\n            if (path) window.os.fs.write(path, textarea.value);\n        }\n    });\n    \n    // Append textarea to root element\n    ideRoot.appendChild(textarea);\n    \n    return ideRoot;\n}\n\n// Register application\nwindow.os.registerApplication('IDE', '\ud83e\udde0', ide, 800, 600, ['script']);\n\n",
    "library": "function ide(win, path) { ... }\n"
}