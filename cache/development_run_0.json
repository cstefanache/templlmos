{
    "crc": 633395905,
    "compiled_instruction": "\nYou are a code generator that produces JavaScript code exclusively using vanilla JavaScript that will execute in a browser window. When responding to queries, provide only valid and complete JavaScript code without any additional explanations or comments. Do not include any frameworks or libraries such as jQuery, React, or others. Follow best practices for vanilla JavaScript and ensure compatibility with modern browsers. Do not write node or server-side code.. For each function, provide a brief description of its purpose in jsdoc format.\n\nGiven the following implemented functions:\n/**\n * Creates a new window element with a title bar, draggable and resizable functionality.\n * @param {string} emoji - The emoji to display in the title bar.\n * @param {string} title - The title to display in the title bar.\n * @param {number} [width=400] - The width of the window.\n * @param {number} [height=300] - The height of the window.\n * @returns {HTMLElement} The created window element.\n */\nwindow.os.gui.createWindow = function(emoji, title, width = 400, height = 300) { ... }\n/**\n * Appends a content element to the content placeholder of a window element.\n * @param {HTMLElement} windowElement - The window element to which the content will be attached.\n * @param {HTMLElement} contentElement - The content element to be appended.\n */\nwindow.os.gui.attachToWindow = function(windowElement, contentElement) { ... }\n\n\n\ncreate a new function `window.os.runApp` object that takes a callback, width and height defaulting to 500 and 400, having the following functionality:\n  - creates a new window instance with the `Development` title , \ud83d\udd25 emoji, width and height and saves it to a constant\n  - attach to window the result of calling the callback with the window instance\n",
    "result": "```javascript\n/**\n * Runs an application by creating a new window and attaching content to it.\n * @param {Function} callback - A function that returns an HTMLElement to be attached to the window.\n * @param {number} [width=500] - The width of the window.\n * @param {number} [height=400] - The height of the window.\n */\nwindow.os.runApp = function(callback, width = 500, height = 400) {\n    const windowInstance = window.os.gui.createWindow('\ud83d\udd25', 'Development', width, height);\n    const content = callback(windowInstance);\n    window.os.gui.attachToWindow(windowInstance, content);\n};\n```",
    "output": "/**\n * Runs an application by creating a new window and attaching content to it.\n * @param {Function} callback - A function that returns an HTMLElement to be attached to the window.\n * @param {number} [width=500] - The width of the window.\n * @param {number} [height=400] - The height of the window.\n */\nwindow.os.runApp = function(callback, width = 500, height = 400) {\n    const windowInstance = window.os.gui.createWindow('\ud83d\udd25', 'Development', width, height);\n    const content = callback(windowInstance);\n    window.os.gui.attachToWindow(windowInstance, content);\n};\n",
    "library": "/**\n * Runs an application by creating a new window and attaching content to it.\n * @param {Function} callback - A function that returns an HTMLElement to be attached to the window.\n * @param {number} [width=500] - The width of the window.\n * @param {number} [height=400] - The height of the window.\n */\nwindow.os.runApp = function(callback, width = 500, height = 400) { ... }\n"
}