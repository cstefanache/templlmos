{
    "crc": 352684811,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n /**\n * Creates a title bar with a title and a close button.\n * @param {HTMLElement} parentElement - The DOM element to append this title bar to.\n * @param {string} title - The title to display in the title bar.\n * @param {function} close - The callback to call when the close button is clicked.\n */\nwindow.os.gui.titleBar = function(parentElement, title, close) { ... }\n\n/**\n * Makes an element draggable by a given handle element.\n * @param {HTMLElement} root - The element to be made draggable.\n * @param {HTMLElement} dragHandleHTMLElement - The handle element to initiate the drag operation.\n */\nwindow.os.gui.makeDraggable = function(root, dragHandleHTMLElement) { ... }\n/**\n* Makes an element resizable by a given handle element.\n* @param {HTMLElement} root - The element to be made resizable.\n* @param {HTMLElement} resizeHandleHTMLElement - The handle element to initiate the resize operation.\n*/\nwindow.os.gui.makeResizable = function(root, resizeHandleHTMLElement) { ... }\n/**\n* Brings the specified DOM node to the front of its siblings.\n* @param {HTMLElement} rootDOMNode - The DOM node to bring to front.\n*/\nwindow.os.gui.bringToFront = function(rootDOMNode) { ... }\n\n/**\n* Create a new window with given emoji, title, width and height.\n* @param {string} emoji - The emoji to display in the window's title bar.\n* @param {string} title - The title to display in the window's title bar.\n* @param {number} [width=400] - The width of the window in pixels.\n* @param {number} [height=300] - The height of the window in pixels.\n* @return {HTMLElement} The root DOM element of the newly created window.\n*/\nwindow.os.gui.createWindow = function(emoji, title, width = 400, height = 300) { ... }\n\n\n Define a function called `attachToWindow` on the `window.os.gui` object that takes two parameters: windowElement and contentElement that takes the contentElement and appends it to the `.contentPlaceholder` of the windowElement \n### Response:\n",
    "output": "/**\n* Attach content to an existing window.\n* @param {HTMLElement} windowElement - The window to attach content to.\n* @param {HTMLElement} contentElement - The content to attach to the window.\n*/\nwindow.os.gui.attachToWindow = function(windowElement, contentElement) {\n    // Find the .contentPlaceholder element in the windowElement\n    var contentPlaceholder = windowElement.querySelector('.contentPlaceholder');\n    \n    // Append the contentElement to the .contentPlaceholder element\n    contentPlaceholder.appendChild(contentElement);\n};\n\n",
    "library": "/**\n* Attach content to an existing window.\n* @param {HTMLElement} windowElement - The window to attach content to.\n* @param {HTMLElement} contentElement - The content to attach to the window.\n*/\nwindow.os.gui.attachToWindow = function(windowElement, contentElement) { ... }\n"
}