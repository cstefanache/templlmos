{
    "crc": 3166493379,
    "compiled_instruction": "\nYou are a code generator that produces JavaScript code exclusively using vanilla JavaScript that will execute in a browser window. When responding to queries, provide only valid and complete JavaScript code without any additional explanations or comments. Do not include any frameworks or libraries such as jQuery, React, or others. Follow best practices for vanilla JavaScript and ensure compatibility with modern browsers. Do not write node or server-side code.\n\nGiven the following implemented functions:\n    /**\n     * Saves the filesystem object to local storage.\n     * @function\n     */\nwindow.os.fs.sync = function() { ... }\n    /**\n     * Processes and returns a path, handling `..`, `//`, and `/`.\n     * @param {string} path - The path to process.\n     * @returns {string|null} - The processed path or null if invalid.\n     */\nwindow.os.fs.getPath = function(path) { ... }\n    /**\n     * Checks if the path is valid.\n     * @param {string} path - The path to check.\n     * @returns {boolean} - True if valid, false otherwise.\n     */\nwindow.os.fs.isValidPath = function(path) { ... }\n    /**\n     * Returns a list of entries in the filesystem object at the given path.\n     * @param {string} path - The path to list entries from.\n     * @returns {Array} - An array of entries.\n     */\nwindow.os.fs.ls = function(path) { ... }\n    /**\n     * Creates an empty object at the given path.\n     * @param {string} path - The path to create the directory.\n     */\nwindow.os.fs.mkdir = function(path) { ... }\n    /**\n     * Removes the object at the given path.\n     * @param {string} path - The path to remove the object from.\n     */\nwindow.os.fs.rm = function(path) { ... }\n    /**\n     * Writes the content to an entry in the filesystem object at the given path.\n     * @param {string} path - The path to write to.\n     * @param {string} content - The content to write.\n     */\nwindow.os.fs.write = function(path, content) { ... }\n    /**\n     * Reads an entry split by `\\n` in the filesystem object at the given path.\n     * @param {string} path - The path to read from.\n     * @returns {string|null} - The content of the file or null if not found.\n     */\nwindow.os.fs.read = function(path) { ... }\n\n/**\n * Registers a new application with the specified title, emoji, callback, dimensions, and optional extensions.\n * @param {string} title - The title of the application.\n * @param {string} emoji - The emoji to display for the application.\n * @param {function} callback - The function to call when the application is executed.\n * @param {number} [width=400] - The width of the application window.\n * @param {number} [height=400] - The height of the application window.\n * @param {Array} [extensions] - An optional array of extensions to register with the application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\nfunction getSlideDOMElement(slides) { ... }\n                    const altText = line.match(/!\\[(.*?)\\]/)[1];\n                    const src = line.match(/\\((.*?)\\)/)[1];\nfunction getPresenterLayout() { ... }\nfunction readFileContentSync(path) { ... }\n\n\ndefine on window.apps namespace a function called presenter  that takes a _ and path string with default value '/itdays.xmd' as arguments\ngets the root element by executing getPresenterLayout and gets .content child as local reference\nexecute readFileContentSync with the argument and store value\nexecute getSlideDOMElement with the stored value split by `---` and append elements of result to the content element\nstarting with index 0, if the user presses arrow keys navigate through the slides by showing the slide at index\nreturns the root element\n",
    "result": "```javascript\nwindow.apps = window.apps || {};\n\nwindow.apps.presenter = function(_, path = '/itdays.xmd') {\n    const rootElement = getPresenterLayout();\n    const contentElement = rootElement.querySelector('.content');\n    const fileContent = readFileContentSync(path);\n    const slides = getSlideDOMElement(fileContent.split('---'));\n    \n    slides.forEach(slide => contentElement.appendChild(slide));\n    \n    let currentIndex = 0;\n    function showSlide(index) {\n        const allSlides = contentElement.children;\n        for (let i = 0; i < allSlides.length; i++) {\n            allSlides[i].style.display = (i === index) ? 'block' : 'none';\n        }\n    }\n    \n    showSlide(currentIndex);\n    \n    window.addEventListener('keydown', function(event) {\n        if (event.key === 'ArrowRight') {\n            currentIndex = Math.min(currentIndex + 1, slides.length - 1);\n            showSlide(currentIndex);\n        } else if (event.key === 'ArrowLeft') {\n            currentIndex = Math.max(currentIndex - 1, 0);\n            showSlide(currentIndex);\n        }\n    });\n    \n    return rootElement;\n};\n```",
    "output": "window.apps = window.apps || {};\n\nwindow.apps.presenter = function(_, path = '/itdays.xmd') {\n    const rootElement = getPresenterLayout();\n    const contentElement = rootElement.querySelector('.content');\n    const fileContent = readFileContentSync(path);\n    const slides = getSlideDOMElement(fileContent.split('---'));\n    \n    slides.forEach(slide => contentElement.appendChild(slide));\n    \n    let currentIndex = 0;\n    function showSlide(index) {\n        const allSlides = contentElement.children;\n        for (let i = 0; i < allSlides.length; i++) {\n            allSlides[i].style.display = (i === index) ? 'block' : 'none';\n        }\n    }\n    \n    showSlide(currentIndex);\n    \n    window.addEventListener('keydown', function(event) {\n        if (event.key === 'ArrowRight') {\n            currentIndex = Math.min(currentIndex + 1, slides.length - 1);\n            showSlide(currentIndex);\n        } else if (event.key === 'ArrowLeft') {\n            currentIndex = Math.max(currentIndex - 1, 0);\n            showSlide(currentIndex);\n        }\n    });\n    \n    return rootElement;\n};\n",
    "library": "window.apps.presenter = function(_, path = '/itdays.xmd') { ... }\n"
}