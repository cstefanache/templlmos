{
    "crc": 4104296185,
    "compiled_instruction": "\nYou are a code generator that produces JavaScript code exclusively using vanilla JavaScript that will execute in a browser window. When responding to queries, provide only valid and complete JavaScript code without any additional explanations or comments. Do not include any frameworks or libraries such as jQuery, React, or others. Follow best practices for vanilla JavaScript and ensure compatibility with modern browsers. Do not write node or server-side code.\n\nGiven the following implemented functions:\n    /**\n     * Saves the filesystem object to local storage.\n     * @function\n     */\nwindow.os.fs.sync = function() { ... }\n    /**\n     * Processes and returns a path, handling '..', '//' and '/'.\n     * @param {string} path - The path to process.\n     * @returns {string|null} - The processed path or null if invalid.\n     */\nwindow.os.fs.getPath = function(path) { ... }\n    /**\n     * Checks if the path is valid.\n     * @param {string} path - The path to check.\n     * @returns {boolean} - True if valid, false otherwise.\n     */\nwindow.os.fs.isValidPath = function(path) { ... }\n    /**\n     * Returns a list of entries in the filesystem object at the given path.\n     * @param {string} path - The path to list entries from.\n     * @returns {Array} - An array of entries.\n     */\nwindow.os.fs.ls = function(path) { ... }\n    /**\n     * Creates an empty object at the given path.\n     * @param {string} path - The path to create the directory at.\n     */\nwindow.os.fs.mkdir = function(path) { ... }\n    /**\n     * Removes the object at the given path.\n     * @param {string} path - The path to remove the object from.\n     */\nwindow.os.fs.rm = function(path) { ... }\n    /**\n     * Writes the content to an entry in the filesystem object at the given path.\n     * @param {string} path - The path to write to.\n     * @param {string} content - The content to write.\n     */\nwindow.os.fs.write = function(path, content) { ... }\n    /**\n     * Reads an entry split by '\\n' in the filesystem object at the given path.\n     * @param {string} path - The path to read from.\n     * @returns {Array|null} - An array of lines or null if not found.\n     */\nwindow.os.fs.read = function(path) { ... }\n\nfunction getSlideDOMElement(slides) { ... }\n                const altText = line.match(/!\\[(.*?)\\]/)[1];\n                const src = line.match(/\\((.*?)\\)/)[1];\nfunction getPresenterLayout() { ... }\nfunction readFileContent(path) { ... }\n\n\ndefine a function called presenter on window.apps that takes a string as an argument with default value '/itdays.md'\ngets the root element by executing getPresenterLayout and gets .content child as local reference\nexecute readFileContent with the argument and store value\nexecute getSlideDOMElement with the stored value split by `---` and append elements of result to the content element\nstarting with index 0, if the user presses arrow keys navigate through the slides by showing the slide at index\nappend the root element to the body\n",
    "output": "window.apps = window.apps || {};\n\nwindow.apps.presenter = function(path = '/itdays.md') {\n    const rootElement = getPresenterLayout();\n    const contentElement = rootElement.querySelector('.content');\n    const fileContent = readFileContent(path);\n    const slides = getSlideDOMElement(fileContent.split('---'));\n    \n    slides.forEach(slide => contentElement.appendChild(slide));\n    \n    let currentIndex = 0;\n    function showSlide(index) {\n        const allSlides = contentElement.children;\n        for (let i = 0; i < allSlides.length; i++) {\n            allSlides[i].style.display = (i === index) ? 'block' : 'none';\n        }\n    }\n    \n    showSlide(currentIndex);\n    \n    window.addEventListener('keydown', function(event) {\n        if (event.key === 'ArrowRight') {\n            currentIndex = (currentIndex + 1) % slides.length;\n            showSlide(currentIndex);\n        } else if (event.key === 'ArrowLeft') {\n            currentIndex = (currentIndex - 1 + slides.length) % slides.length;\n            showSlide(currentIndex);\n        }\n    });\n    \n    document.body.appendChild(rootElement);\n};\n",
    "library": "window.apps.presenter = function(path = '/itdays.md') { ... }\n"
}