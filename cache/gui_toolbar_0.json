{
    "crc": 467480900,
    "compiled_instruction": [
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\n\n\n Define a function called `createToolbar` on the `window.os.gui` object that takes one parameter `win`\n- create a root DOM element with the class `.toolbar`\n- append the root DOM element to the `.toolbarPlaceholder` from `win` parameter\n- return an object with the following functions:\n  - addButton(text, callback) - add a button to the root DOM element with the text parameter and call the callback when the button is clicked \n### Response:\n"
    ],
    "output": [
        "// Assuming os.gui is already defined as an object\nif (typeof window.os === 'undefined') window.os = {};\nif (typeof window.os.gui === 'undefined') window.os.gui = {};\n\n// Function to create toolbar\nwindow.os.gui.createToolbar = function(win) {\n    // Create root DOM element with class .toolbar\n    var toolbar = document.createElement('div');\n    toolbar.className = 'toolbar';\n    \n    // Append root DOM element to .toolbarPlaceholder from win parameter\n    win.querySelector('.toolbarPlaceholder').appendChild(toolbar);\n    \n    // Return an object with addButton function\n    return {\n        addButton: function(text, callback) {\n            // Create button element\n            var button = document.createElement('button');\n            button.textContent = text;\n            \n            // Add click event listener to button\n            button.addEventListener('click', callback);\n            \n            // Append button to toolbar\n            toolbar.appendChild(button);\n        }\n    };\n};\n\n"
    ],
    "library": "This JavaScript function creates a toolbar with buttons and attaches them to a specified HTML element. The toolbar and buttons are created using DOM manipulation methods provided by JavaScript. The function returns an object with a method `addButton`, which allows you to add buttons to the toolbar with custom text and click event callbacks. \n\nHere's how you can use this function in your code:\n\n```javascript\n// Assume you have a reference to your window or iframe here\nvar myWindow = ...; \n\n// Create toolbar instance\nvar toolbarInstance = os.gui.createToolbar(myWindow); \n\n// Add buttons to toolbar\ntoolbarInstance.addButton('Button 1', function() {\n    console.log('Button 1 clicked');\n});\ntoolbarInstance.addButton('Button 2', function() {\n    console.log('Button 2 clicked');\n});\ntoolbarInstance.addButton('Button 3', function() {\n    console.log('Button 3 clicked');\n});\n```\nIn this example, we first create a toolbar instance using `os.gui.createToolbar` and pass in our target window or iframe reference `myWindow`. Then we add three buttons to the toolbar with custom text and click event callbacks. The callbacks will be executed when their respective buttons are clicked, and will log a message to the console indicating which button was clicked. \n\nPlease replace `myWindow` with your actual reference to your HTML element where you want to add the toolbar.\n\n```",
    "library_input": "### Instruction:\nYou are a javascript developer that documents all the declared functions by providing sample usage.\n```\n // Assuming os.gui is already defined as an object\nif (typeof window.os === 'undefined') window.os = {};\nif (typeof window.os.gui === 'undefined') window.os.gui = {};\n\n// Function to create toolbar\nwindow.os.gui.createToolbar = function(win) {\n    // Create root DOM element with class .toolbar\n    var toolbar = document.createElement('div');\n    toolbar.className = 'toolbar';\n    \n    // Append root DOM element to .toolbarPlaceholder from win parameter\n    win.querySelector('.toolbarPlaceholder').appendChild(toolbar);\n    \n    // Return an object with addButton function\n    return {\n        addButton: function(text, callback) {\n            // Create button element\n            var button = document.createElement('button');\n            button.textContent = text;\n            \n            // Add click event listener to button\n            button.addEventListener('click', callback);\n            \n            // Append button to toolbar\n            toolbar.appendChild(button);\n        }\n    };\n};\n\n \n```\n### Response:\n"
}