{
    "crc": 2364904653,
    "compiled_instruction": "\nYou are a code generator that produces JavaScript code exclusively using vanilla JavaScript that will execute in a browser window. When responding to queries, provide only valid and complete JavaScript code without any additional explanations or comments. Do not include any frameworks or libraries such as jQuery, React, or others. Follow best practices for vanilla JavaScript and ensure compatibility with modern browsers. Do not write node or server-side code.\n\nGiven the following implemented functions:\n    /**\n     * Saves the filesystem object to local storage.\n     * @function\n     */\nwindow.os.fs.sync = function() { ... }\n    /**\n     * Processes and returns a path, handling '..', '//' and '/'.\n     * @param {string} path - The path to process.\n     * @returns {string|null} - The processed path or null if invalid.\n     */\nwindow.os.fs.getPath = function(path) { ... }\n    /**\n     * Checks if the path is valid.\n     * @param {string} path - The path to check.\n     * @returns {boolean} - True if valid, false otherwise.\n     */\nwindow.os.fs.isValidPath = function(path) { ... }\n    /**\n     * Returns a list of entries in the filesystem object at the given path.\n     * @param {string} path - The path to list entries from.\n     * @returns {Array} - An array of entries.\n     */\nwindow.os.fs.ls = function(path) { ... }\n    /**\n     * Creates an empty object at the given path.\n     * @param {string} path - The path to create the directory at.\n     */\nwindow.os.fs.mkdir = function(path) { ... }\n    /**\n     * Removes the object at the given path.\n     * @param {string} path - The path to remove the object from.\n     */\nwindow.os.fs.rm = function(path) { ... }\n    /**\n     * Writes the content to an entry in the filesystem object at the given path.\n     * @param {string} path - The path to write to.\n     * @param {string} content - The content to write.\n     */\nwindow.os.fs.write = function(path, content) { ... }\n    /**\n     * Reads an entry split by '\\n' in the filesystem object at the given path.\n     * @param {string} path - The path to read from.\n     * @returns {Array|null} - An array of lines or null if not found.\n     */\nwindow.os.fs.read = function(path) { ... }\n\n/**\n * Registers a new application with a title, emoji, callback, dimensions, and optional extensions.\n * @param {string} title - The title of the application.\n * @param {string} emoji - The emoji to display for the application.\n * @param {Function} callback - The function to call when the application is executed.\n * @param {number} [width=400] - The width of the application window.\n * @param {number} [height=400] - The height of the application window.\n * @param {Array} [extensions=undefined] - An optional array of extensions to register with the application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions = undefined) { ... }\n\n/**\n * Creates a toolbar and appends it to the specified window element.\n * @param {HTMLElement} win - The window element to which the toolbar will be appended.\n * @returns {function(string, function): void} - A function to add buttons to the toolbar.\n */\nwindow.os.gui.createToolbar = function(win) { ... }\n    /**\n     * Adds a button to the toolbar.\n     * @param {string} text - The text to display on the button.\n     * @param {function} callback - The function to call when the button is clicked.\n     */\n\n/**\n * Displays a notification with the given message.\n * @param {string} message - The message to display in the notification.\n */\nwindow.os.gui.notification = function(message) { ... }\n\n\n\ncreate a local photoBooth function that takes a window parameter:\n- create a root dom element, do not style it\n - create toolbar on the `window` parameter\n- append browser webcam capture video element with autoplay on\n- add a button to the toolbar with `\ud83d\udcf8` text that takes an image snapshot of the video and saves it to 'photobooth/image+{timestamp}.png' and notify the user: 'Snapshot saved to {path}'\n- return root dom element\n",
    "output": "function photoBooth(win) {\n    const root = document.createElement('div');\n    const toolbar = window.os.gui.createToolbar(win);\n    \n    const video = document.createElement('video');\n    video.autoplay = true;\n    root.appendChild(video);\n    \n    navigator.mediaDevices.getUserMedia({ video: true })\n        .then(stream => {\n            video.srcObject = stream;\n        })\n        .catch(error => {\n            console.error('Error accessing webcam:', error);\n        });\n\n    toolbar('\ud83d\udcf8', () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        const context = canvas.getContext('2d');\n        context.drawImage(video, 0, 0);\n        \n        const timestamp = Date.now();\n        const path = `photobooth/image+${timestamp}.png`;\n        canvas.toBlob(blob => {\n            const reader = new FileReader();\n            reader.onloadend = () => {\n                window.os.fs.write(path, reader.result);\n                window.os.gui.notification(`Snapshot saved to ${path}`);\n            };\n            reader.readAsDataURL(blob);\n        });\n    });\n\n    return root;\n}\n",
    "library": "function photoBooth(win) { ... }\n"
}