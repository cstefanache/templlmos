{
    "crc": 3382767012,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n /**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() { ... }\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) { ... }\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) { ... }\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') { ... }\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) { ... }\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) { ... }\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) { ... }\n\n/**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions to register for this application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\nwindow.os.gui.notification = function(message) { ... }\n\n\n\n create a local photoBooth function that takes no parameters:\n- create a root dom element, do not style it\n- append browser webcam capture video element with autoplay on\n- add a button with text 'Take Snapshot' that takes an image snapshot of the video and saves it to 'photobooth/image+{timestamp}.png' and notify the user: 'Snapshot saved to {path}'\n- return root dom element \n### Response:\n",
    "output": "function createPhotoBooth() {\n    // Create root DOM element\n    const rootElement = document.createElement('div');\n    \n    // Append video element with autoplay on\n    const videoElement = document.createElement('video');\n    videoElement.autoplay = true;\n    videoElement.width = 400; // Set width of video element\n    videoElement.height = 300; // Set height of video element\n    rootElement.appendChild(videoElement);\n    \n    // Add button with text 'Take Snapshot'\n    const buttonElement = document.createElement('button');\n    buttonElement.innerText = 'Take Snapshot';\n    buttonElement.onclick = () => takeSnapshot(videoElement); // Call takeSnapshot function when button is clicked\n    rootElement.appendChild(buttonElement);\n    \n    // Request access to camera\n    navigator.mediaDevices.getUserMedia({ video: true })\n        .then(stream => videoElement.srcObject = stream)\n        .catch(err => console.error('Error accessing camera', err));\n    \n    return rootElement;\n}\n\nfunction takeSnapshot(videoElement) {\n    // Create canvas element\n    const canvasElement = document.createElement('canvas');\n    canvasElement.width = videoElement.videoWidth; // Set width of canvas element to match video element's width\n    canvasElement.height = videoElement.videoHeight; // Set height of canvas element to match video element's height\n    \n    // Draw video frame on canvas\n    const context = canvasElement.getContext('2d');\n    context.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);\n    \n    // Convert canvas image to data URL\n    const imageDataUrl = canvasElement.toDataURL('image/png');\n    \n    // Generate timestamp for filename\n    const timestamp = Date.now();\n    \n    // Generate path for image save\n    const path = `photobooth/image+${timestamp}.png`;\n    \n    // Save image data URL to file\n    window.os.fs.write(path, imageDataUrl);\n    \n    // Notify user of successful save\n    window.os.gui.notification(`Snapshot saved to ${path}`);\n}\n\n",
    "library": "function createPhotoBooth() { ... }\nfunction takeSnapshot(videoElement) { ... }\n"
}