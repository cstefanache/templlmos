{
    "crc": 244932173,
    "compiled_instruction": [
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\nGiven the following examples:\n This JavaScript code defines a `registerApplication` function on the `os` object of the `window` object. This function is used to register an application with the operating system. \n\nHere's how you can use it:\n\n```javascript\n// Assume window.os.gui and window.os.addApp and window.os.registerExtension are already defined elsewhere in your code\n\n// Define your application's title, emoji and callback function\nconst title = \"My App\";\nconst emoji = \"\ud83d\ude80\";\nconst callback = (appWindow, param1, param2) => {\n  // Your code here to create and return content for your application window\n};\nconst width = 800;  // Optional, default is 400\nconst height = 600;  // Optional, default is 400\nconst extensions = [\"ext1\", \"ext2\"];  // Optional, default is undefined\n\n// Register your application with the operating system\nwindow.os.registerApplication(title, emoji, callback, width, height, extensions);\n```\n\nIn this example, `callback` is a function that is called when your application is launched and is responsible for creating and returning content for your application window. The `appWindow` parameter is an instance of your application window and `param1` and `param2` are additional parameters passed to your `callback` function when your application is launched. \n\nThe `width` and `height` parameters specify the initial size of your application window and they default to 400 if not provided. \n\nThe `extensions` parameter is an optional array of extension names to be registered with your application. If provided, each extension will be registered with your application's `emoji` and `execute` function. \n\nFinally, `window.os.addApp` is called with your application's `emoji`, `title` and `execute` function to add your application to the operating system's list of applications. \n\nThis is just an example of how you might use this `registerApplication` function in your code. The actual implementation of `window.os.gui`, `window.os.addApp` and `window.os.registerExtension` would depend on how these functions and objects are defined elsewhere in your code.\n\n```\n\n Create an `application` function that takes a parent parameter having the following functionality:\n - create a root dom element with class `chat`\n - create an input element with 100% width with keyup event listener that on enter key press:\n   - save the input value to instruction variable and clear the input\n   - POST the json having instruction and full as false to `http://localhost:8080`, on response add a script tag to the body with id `run-script` and add the response text content to the script tag\n - return dom element\ncall register application with 'Run' title, \u25b6\ufe0f as emoji, already defined `application` function reference and 400x70 size \n### Response:\n"
    ],
    "output": [
        "// Define your application's title, emoji and callback function\nconst title = \"Run\";\nconst emoji = \"\u25b6\ufe0f\";\nconst width = 400;\nconst height = 70;\nlet instruction = \"\";\n\nconst application = (parent) => {\n  // Create root DOM element with class 'chat'\n  const root = document.createElement('div');\n  root.className = 'chat';\n  parent.appendChild(root);\n\n  // Create input element with 100% width\n  const input = document.createElement('input');\n  input.style.width = '100%';\n  root.appendChild(input);\n\n  // Add keyup event listener to input element\n  input.addEventListener('keyup', (event) => {\n    if (event.key === 'Enter') {\n      // Save input value to instruction variable and clear input\n      instruction = event.target.value;\n      event.target.value = '';\n      \n      // POST instruction to server\n      fetch('http://localhost:8080', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ instruction: instruction, full: false })\n      })\n      .then(response => response.text())\n      .then(data => {\n        // Add script tag to body with id 'run-script' and add response text content to script tag\n        const script = document.createElement('script');\n        script.id = 'run-script';\n        script.textContent = data;\n        document.body.appendChild(script);\n      })\n      .catch(error => console.error('Error:', error));\n    }\n  });\n  \n  return root;\n};\n\n// Register your application with the operating system\nwindow.os.registerApplication(title, emoji, application, width, height);\n\n"
    ]
}