{
    "crc": 4098108778,
    "compiled_instruction": [
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\nGiven the following examples:\n This JavaScript code defines a function `createWindow` in the `window.os.gui` namespace. This function creates a new window with customizable parameters such as emoji, title, width, and height. The created window includes elements like title bar, toolbar, content area, status bar, and resize handle. The function also includes functionality to make the window draggable and resizable using specific elements in the DOM. The created window is then positioned in the center of the document and returned as the root DOM node.\n\nHere is how you can use this function in your code:\n\n```javascript\n// Create new window with emoji, title, width, and height\nvar newWindow = window.os.gui.createWindow('\ud83d\udda5\ufe0f', 'My Window', 600, 400);\n```\n\nIn this example, a new window with an emoji of '\ud83d\udda5\ufe0f', title 'My Window', width of 600 pixels, and height of 400 pixels is created and returned as `newWindow`. You can then manipulate this `newWindow` object in your code as needed. Please note that this code assumes that other necessary functions like `bringToFront`, `titleBar`, `makeDraggable`, and `makeResizable` have been defined elsewhere in your codebase.\n\n```This JavaScript code defines a function named `attachToWindow` within the `os.gui` namespace of the `window` object. This function takes two arguments, `windowElement` and `contentElement`, and attaches `contentElement` to `.contentPlaceholder` of `windowElement`. Here's how you can use this function:\n\n```javascript\n// Assume we have an HTML element with class 'contentPlaceholder' in our window\nvar myWindow = document.getElementById('myWindow');\n\n// Assume we have an HTML element we want to attach to our window\nvar myContent = document.getElementById('myContent');\n\n// Call attachToWindow with our elements\nwindow.os.gui.attachToWindow(myWindow, myContent);\n```\nIn this example, `myContent` will be appended to `myWindow`'s `contentPlaceholder`. The `contentPlaceholder` is selected using `querySelector`, which returns the first element in the document that matches the specified selector, or null if no matches found. The `appendChild` method adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, `appendChild` moves it from its current position to the new position.\n\n```\n\n create a new function `runApp` on the `window.os` object that takes a callback, width and height defaulting to 500 and 400, having the following functionality:\n  - creates a new window instance with the `Development` title , \ud83d\udd25 emoji, width and height and saves it to a constant\n  - attach to window the result of calling the callback with the window instance \n### Response:\n"
    ],
    "output": [
        "// Define runApp on os object\nwindow.os.runApp = function(callback, width = 500, height = 400) {\n    // Create new window instance with 'Development' title , '\ud83d\udd25' emoji, width and height\n    const appWindow = window.os.gui.createWindow('\ud83d\udd25', 'Development', width, height);\n    \n    // Attach to window the result of calling the callback with the window instance \n    const content = callback(appWindow);\n    window.os.gui.attachToWindow(appWindow, content);\n};\n\n"
    ],
    "library": "This JavaScript code defines a method `runApp` on the `os` object of `window`. This method takes two optional parameters `width` and `height` with default values of `500` and `400` respectively. The third parameter is a callback function which is expected to take an `appWindow` as an argument and return some content to be attached to this window.\n\nHere is how you can use this method in your code:\n\n```javascript\nwindow.os.runApp((appWindow) => {\n    return '<h1>Hello World</h1>';   // This is just an example, replace it with your actual content or DOM element\n}, 800, 600);   // You can also override default width and height here\n```\nIn this example, `'<h1>Hello World</h1>'` is the content to be attached to the window created by `runApp` method. The `800` and `600` passed as arguments override the default `width` and `height` respectively. The `appWindow` is passed to the callback as an argument and can be used to manipulate or interact with this window in your callback logic.\n\n```",
    "library_input": "### Instruction:\nYou are a javascript developer that documents all the declared functions by providing sample usage.\n```\n // Define runApp on os object\nwindow.os.runApp = function(callback, width = 500, height = 400) {\n    // Create new window instance with 'Development' title , '\ud83d\udd25' emoji, width and height\n    const appWindow = window.os.gui.createWindow('\ud83d\udd25', 'Development', width, height);\n    \n    // Attach to window the result of calling the callback with the window instance \n    const content = callback(appWindow);\n    window.os.gui.attachToWindow(appWindow, content);\n};\n\n \n```\n### Response:\n"
}