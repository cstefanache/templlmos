{
    "crc": 619294680,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n \n\n Load the `filesystem` object from the local storage as json\nDefine the `window.os.fs` object and define the following functions on it (remove leading and trailing `/` from the path):\n- `window.os.fs.sync` function that save the `filesystem` object to the local storage.\n- `window.os.fs.getFileContentFromPath` function that returns the content of the entry in the `filesystem` object at the given path. path should be split by `/` and the method should traverse the `filesystem` object and return the value at path (allow undefined or empty string). if the path starts with `/` remove the leading `/`\n- `window.os.fs.write` function that writes the content to an entry in the `filesystem` object at the given path and file name. in the end execute the `sync` method.\n- `window.os.fs.ls` function that returns a list of entries in the `filesystem` object at the given path. if path is empty or not found, return the root entries.\n- `window.os.fs.mkdir` function that creates a new directory in the `filesystem` object at the given path and directory name. in the end execute the `sync` method.\n- `window.os.fs.rm` function that removes the object at the given path and file name. in the end execute the `sync` method.\n- `window.os.fs.isFile` function that returns true the entry at the given path is a string. \n### Response:\n",
    "output": "// Load the filesystem object from localStorage\nlet filesystem = JSON.parse(localStorage.getItem('filesystem')) || {};\n\n// Define window.os.fs\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.fs) {\n    window.os.fs = {};\n}\n\n/**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() {\n    localStorage.setItem('filesystem', JSON.stringify(filesystem));\n}\n\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            return undefined;\n        }\n        current = current[dir];\n    }\n    return typeof current === 'string' ? current : undefined;\n}\n\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path.slice(0, -1)) {\n        if (!current[dir]) {\n            current[dir] = {};\n        }\n        current = current[dir];\n    }\n    current[path[path.length - 1]] = content;\n    this.sync();\n}\n\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            return Object.keys(filesystem);\n        }\n        current = current[dir];\n    }\n    return Object.keys(current);\n}\n\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            current[dir] = {};\n        }\n        current = current[dir];\n    }\n    this.sync();\n}\n\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    let parent = filesystem;\n    for (let dir of path.slice(0, -1)) {\n        if (!current[dir]) {\n            return; // Path not found\n        }\n        parent = current;\n        current = current[dir];\n    }\n    delete parent[path[path.length - 1]];\n    this.sync();\n}\n\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) {\n    path = path.replace(/^\\/|\\/$/g, '').split('/');\n    let current = filesystem;\n    for (let dir of path) {\n        if (!current[dir]) {\n            return false; // Path not found or not a file\n        }\n        current = current[dir];\n    }\n    return typeof current === 'string'; // Check if current is a string (file)\n}\n\n",
    "library": "/**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() { ... }\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) { ... }\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) { ... }\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') { ... }\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) { ... }\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) { ... }\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) { ... }\n"
}