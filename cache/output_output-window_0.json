{
    "crc": 3995181262,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n \n\n crate a root container div element having the class `output-wrapper` and id `output-wrapper`\ncreate and append to root container a pre element having the class `output` and id `output`\ncreate an internal function that fetches the content from 'http://localhost:8080/output' and sets the innerHTML of the output div to the fetched content\ncalls http://localhost:8080/ping and if the response is 200 then set an interval to call the internal function every 1000ms \n### Response:\n",
    "output": "// Create root container div element\nlet outputWrapper = document.createElement('div');\noutputWrapper.className = 'output-wrapper';\noutputWrapper.id = 'output-wrapper';\ndocument.body.appendChild(outputWrapper);\n\n// Create pre element\nlet output = document.createElement('pre');\noutput.className = 'output';\noutput.id = 'output';\noutputWrapper.appendChild(output);\n\n// Internal function to fetch content from 'http://localhost:8080/output'\nasync function fetchContent() {\n    try {\n        let response = await fetch('http://localhost:8080/output');\n        let data = await response.text();\n        output.innerHTML = data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\n// Call http://localhost:8080/ping\nfetch('http://localhost:8080/ping')\n    .then(response => {\n        if (response.status === 200) {\n            // If response is 200, set an interval to call fetchContent every 1000ms\n            setInterval(fetchContent, 1000);\n        } else {\n            console.error('Ping failed with status', response.status);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n\n",
    "library": ""
}