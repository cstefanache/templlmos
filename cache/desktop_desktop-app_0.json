{
    "crc": 673554868,
    "compiled_instruction": [
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\nGiven the following examples:\n This JavaScript function creates an icon with an emoji and title and attaches a click event listener to it. The function is stored in `window.os` under the name `icon`. \n\nHere's how you can use this function:\n\n```javascript\nwindow.os.icon(document.body, '\ud83d\ude00', 'Smiling Face', function() {\n  console.log('Icon clicked');\n});\n```\nIn this example, an icon with an emoji of '\ud83d\ude00', title 'Smiling Face', and a callback function that logs 'Icon clicked' when clicked, is created and appended to `document.body`. \n\nThe `parent` parameter is the parent element where you want to append this new icon. The `emoji` parameter is the emoji you want to display in your icon. The `title` parameter is the text you want to display in your icon. The `callback` parameter is a function you want to execute when this icon is clicked. \n\nThis function creates an HTML structure like this: \n\n```html\n<div class=\"icon\">\n  <span class=\"emoji\">\ud83d\ude00</span>\n  <span class=\"title\">Smiling Face</span>\n</div>\n```\nAnd then attaches an event listener to this `div` element so when you click on this `div`, your callback function will be executed. \n\nPlease note that this function does not return anything (it returns `undefined`), so you cannot assign its result to any variable or use it in any arithmetic expressions or conditions. If you want to use its result (which is `undefined`), you should pass a function as `callback` parameter and handle its result inside this function.\n\n```\n\n Define a function called `addApp` on `window.os` namespace that takes four parameters: emoji, title and a callback:\n- call `icon` with element at `#desktop_content`, emoji, title and the callback as parameters \n### Response:\n"
    ],
    "output": [
        "window.os = window.os || {}; // If window.os doesn't exist, create it\nwindow.os.addApp = function(emoji, title, callback) {\n  window.os.icon(document.querySelector('#desktop_content'), emoji, title, callback);\n};\n\n"
    ],
    "library": "Sure, here is how you can use this `window.os.addApp` function:\n\n```javascript\n// Define your emoji, title and callback function\nvar emoji = '\ud83d\ude80';\nvar title = 'My App';\nvar callback = function() {\n  console.log('Callback called');\n};\n\n// Call addApp function with emoji, title and callback as arguments\nwindow.os.addApp(emoji, title, callback);\n```\n\nIn this example, `emoji` is '\ud83d\ude80', `title` is 'My App', and `callback` is an anonymous function that logs 'Callback called'. These values can be replaced with your own values as needed. The `window.os.addApp` function will then use these values to add an application to your desktop. The specifics of how this is done will depend on how your `icon` function is implemented. \n\nPlease note that this is just an example and you may need to adjust this code to fit your specific needs or environment.\n\n```",
    "library_input": "### Instruction:\nYou are a javascript developer that documents all the declared functions by providing sample usage.\n```\n window.os = window.os || {}; // If window.os doesn't exist, create it\nwindow.os.addApp = function(emoji, title, callback) {\n  window.os.icon(document.querySelector('#desktop_content'), emoji, title, callback);\n};\n\n \n```\n### Response:\n"
}