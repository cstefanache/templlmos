{
    "crc": 1668076867,
    "compiled_instruction": [
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\nGiven the following examples:\n This JavaScript function creates a title bar with a title and a close button. The title bar is appended to the parent element provided as an argument to the function. \n\nHere's how you can use this function in your code:\n\n```javascript\n// Get some element to serve as parent for title bar\nvar parentElement = document.getElementById('myElementId'); \n\n// Define what should happen when close button is clicked\nvar closeFunction = function() { \n  // Your code here to handle close event \n}; \n\n// Call titleBar function to create title bar \nwindow.os.gui.titleBar(parentElement, 'My Title', closeFunction); \n```\nIn this example, we first get an element with id 'myElementId' and store it in `parentElement` variable. Then we define `closeFunction` which will be called when close button is clicked. Finally, we call `titleBar` function with `parentElement`, 'My Title' and `closeFunction` as arguments to create title bar with specified title and close event handler. \n\nPlease replace 'My Title' and `closeFunction` with your own values as per your requirements. The `closeFunction` should be defined to handle close event as per your application's logic. \n\nThis function does not return any value, it only creates and appends DOM elements to parent element. If you want to manipulate created elements later, you should store them in variables and use them as needed.\n\n```This JavaScript function `makeDraggable` is used for making an HTML element draggable. It takes two parameters - `root` which is the HTML element you want to make draggable and `dragHandleHTMLElement` which is the HTML element you want to use as the drag handle (the element you click on to start dragging). \n\nHere's how you can use this function in your code:\n\n```javascript\n// Assuming you have an element with id 'myElement' as root and an element with id 'myDragHandle' as drag handle\nvar root = document.getElementById('myElement');\nvar dragHandle = document.getElementById('myDragHandle');\n\n// Call makeDraggable function with root element and drag handle element as arguments\nwindow.os.gui.makeDraggable(root, dragHandle);\n```\n\nThis will make the element with id 'myElement' draggable using the element with id 'myDragHandle' as the drag handle. The element will move in relation to its original position when you start dragging. \n\nPlease note that this function uses event listeners for 'mousedown', 'mousemove', and 'mouseup' events which means you don't have to manually add these event listeners in your HTML code. The function will automatically handle these events for you. \n\nAlso note that this function does not handle cases where the drag handle is moved outside of its parent container or goes off-screen. You may want to add additional logic for these cases depending on your specific needs.\n\n```This JavaScript function is used to make an element resizable by adding mouse events to a resize handle element. The function takes two parameters - `root` and `resizeHandleElement`. \n\n- `root` is the element you want to make resizable, typically this would be an element with a set width and height, such as a div or an image. \n- `resizeHandleElement` is the element you want to use as the resize handle, typically this would be an element with a specific class or id, such as an arrow or dot icon. \n\nHere is how you can use this function in your code:\n\n```javascript\n// Assuming you have an element with id \"myElement\" and another element with id \"resizeHandle\"\nvar rootElement = document.getElementById(\"myElement\");\nvar resizeHandleElement = document.getElementById(\"resizeHandle\");\n\n// Call makeResizable function with root and resizeHandle elements as arguments\nwindow.os.gui.makeResizable(rootElement, resizeHandleElement);\n```\n\nIn this example, when you click and drag on the `resizeHandleElement`, the `rootElement` will resize according to your mouse movements, creating an effect of being resizable. The resizing is done by changing the width and height of the `rootElement` using JavaScript's `style` property, which allows for dynamic changes to element dimensions. \n\nPlease note, this function does not handle cases where the resized element would go off-screen or overlap other elements on your page, so you may need to add additional logic to handle these cases as needed.\n\n```This JavaScript code defines a function `bringToFront` in `window.os.gui` namespace, which brings a given DOM node to front of other nodes with same class name when it's mousedown event is triggered. \n\nHere's how you can use this function:\n\n```javascript\nvar myDomNode = document.getElementById('myElement');  // Assume 'myElement' exists in your HTML document\nwindow.os.gui.bringToFront(myDomNode);  // Calling function with DOM node as argument\n```\nIn this example, when `myDomNode` (which you get from `document.getElementById('myElement')`) is mousedown, it will set z-index of all other DOM nodes with same class name as `myDomNode` to 0, effectively bringing them to front of other elements in the z-axis stacking order. \n\nPlease note, `bringToFront` function assumes that your DOM nodes have class names set, and you want to bring other nodes with same class name to front when you click on one of them. If your DOM nodes don't have class names, or you want to bring other nodes with different class names to front, you would need to modify `setZIndexToZero` function inside `bringToFront` function accordingly. \n\nAlso, `bringToFront` function sets z-index of `rootDomNode` to 1, so it will be on top of other nodes with same class name when they're created or added after `bringToFront` function call. If you want `rootDomNode` to be on top of other nodes regardless of their initial z-index, you would need to set `rootDomNode`'s z-index to 2 or more in CSS or use `bringToFront` function with `rootDomNode`'s class name instead of `rootDomNode` itself. \n\nThis function doesn't return anything, so you can't use it's return value in any way. It's just a side effect of setting z-index of DOM nodes. \n\nPlease replace `'myElement'` with your actual element id in your HTML document.\n\n```\n\n Define a function called `createWindow` on the `window.os.gui` object that takes four parameters: emoji, title, width and height that are defaulting to 400 and 300, respectively if not passed and have the following functionality:\n- create a root DOM element with the class `.window`, set the width and height only, and add it to document body in the middle of the document\n- call bringToFront on the root element\n- add and empty div with class `titlePlaceholder` to the root DOM element\n- add and empty div with class `toolbarPlaceholder` to the root DOM element\n- add and empty div with class `contentPlaceholder` to the root DOM element\n- add and empty div with class `statusPlaceholder` to the root DOM element\n- add a resize handle to the root DOM element with class `resizeHandle`\n- add titleBar to `.titlePlaceholder` having the text `emoji + title` and close callback removes root DOM element from the document body\n- make root element draggable by the `.titlePlaceholder` element\n- make root element resizable by the `resizeHandle` element\n- set root DOM element left position document width divided by 2 minus width divided by 2\n- set root DOM element top position document height divided by 2 minus height divided by 2\n- return root DOM element \n### Response:\n"
    ],
    "output": [
        "window.os.gui = window.os.gui || {};  // Initialize namespace if it doesn't exist\nwindow.os.gui.createWindow = function(emoji = '\ud83d\udda5\ufe0f', title = 'Window', width = 400, height = 300) {\n    // Create root DOM element\n    var root = document.createElement('div');\n    root.className = 'window';\n    root.style.width = width + 'px';\n    root.style.height = height + 'px';\n    document.body.appendChild(root);\n    \n    // Bring root DOM node to front when mousedown event is triggered\n    window.os.gui.bringToFront(root);\n    \n    // Create placeholder divs for title, toolbar, content and status\n    ['titlePlaceholder', 'toolbarPlaceholder', 'contentPlaceholder', 'statusPlaceholder'].forEach(function(className) {\n        var placeholder = document.createElement('div');\n        placeholder.className = className;\n        root.appendChild(placeholder);\n    });\n    \n    // Create resize handle\n    var resizeHandle = document.createElement('div');\n    resizeHandle.className = 'resizeHandle';\n    root.appendChild(resizeHandle);\n    \n    // Create titleBar\n    window.os.gui.titleBar(root.querySelector('.titlePlaceholder'), emoji + ' ' + title, function() {\n        document.body.removeChild(root);  // Remove root DOM node from document body when close button is clicked\n    });\n    \n    // Make window draggable by title placeholder\n    window.os.gui.makeDraggable(root, root.querySelector('.titlePlaceholder'));\n    \n    // Make window resizable by resize handle\n    window.os.gui.makeResizable(root, resizeHandle);\n    \n    // Position window in center of document\n    root.style.position = 'absolute';\n    root.style.left = (window.innerWidth / 2 - width / 2) + 'px';\n    root.style.top = (window.innerHeight / 2 - height / 2) + 'px';\n    \n    return root;  // Return root DOM node\n};\n\n"
    ],
    "library": "This JavaScript code defines a function `createWindow` in the `window.os.gui` namespace. This function creates a new window with customizable parameters such as emoji, title, width, and height. The created window includes elements like title bar, toolbar, content area, status bar, and resize handle. The function also includes functionality to make the window draggable and resizable using specific elements in the DOM. The created window is then positioned in the center of the document and returned as the root DOM node.\n\nHere is how you can use this function in your code:\n\n```javascript\n// Create new window with emoji, title, width, and height\nvar newWindow = window.os.gui.createWindow('\ud83d\udda5\ufe0f', 'My Window', 600, 400);\n```\n\nIn this example, a new window with an emoji of '\ud83d\udda5\ufe0f', title 'My Window', width of 600 pixels, and height of 400 pixels is created and returned as `newWindow`. You can then manipulate this `newWindow` object in your code as needed. Please note that this code assumes that other necessary functions like `bringToFront`, `titleBar`, `makeDraggable`, and `makeResizable` have been defined elsewhere in your codebase.\n\n```",
    "library_input": "### Instruction:\nYou are a javascript developer that documents all the declared functions by providing sample usage.\n```\n window.os.gui = window.os.gui || {};  // Initialize namespace if it doesn't exist\nwindow.os.gui.createWindow = function(emoji = '\ud83d\udda5\ufe0f', title = 'Window', width = 400, height = 300) {\n    // Create root DOM element\n    var root = document.createElement('div');\n    root.className = 'window';\n    root.style.width = width + 'px';\n    root.style.height = height + 'px';\n    document.body.appendChild(root);\n    \n    // Bring root DOM node to front when mousedown event is triggered\n    window.os.gui.bringToFront(root);\n    \n    // Create placeholder divs for title, toolbar, content and status\n    ['titlePlaceholder', 'toolbarPlaceholder', 'contentPlaceholder', 'statusPlaceholder'].forEach(function(className) {\n        var placeholder = document.createElement('div');\n        placeholder.className = className;\n        root.appendChild(placeholder);\n    });\n    \n    // Create resize handle\n    var resizeHandle = document.createElement('div');\n    resizeHandle.className = 'resizeHandle';\n    root.appendChild(resizeHandle);\n    \n    // Create titleBar\n    window.os.gui.titleBar(root.querySelector('.titlePlaceholder'), emoji + ' ' + title, function() {\n        document.body.removeChild(root);  // Remove root DOM node from document body when close button is clicked\n    });\n    \n    // Make window draggable by title placeholder\n    window.os.gui.makeDraggable(root, root.querySelector('.titlePlaceholder'));\n    \n    // Make window resizable by resize handle\n    window.os.gui.makeResizable(root, resizeHandle);\n    \n    // Position window in center of document\n    root.style.position = 'absolute';\n    root.style.left = (window.innerWidth / 2 - width / 2) + 'px';\n    root.style.top = (window.innerHeight / 2 - height / 2) + 'px';\n    \n    return root;  // Return root DOM node\n};\n\n \n```\n### Response:\n"
}