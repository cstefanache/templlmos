{
    "crc": 1526946026,
    "compiled_instruction": [
        "You are an AI programming assistant that generates only JS and CSS code.\n### Instruction:\n The method signature of the `registerApplication` function would be as follows:\n\n```javascript\nwindow.os.registerApplication = function(title, emoji, callback, width=400, height=400): void;\n\n```Sure, here are the method signatures prefixed with `window.os.fs`:\n\n```javascript\n// Sync filesystem to localStorage\nwindow.os.fs.sync();\n\n// Read path in filesystem\nwindow.os.fs.readPath(path);\n\n// Write content to path in filesystem and sync it\nwindow.os.fs.write(path, content);\n\n// List entries in path in filesystem\nwindow.os.fs.ls(path);\n\n// Create directory in filesystem and sync it\nwindow.os.fs.mkdir(path, dirName);\n\n// Remove path in filesystem and sync it\nwindow.os.fs.rm(path);\n\n// Check if path in filesystem is a file (i.e., it's a string)\nwindow.os.fs.isFile(path);\n\n```The function signatures are as follows:\n\n1. `createToolbar(parent): Object` - This function creates a toolbar in a given parent element and returns an object that has a function to add buttons to the toolbar. The parent parameter should be a DOM element where the toolbar will be appended to.\n2. `addButton(text, callback): undefined` - This function adds a button to the toolbar created by `createToolbar()` function. The text parameter should be a string that will be set as the button's text content, and the callback parameter should be a function that will be called when the button is clicked. The function does not return anything, so it returns undefined.\n\nHere's how you can use these methods:\n\n```javascript\nvar toolbar = window.os.gui.createToolbar(document.body);\ntoolbar.addButton('Button 1', function() { console.log('Button 1 clicked'); });\ntoolbar.addButton('Button 2', function() { console.log('Button 2 clicked'); });\n\n``` \n\n Create a `browser` function that takes a `parent` parameter:\n - create a root dom element with class `browser`\n - set browserPath variable to `''`\n - generate internal load function that takes path parameter:\n   - set browserPath to the path\n   - removes all children of the root element\n   - if path is not empty, create a new `div` element with text `..` and on click call load with `path.split('/').slice(0, -1).join('/')`\n   - lists all files in the path\n   - on click, check if the entry isFile and if is false then call load on the new path\n - execute load on browserPath variable\n - create toolbar on the `parent` parameter\n - add button on the toolbar with `\ud83d\udcc1` text and prompt for a name and call mkdir on current browserPath and provided name\n - add button on the toolbar with `\ud83d\udcc4` text and prompt for a name and call write on current browserPath and provided name and '' as content\n - return root dom element\nexit function definition and register application with 'Browser' title, \ud83d\udcc2 as emoji, `browser` function and 400x400 size \n### Response:\n"
    ],
    "output": [
        "Here is how you can implement this in JavaScript:\n\n```javascript\nfunction browser(parent) {\n    var browserPath = '';\n    var root = document.createElement('div');\n    root.className = 'browser';\n    parent.appendChild(root);\n    \n    var load = function(path) {\n        browserPath = path;\n        while (root.firstChild) {\n            root.removeChild(root.firstChild);\n        }\n        if (browserPath !== '') {\n            var upButton = document.createElement('div');\n            upButton.textContent = '..';\n            upButton.addEventListener('click', function() {load(browserPath.split('/').slice(0, -1).join('/'));});\n            root.appendChild(upButton);\n        }\n        window.os.fs.ls(browserPath).forEach(function(entry) {\n            var entryDiv = document.createElement('div');\n            entryDiv.textContent = entry;\n            entryDiv.addEventListener('click', function() {\n                if (!window.os.fs.isFile(browserPath + '/' + entry)) {\n                    load(browserPath + '/' + entry);\n                }\n            });\n            root.appendChild(entryDiv);\n        });\n    };\n    load(browserPath);\n    \n    var toolbar = window.os.gui.createToolbar(parent);\n    toolbar.addButton('\ud83d\udcc1', function() {\n        var dirName = prompt('Enter directory name');\n        if (dirName) {\n            window.os.fs.mkdir(browserPath, dirName);\n            load(browserPath);\n        }\n    });\n    toolbar.addButton('\ud83d\udcc4', function() {\n        var fileName = prompt('Enter file name');\n        if (fileName) {\n            window.os.fs.write(browserPath + '/' + fileName, '');\n            load(browserPath);\n        }\n    });\n    \n    return root;\n}\n\nwindow.os.registerApplication('Browser', '\ud83d\udcc2', browser, 400, 400);\n\n```"
    ]
}