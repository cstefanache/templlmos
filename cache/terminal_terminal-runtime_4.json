{
    "crc": 510078345,
    "compiled_instruction": "\nYou are a code generator that produces JavaScript code exclusively using vanilla JavaScript that will execute in a browser window. When responding to queries, provide only valid and complete JavaScript code without any additional explanations or comments. Do not include any frameworks or libraries such as jQuery, React, or others. Follow best practices for vanilla JavaScript and ensure compatibility with modern browsers. Do not write node or server-side code.. For each function, provide a brief description of its purpose in jsdoc format.\n\nGiven the following implemented functions:\n    /**\n     * Saves the filesystem object to local storage.\n     * @function\n     */\nwindow.os.fs.sync = function() { ... }\n    /**\n     * Processes and returns a path, handling `..`, `//`, and `/`.\n     * @param {string} path - The path to process.\n     * @returns {string|null} - The processed path or null if invalid.\n     */\nwindow.os.fs.getPath = function(path) { ... }\n    /**\n     * Checks if the path is valid.\n     * @param {string} path - The path to check.\n     * @returns {boolean} - True if valid, false otherwise.\n     */\nwindow.os.fs.isValidPath = function(path) { ... }\n    /**\n     * Returns a list of entries in the filesystem object at the given path.\n     * @param {string} path - The path to list entries from.\n     * @returns {Array} - An array of entries.\n     */\nwindow.os.fs.ls = function(path) { ... }\n    /**\n     * Creates an empty object at the given path.\n     * @param {string} path - The path to create the directory.\n     */\nwindow.os.fs.mkdir = function(path) { ... }\n    /**\n     * Removes the object at the given path.\n     * @param {string} path - The path to remove the object from.\n     */\nwindow.os.fs.rm = function(path) { ... }\n    /**\n     * Writes the content to an entry in the filesystem object at the given path.\n     * @param {string} path - The path to write to.\n     * @param {string} content - The content to write.\n     */\nwindow.os.fs.write = function(path, content) { ... }\n    /**\n     * Reads an entry split by `\\n` in the filesystem object at the given path.\n     * @param {string} path - The path to read from.\n     * @returns {string|null} - The content of the file or null if not found.\n     */\nwindow.os.fs.read = function(path) { ... }\n\n/**\n * Registers a new application with the specified title, emoji, callback, dimensions, and optional extensions.\n * @param {string} title - The title of the application.\n * @param {string} emoji - The emoji to display for the application.\n * @param {function} callback - The function to call when the application is executed.\n * @param {number} [width=400] - The width of the application window.\n * @param {number} [height=400] - The height of the application window.\n * @param {Array} [extensions] - An optional array of extensions to register with the application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\n/**\n * Removes all elements with the class name 'terminal-line' from the document.\n * @function\n */\nfunction clear() { ... }\n/**\n * Changes the current path to the specified path.\n * @param {string} path - The new path to set as current.\n */\nfunction cd(path) { ... }\n/**\n * Returns the current working directory.\n * @returns {string} - The current path.\n */\nfunction pwd() { ... }\n/**\n * Executes a command with the given input string, processing the command and its arguments.\n * @param {string} input - The command input string to execute.\n * @returns {any} - The result of the command execution or an error message.\n */\nfunction execute(input) { ... }\n    const args = input.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g).map(arg => arg.replace(/(^\"|\"$)/g, ''));\nwindow.apps.terminal = function() { ... }\n\n\ncall register application with 'Terminal' title, \ud83d\udda5\ufe0f as emoji, terminal function reference and 800x500 size\n",
    "result": "```javascript\nwindow.os.registerApplication('Terminal', '\ud83d\udda5\ufe0f', window.apps.terminal, 800, 500);\n```",
    "output": "window.os.registerApplication('Terminal', '\ud83d\udda5\ufe0f', window.apps.terminal, 800, 500);\n",
    "library": ""
}