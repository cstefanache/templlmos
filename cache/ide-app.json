{"compiled_instruction": "Generate JS code using `let` instead of `var`. All the `os` functions are already defined.\n### Instruction:\n Create an async self executing function that defines a function called `ide` on the `window.os.apps` object that takes a parameter `path` and having the following functionality:\n* creates a root dom element with the class `editor`\n* call `os.gui.createWindow` with the following parameters: `'\ud83d\udcc4 IDE' {path || ''}`, created root DOM element, `700`, `600` and store the returned value to constant `win`\n* call `os.gui.toolbar(win)` and store the returned value to constant `toolbar`\n* add a `textarea` element with id `code` to the root dom element, 100% width and 400px height and nowrap for white-space\n* add a readonly `textarea` element with id `result` to the root dom element, 100% width and 130px height and nowrap for white-space\n* if the path is not empty, store result of executiing `os.fs.readPath` into `content` constant and set it to the `textarea`\n* create an internal function `save` that:\n - if the path is not empty, store the value of the `textarea` to the `content` constant and call `os.fs.write` with the `path` and `textarea` value\n - if the path is empty, call `os.gui.createPrompt` with the following parameters: `'Save File'` and `os.gui.createPrompt('Enter folder name', path => os.fs.write(path, textarea.value))`\n* create an internal function `run` that:\n - replace the `result` textarea value with the result `Compiling...`\n - await for call `os.runtime.compile` with the `textarea` value\n - replace the `result` textarea value with the result of the `os.runtime.compile`\n* call `toolbar.addButton` with parameters '\ud83d\udcbe' and `() => save()`\n* call `toolbar.addButton` with parameters '\u25b6\ufe0f' and `() => run()` \n### Response:\n", "output": "Here is how you can create such an asynchronous self-executing function in JavaScript:\n\n```javascript\n(async () => {\n  window.os.apps.ide = async (path) => {\n    const root = document.createElement('div');\n    root.className = 'editor';\n    document.body.appendChild(root);\n    \n    const win = os.gui.createWindow('\ud83d\udcc4 IDE', root, 700, 600);\n    const toolbar = os.gui.toolbar(win);\n    \n    const textarea = document.createElement('textarea');\n    textarea.id = 'code';\n    textarea.style.width = '100%';\n    textarea.style.height = '400px';\n    textarea.style.whiteSpace = 'nowrap';\n    root.appendChild(textarea);\n    \n    const result = document.createElement('textarea');\n    result.id = 'result';\n    result.style.width = '100%';\n    result.style.height = '130px';\n    result.style.whiteSpace = 'nowrap';\n    result.readOnly = true;\n    root.appendChild(result);\n    \n    if (path) {\n      const content = await os.fs.readPath(path);\n      textarea.value = content;\n    }\n    \n    const save = () => {\n      if (path) {\n        const content = textarea.value;\n        os.fs.write(path, content);\n      } else {\n        os.gui.createPrompt('Save File', (newPath) => {\n          os.fs.write(newPath, textarea.value);\n        });\n      }\n    };\n    \n    const run = async () => {\n      result.value = 'Compiling...';\n      const compiled = await os.runtime.compile(textarea.value);\n      result.value = compiled;\n    };\n    \n    toolbar.addButton('\ud83d\udcbe', () => save());\n    toolbar.addButton('\u25b6\ufe0f', () => run());\n  };\n})();\n\n```"}