{
    "crc": 3221140890,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n /**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() { ... }\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) { ... }\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) { ... }\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') { ... }\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) { ... }\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) { ... }\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) { ... }\n\n\n\n create jsdoc and function `getOSIcon` on `window.os` object having a path and callback parameter with the following functionality:\n- create a root element `div` having the class `icon`\n- save isFile to constant\n- add a span element with class `emoji` and content \ud83d\udcc4 if isFile, \ud83d\udcc1 otherwise\n- add a div element with class title containing the name from path\n- extract extension from path and search if is registered in the `window.os.registry` object\n- sets `currentCallback` to function parameter callback\n- if extension is registered reads stores it in a `extData` property and:\n   - adds span element with class `app-emoji` with the content of `extData.emoji` \n   - sets the `currentCallback` to a function that calls `extData.callback` with the path\n- exit condition and add click listener to the root element that calls `currentCallback` with the path\n- return the root element \n### Response:\n",
    "output": "/**\n * Create an icon element for a file or directory at given path\n * @param {string} path - The path to the file or directory\n * @param {function} callback - The callback to call when the icon is clicked\n * @returns {HTMLElement} - The icon element\n */\nwindow.os.getOSIcon = function(path, callback) {\n    const isFile = window.os.fs.isFile(path);\n    const rootElement = document.createElement('div');\n    rootElement.classList.add('icon');\n    \n    const emojiElement = document.createElement('span');\n    emojiElement.classList.add('emoji');\n    emojiElement.textContent = isFile ? '\ud83d\udcc4' : '\ud83d\udcc1';\n    rootElement.appendChild(emojiElement);\n    \n    const titleElement = document.createElement('div');\n    titleElement.classList.add('title');\n    titleElement.textContent = path.split('/').pop(); // Assuming path is a Unix-like path\n    rootElement.appendChild(titleElement);\n    \n    const ext = path.split('.').pop(); // Assuming path has an extension\n    const extData = window.os.registry[ext];\n    if (extData) {\n        const appEmojiElement = document.createElement('span');\n        appEmojiElement.classList.add('app-emoji');\n        appEmojiElement.textContent = extData.emoji;\n        rootElement.appendChild(appEmojiElement);\n        \n        let currentCallback = path => extData.callback(path); // Closure for path\n        rootElement.addEventListener('click', () => currentCallback(path));\n    } else {\n        let currentCallback = path => callback(path); // Closure for path\n        rootElement.addEventListener('click', () => currentCallback(path));\n    }\n    \n    return rootElement;\n};\n\n",
    "library": "/**\n * Create an icon element for a file or directory at given path\n * @param {string} path - The path to the file or directory\n * @param {function} callback - The callback to call when the icon is clicked\n * @returns {HTMLElement} - The icon element\n */\nwindow.os.getOSIcon = function(path, callback) { ... }\n"
}