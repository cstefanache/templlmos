{
    "crc": 2286942163,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n /**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() { ... }\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) { ... }\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) { ... }\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') { ... }\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) { ... }\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) { ... }\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) { ... }\n\n/**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions to register for this application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\n\n\n Create a local `imageViewer` and generate jsdoc for it function that takes two parameters: `unused` and `path`  with the following functionality:\nreads file content as base64 string from the path to a variable `content`\nremove data:image/png;base64, or data:image/jpeg;base64 from the content\ncreate image element with src to content\nmake the image fill the entire parent content\nreturn image element \n### Response:\n",
    "output": "/**\n * Generate an image viewer for a given path\n * @param {string} unused - Unused parameter (not used in this implementation)\n * @param {string} path - The path of the image file to view\n * @returns {HTMLImageElement} - The generated image element\n */\nfunction imageViewer(unused, path) {\n    // Read file content as base64 string from path\n    let content = window.os.fs.getFileContentFromPath(path);\n    \n    // Remove \"data:image/png;base64,\" or \"data:image/jpeg;base64,\" from content\n    content = content.replace(/^data:image\\/(png|jpeg);base64,/, '');\n    \n    // Create image element with src set to content\n    let imgElement = document.createElement('img');\n    imgElement.src = `data:image/png;base64,${content}`; // assuming it's a PNG image\n    \n    // Make the image fill the entire parent content (assuming parent is body)\n    imgElement.style.width = '100%';\n    imgElement.style.height = '100%';\n    \n    return imgElement;\n}\n\n",
    "library": "/**\n * Generate an image viewer for a given path\n * @param {string} unused - Unused parameter (not used in this implementation)\n * @param {string} path - The path of the image file to view\n * @returns {HTMLImageElement} - The generated image element\n */\nfunction imageViewer(unused, path) { ... }\n"
}