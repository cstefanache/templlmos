{
    "crc": 2979071888,
    "compiled_instruction": [
        "# Window OS GUI - Title Bar API Documentation\n\nThe `window.os.gui.titleBar` is a JavaScript function that creates a customizable title bar for a GUI application. It takes three parameters: `title` (string), `buttonClickCallback` (function), and `parentElement` (DOM element). \n\n## Parameters\n\n### title (string)\nThe title to be displayed on the title bar. This is a required parameter and should be a string.\n\n### buttonClickCallback (function)\nThis is a callback function that will be executed when the close button is clicked. This is also a required parameter and should be a function that takes no arguments and does not return a value.\n\n### parentElement (DOM element)\nThis is the DOM element that the title bar will be appended to. This is also a required parameter and should be a valid DOM element (e.g., a div or a section).\n\n## Usage\n```javascript\n// Assuming you have a div with id 'app' in your HTML file\nvar appDiv = document.getElementById('app');\n\n// Define your callback function\nvar closeApp = function() {\n    // Your code to close the application goes here\n};\n\n// Create a title bar with the title 'My App' and the closeApp callback\nwindow.os.gui.titleBar('My App', closeApp, appDiv);\n\n```The provided code defines two methods, `move` and `resize`, under the namespace `window.os.gui`. Here are the list of these methods prefixed with `window.os.gui`:\n\n1. `window.os.gui.move(root, dragHandle)` - This method allows the user to move a DOM element by dragging it around the screen using a drag handle. The element to be moved is specified by the 'root' parameter, while the drag handle is specified by the 'dragHandle' parameter. The method uses the 'mousedown', 'mousemove', and 'mouseup' events to implement the drag functionality.\n\n2. `window.os.gui.resize(root, resizeHandle)` - This method allows the user to resize a DOM element by dragging a resize handle at the bottom-right corner of the element. The element to be resized is specified by the 'root' parameter, while the resize handle is specified by the 'resizeHandle' parameter. The method uses the 'mousedown', 'mousemove', and 'mouseup' events to implement the resize functionality. The width and height of the element are updated as the mouse moves across the screen, creating the illusion of resizing the element by dragging it to the desired size.\n\n``` Generate browser vanilla JS code without the use of any library or framework. All the `os` functions are already defined.\n### Instruction:\n Define a function called `createWindow` on the `window.os.gui` object\nThe `createWindow` function takes four parameters: emoji, title, content (as DOM element) and width and height that are defaulting to 400 and 300, respectively if not passed and have the following functionality:\n- create a root DOM element with the class `.window`\n- add and empty div with class `titlePlaceholder` to the root DOM element\n- add and empty div with class `toolbarPlaceholder` to the root DOM element\n- add and empty div with class `contentPlaceholder` to the root DOM element\n- add and empty div with class `statusPlaceholder` to the root DOM element\n- add a resize handle to the root DOM element with class `resizeHandle`\n- add title bar with parameters: emoji + title, the root DOM element and rood child `.titlePlaceholder` element\n- add root element to document body\n- make root element draggable by the title placeholder element\n- make root element resizable by the resize handle element\n- return the root DOM element \n### Response:\n"
    ],
    "output": [
        "Here's how you can define the `createWindow` function on the `window.os.gui` object:\n\n```javascript\n// Define the createWindow function on the window.os.gui object\nwindow.os.gui.createWindow = function(emoji = '\ud83d\udda5\ufe0f', title = 'New Window', content = null, width = 400, height = 300) {\n    // Create the root DOM element with the class .window\n    var root = document.createElement('div');\n    root.className = 'window';\n    root.style.width = width + 'px';\n    root.style.height = height + 'px';\n    \n    // Add an empty div with class titlePlaceholder to the root DOM element\n    var titlePlaceholder = document.createElement('div');\n    titlePlaceholder.className = 'titlePlaceholder';\n    root.appendChild(titlePlaceholder);\n    \n    // Add an empty div with class toolbarPlaceholder to the root DOM element\n    var toolbarPlaceholder = document.createElement('div');\n    toolbarPlaceholder.className = 'toolbarPlaceholder';\n    root.appendChild(toolbarPlaceholder);\n    \n    // Add an empty div with class contentPlaceholder to the root DOM element\n    var contentPlaceholder = document.createElement('div');\n    contentPlaceholder.className = 'contentPlaceholder';\n    root.appendChild(contentPlaceholder);\n    \n    // Add an empty div with class statusPlaceholder to the root DOM element\n    var statusPlaceholder = document.createElement('div');\n    statusPlaceholder.className = 'statusPlaceholder';\n    root.appendChild(statusPlaceholder);\n    \n    // Add a resize handle to the root DOM element with class resizeHandle\n    var resizeHandle = document.createElement('div');\n    resizeHandle.className = 'resizeHandle';\n    root.appendChild(resizeHandle);\n    \n    // Add the title bar with the provided emoji + title, the root DOM element, and the titlePlaceholder child element\n    window.os.gui.titleBar(emoji + ' ' + title, null, titlePlaceholder);\n    \n    // Add the root element to the document body\n    document.body.appendChild(root);\n    \n    // Make the root element draggable by the title placeholder element\n    window.os.gui.move(root, titlePlaceholder);\n    \n    // Make the root element resizable by the resize handle element\n    window.os.gui.resize(root, resizeHandle);\n    \n    // If content is provided, append it to the contentPlaceholder element\n    if(content) {\n        contentPlaceholder.appendChild(content);\n    }\n    \n    // Return the root DOM element\n    return root;\n};\n\n```"
    ],
    "library": "# API Documentation for `window.os.gui.createWindow`\n\nThe `window.os.gui.createWindow` function is used to create a new window with a customizable emoji, title, content, width, and height. \n\n## Syntax\n```javascript\nwindow.os.gui.createWindow(emoji, title, content, width, height)\n\n```"
}