{
    "crc": 1701312830,
    "compiled_instruction": "\nYou are a code generator that produces JavaScript code exclusively using vanilla JavaScript that will execute in a browser window. When responding to queries, provide only valid and complete JavaScript code without any additional explanations or comments. Do not include any frameworks or libraries such as jQuery, React, or others. Follow best practices for vanilla JavaScript and ensure compatibility with modern browsers. Do not write node or server-side code.. For each function, provide a brief description of its purpose in jsdoc format.\n\nGiven the following implemented functions:\n/**\n * Processes and returns a path by taking into account '..', '//' and '/'.\n * @param {string} path - The path to process.\n * @returns {string|null} - The processed path or null if invalid.\n */\nwindow.os.fs.getPath = function(path) { ... }\n/**\n * Checks if the path is valid.\n * @param {string} path - The path to check.\n * @returns {boolean} - True if valid, false otherwise.\n */\nwindow.os.fs.isValidPath = function(path) { ... }\n/**\n * Returns a list of entries in the filesystem object at the given path.\n * @param {string} path - The path to list entries from.\n * @returns {Array} - An array of entries.\n */\nwindow.os.fs.ls = function(path) { ... }\n/**\n * Creates an empty object at the given path.\n * @param {string} path - The path where to create the object.\n */\nwindow.os.fs.mkdir = function(path) { ... }\n/**\n * Removes the object at the given path.\n * @param {string} path - The path of the object to remove.\n */\nwindow.os.fs.rm = function(path) { ... }\n/**\n * Writes the content to an entry in the filesystem object at the given path.\n * @param {string} path - The path where to write the content.\n * @param {string} content - The content to write.\n */\nwindow.os.fs.write = function(path, content) { ... }\n/**\n * Reads an entry split by '\\n' in the filesystem object at the given path.\n * @param {string} path - The path of the file to read.\n * @returns {Array|null} - An array of lines or null if not found.\n */\nwindow.os.fs.read = function(path) { ... }\n\n/**\n * Changes the current path to the specified path.\n * @param {string} path - The path to change to.\n */\nfunction cd(path) { ... }\n/**\n * Returns the current working directory.\n * @returns {string} - The current path.\n */\nfunction pwd() { ... }\n/**\n * Executes a command with the given parameters, processing the path accordingly.\n * @param {string} commandString - The command string to execute.\n * @returns {any} - The result of the command execution or an error message.\n */\nfunction execute(commandString) { ... }\n\n\ndefine a function `terminal` on window.apps that creates a root element with class terminal and returns it at the end\ncreate the following dom structure:\n - .terminal\n   - .terminal-output\n     - .terminal-line with text 'Welcome to TempLLM OS'\n   - .terminal-input\n     - .prefix with text '>'\n     - input.terminal-input-text\ndefine inner function called output that takes two parameters: value and color with default value white. The function prepends a div with class terminal-line having color style as provided in the function and the value as text to the terminal-output div. if the value is a list then prepend each item in the list as a separate div\nwhen the user hits the enter key on the input take the content call the output function with the content prefixed with `[%current_time%]` and color yellow, call `output` with the resul of calling `execute` function with the value of the input, clear the input and focus it again\n",
    "output": "window.apps = window.apps || {};\n\nwindow.apps.terminal = function() {\n    const terminal = document.createElement('div');\n    terminal.className = 'terminal';\n\n    const terminalOutput = document.createElement('div');\n    terminalOutput.className = 'terminal-output';\n    terminal.appendChild(terminalOutput);\n\n    const welcomeLine = document.createElement('div');\n    welcomeLine.className = 'terminal-line';\n    welcomeLine.textContent = 'Welcome to TempLLM OS';\n    terminalOutput.appendChild(welcomeLine);\n\n    const terminalInput = document.createElement('div');\n    terminalInput.className = 'terminal-input';\n    terminal.appendChild(terminalInput);\n\n    const prefix = document.createElement('span');\n    prefix.className = 'prefix';\n    prefix.textContent = '>';\n    terminalInput.appendChild(prefix);\n\n    const inputText = document.createElement('input');\n    inputText.className = 'terminal-input-text';\n    terminalInput.appendChild(inputText);\n\n    function output(value, color = 'white') {\n        const line = document.createElement('div');\n        line.className = 'terminal-line';\n        line.style.color = color;\n\n        if (Array.isArray(value)) {\n            value.forEach(item => {\n                const itemLine = document.createElement('div');\n                itemLine.textContent = item;\n                itemLine.style.color = color;\n                terminalOutput.prepend(itemLine);\n            });\n        } else {\n            line.textContent = value;\n            terminalOutput.prepend(line);\n        }\n    }\n\n    inputText.addEventListener('keydown', function(event) {\n        if (event.key === 'Enter') {\n            const currentTime = new Date().toLocaleTimeString();\n            const content = inputText.value;\n            output(`[${currentTime}] ${content}`, 'yellow');\n            const result = execute(content);\n            output(result);\n            inputText.value = '';\n            inputText.focus();\n        }\n    });\n\n    return terminal;\n};\n",
    "library": "window.apps.terminal = function() { ... }\n"
}