{
    "crc": 1878791877,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n /**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() { ... }\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) { ... }\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) { ... }\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') { ... }\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) { ... }\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) { ... }\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) { ... }\n\n/**\n * Create a toolbar with a button inside it.\n * @param {HTMLElement} win - The window element to add toolbar to.\n * @returns {function(string, function): void} - The addButton function.\n */\nwindow.os.gui.createToolbar = function(win) { ... }\n\n/**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions to register for this application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\n/**\n * Create an icon element for a file or directory at given path\n * @param {string} path - The path to the file or directory\n * @param {function} callback - The callback to call when the icon is clicked\n * @returns {HTMLElement} - The icon element\n */\nwindow.os.getOSIcon = function(path, callback) { ... }\n\n\n\n 1. Create a `browser` function that takes a win and path defaulting to '' parameter:\n - create a container dom element with class `browser`\n - set browserPath to path or `''` if path is undefined or not string\n - generate internal load function that takes path parameter:\n   - set browserPath to path\n   - removes all children of the container element\n   - if path is not empty, create a new `div` with class icon, inner element `.emoji` with internal span element having content '\ud83d\udd19'  and class `emoji` and on click call load with `path.split('/').slice(0, -1).join('/')`\n   - ls all files in the path and for each item call `getOsIcon` with path+'/'+item and load function as callback\n - execute load on browserPath variable\n - create toolbar\n - call `addButton` on the toolbar with `\ud83d\udcc1` text and prompt for a name and call mkdir on current browserPath and provided name\n - call `addButton` on the toolbar with `\ud83d\udcc4` text and prompt for a name and call write on current browserPath and provided name and '' as content\n - return dom element \n### Response:\n",
    "output": "function browser(win, path='') {\n    // Create a container dom element with class `browser`\n    let container = document.createElement('div');\n    container.className = 'browser';\n    \n    // Set browserPath to path or `''` if path is undefined or not string\n    let browserPath = (typeof path === 'string') ? path : '';\n    \n    // Generate internal load function that takes path parameter\n    let load = (path) => {\n        // Set browserPath to path\n        browserPath = path;\n        \n        // Removes all children of the container element\n        while (container.firstChild) {\n            container.removeChild(container.firstChild);\n        }\n        \n        // If path is not empty, create a new `div` with class icon, inner element `.emoji` with internal span element having content '\ud83d\udd19'  and class `emoji` and on click call load with `path.split('/').slice(0, -1).join('/')`\n        if (path !== '') {\n            let backButtonDiv = document.createElement('div');\n            backButtonDiv.className = 'icon';\n            let backButtonSpan = document.createElement('span');\n            backButtonSpan.className = 'emoji';\n            backButtonSpan.innerText = '\ud83d\udd19';\n            backButtonSpan.onclick = () => load(path.split('/').slice(0, -1).join('/'));\n            backButtonDiv.appendChild(backButtonSpan);\n            container.appendChild(backButtonDiv);\n        }\n        \n        // ls all files in the path and for each item call `getOsIcon` with path+'/'+item and load function as callback\n        window.os.fs.ls(path).forEach(item => {\n            let iconElement = window.os.getOSIcon(path+'/'+item, () => load(path+'/'+item));\n            container.appendChild(iconElement);\n        });\n    };\n    \n    // Execute load on browserPath variable\n    load(browserPath);\n    \n    // Create toolbar\n    let toolbar = window.os.gui.createToolbar(win);\n    \n    // Call `addButton` on the toolbar with `\ud83d\udcc1` text and prompt for a name and call mkdir on current browserPath and provided name\n    toolbar('\ud83d\udcc1', () => {\n        let name = prompt('Enter directory name');\n        window.os.fs.mkdir(browserPath + '/' + name);\n        load(browserPath);\n    });\n    \n    // Call `addButton` on the toolbar with `\ud83d\udcc4` text and prompt for a name and call write on current browserPath and provided name and '' as content\n    toolbar('\ud83d\udcc4', () => {\n        let name = prompt('Enter file name');\n        window.os.fs.write(browserPath + '/' + name, '');\n        load(browserPath);\n    });\n    \n    // Return dom element \n    return container;\n}\n\n",
    "library": "function browser(win, path='') { ... }\n"
}