{
    "crc": 1971613514,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n /**\n * Save the filesystem object to localStorage\n */\nwindow.os.fs.sync = function() { ... }\n/**\n * Get file content at given path\n * @param {string} path - The path to the file\n * @returns {string|undefined} - The content of the file or undefined if not found\n */\nwindow.os.fs.getFileContentFromPath = function(path) { ... }\n/**\n * Write content to a file at given path\n * @param {string} path - The path to the file\n * @param {string} content - The content to write to the file\n */\nwindow.os.fs.write = function(path, content) { ... }\n/**\n * List entries at given path\n * @param {string} path - The path to list entries at\n * @returns {Array} - An array of entries at the path or root if path is not found\n */\nwindow.os.fs.ls = function(path = '') { ... }\n/**\n * Create a directory at given path\n * @param {string} path - The path to create a directory at\n */\nwindow.os.fs.mkdir = function(path) { ... }\n/**\n * Remove a file or directory at given path\n * @param {string} path - The path to remove at\n */\nwindow.os.fs.rm = function(path) { ... }\n/**\n * Check if a path is a file\n * @param {string} path - The path to check\n * @returns {boolean} - True if path is a file, false otherwise\n */\nwindow.os.fs.isFile = function(path) { ... }\n\n/**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions this application can handle.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\n/**\n * Create a toolbar with a button inside it.\n * @param {HTMLElement} win - The window element to add toolbar to.\n * @returns {function(string, function): void} - The addButton function.\n */\nwindow.os.gui.createToolbar = function(win) { ... }\n\n\n\n Create `compile` function that takes a source parameter and:\n - remove the script tag with id `run-script` if exists\n - fetch post  to `http://localhost:8080` with a json having {instruction: source}, and on response create a script tag with id `run-script` and add the response text content to the script tag\n - add end function comment \n### Response:\n",
    "output": "/**\n * Compile a source code string into a runnable script.\n * @param {string} source - The source code string to compile.\n */\nfunction compile(source) {\n    // Remove existing script tag with id 'run-script' if exists\n    var existingScriptTag = document.getElementById('run-script');\n    if (existingScriptTag) {\n        existingScriptTag.parentNode.removeChild(existingScriptTag);\n    }\n    \n    // Fetch POST request with source code as JSON data\n    fetch('http://localhost:8080', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({instruction: source})\n    })\n    .then(response => response.text()) // Get response text content\n    .then(data => {\n        // Create a new script tag with id 'run-script' and add response text content to it\n        var newScriptTag = document.createElement('script');\n        newScriptTag.id = 'run-script';\n        newScriptTag.textContent = data;\n        document.body.appendChild(newScriptTag);\n    })\n    .catch(error => console.error('Error:', error)); // Handle any errors that occurred during fetch request\n}\n\n",
    "library": "/**\n * Compile a source code string into a runnable script.\n * @param {string} source - The source code string to compile.\n */\nfunction compile(source) { ... }\n"
}