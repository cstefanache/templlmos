{
    "crc": 2789627093,
    "compiled_instruction": [
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\n\n\n Implement the following functions on the `window.os` object under `gui` key:\n- `makeDraggable(root, dragHandleHTMLElement)` - when user is dragging the dragHandleHTMLElement, move the root HTMLElement \n### Response:\n",
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\n\n\n Implement the following functions on the `window.os` object under `gui` key:\n`makeResizable(root, resizeHandleHTMLElement) that:` \n - resize (both width and height) the root HTMLElement element by dragging the resizeHandle DOM element.\n - update starting width and height on mouseup \n### Response:\n",
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\n\n\n Implement `bringToFront(rootDOMNode)` on the `window.os.gui` that:\n- creates an internal function that:\n  * takes all elements with the same class as rootDomNode\n  * iterate through them and sets the z-index to 0\n  * sets the z-index of rootDOMNode to 1\n- adds a mousedown event listener to rootDOMNode that calls the internal function \n### Response:\n"
    ],
    "output": [
        "Sure, I can help you with this. Here's how you can implement this in JavaScript using the native DOM events for drag and drop functionality. \n\n```javascript\n// Firstly, we need to check if window.os exists and gui exists inside it. If not, we create them.\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Now we implement makeDraggable function\nwindow.os.gui.makeDraggable = function (root, dragHandleHTMLElement) {\n    var isDragging = false; // flag to check if we're currently dragging\n    var offsetX = 0; // offset from mouse to element start position\n    var offsetY = 0; // offset from mouse to element start position\n    \n    // function to start dragging\n    function startDragging(e) {\n        e = e || window.event; // for IE\n        e.preventDefault(); // prevent selection of text while dragging\n        isDragging = true; // set flag to true\n        offsetX = e.clientX - root.getBoundingClientRect().left; // calculate offsets\n        offsetY = e.clientY - root.getBoundingClientRect().top;\n        document.onmousemove = function (e) { moveElement(e); }; // set mousemove event handler\n        document.onmouseup = function () { stopDragging(); }; // set mouseup event handler\n    }\n    \n    // function to move element during dragging\n    function moveElement(e) {\n        e = e || window.event; // for IE\n        if (isDragging) { // if we're currently dragging\n            var newX = e.clientX - offsetX; // calculate new position\n            var newY = e.clientY - offsetY; // calculate new position\n            root.style.left = newX + 'px'; // set new position\n            root.style.top = newY + 'px'; // set new position\n        }\n    }\n    \n    // function to stop dragging\n    function stopDragging() {\n        isDragging = false; // set flag to false\n        document.onmousemove = null; // remove mousemove event handler\n        document.onmouseup = null; // remove mouseup event handler\n    }\n    \n    // add mousedown event listener to drag handle\n    dragHandleHTMLElement.addEventListener('mousedown', startDragging);\n}\n\n```",
        "Sure, here is an example of how you can implement this using plain JavaScript. This code assumes that you have already included jQuery in your project. \n\n```javascript\n// Create 'gui' namespace if it doesn't exist\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to make an element resizable\nwindow.os.gui.makeResizable = function (root, resizeHandleElement) {\n    var startX;\n    var startY;\n    var startWidth = root.offsetWidth;\n    var startHeight = root.offsetHeight;\n    \n    // Function to handle mouse down event\n    function handleMouseDown(e) {\n        e = e || window.event;\n        startX = e.clientX;\n        startY = e.clientY;\n        document.onmouseup = handleMouseUp;\n        document.onmousemove = handleMouseMove;\n    }\n    \n    // Function to handle mouse up event\n    function handleMouseUp() {\n        document.onmouseup = null;\n        document.onmousemove = null;\n        startWidth = root.offsetWidth;\n        startHeight = root.offsetHeight;\n    }\n    \n    // Function to handle mouse move event\n    function handleMouseMove(e) {\n        e = e || window.event;\n        var diffX = e.clientX - startX;\n        var diffY = e.clientY - startY;\n        root.style.width = (startWidth + diffX) + 'px';\n        root.style.height = (startHeight + diffY) + 'px';\n    }\n    \n    // Add event listeners to handle mouse events\n    resizeHandleElement.addEventListener('mousedown', handleMouseDown);\n}\n\n```",
        "Here is how you can implement this in Javascript:\n\n```javascript\n// Assuming window.os.gui is already defined\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to bring to front\nwindow.os.gui.bringToFront = function (rootDomNode) {\n    // Internal function to set z-index to 0 for all elements with same class as rootDomNode\n    var setZIndexToZero = function (className) {\n        var elements = document.getElementsByClassName(className);\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.zIndex = 0;\n        }\n    };\n    \n    // Set z-index of rootDomNode to 1\n    rootDomNode.style.zIndex = 1;\n    \n    // Add mousedown event listener to rootDomNode\n    rootDomNode.addEventListener('mousedown', function () {\n        setZIndexToZero(rootDomNode.className);\n    });\n};\n\n```"
    ],
    "library": "This JavaScript code defines several utility functions for GUI manipulation such as making elements draggable, resizable, and bringing elements to front. Here's how you can use these functions:\n\n1. **makeDraggable**: This function makes an element draggable by adding mouse events listeners for mousedown (start dragging), mousemove (move element), and mouseup (stop dragging). The root element is the element you want to make draggable, and dragHandleHTMLElement is the element you want to use as the drag handle. \n\nExample usage: \n```javascript\nvar draggableElement = document.getElementById('draggable');\nvar dragHandle = document.getElementById('drag-handle');\nwindow.os.gui.makeDraggable(draggableElement, dragHandle);\n```\n\n2. **makeResizable**: This function makes an element resizable by adding mouse events listeners for mousedown (start resizing), mousemove (resize element), and mouseup (stop resizing). The root element is the element you want to make resizable, and resizeHandleElement is the element you want to use as the resize handle. \n\nExample usage: \n```javascript\nvar resizableElement = document.getElementById('resizable');\nvar resizeHandle = document.getElementById('resize-handle');\nwindow.os.gui.makeResizable(resizableElement, resizeHandle);\n```\n\n3. **bringToFront**: This function brings an element to front of other elements with same class name when mousedown event is triggered on rootDomNode. The rootDomNode is the element you want to bring to front. \n\nExample usage: \n```javascript\nvar elementToBringToFront = document.getElementById('bring-to-front');\nwindow.os.gui.bringToFront(elementToBringToFront);\n```\n\nPlease note that these functions assume that you have already defined `window.os` and `window.os.gui` in your script. They will not work without these definitions. Also, these functions manipulate CSS properties directly which may have unintended side effects in some cases. It's always good practice to handle these cases in your own code.\n\n```",
    "library_input": "### Instruction:\nYou are a javascript developer that documents all the declared functions by providing sample usage.\n```\n // Firstly, we need to check if window.os exists and gui exists inside it. If not, we create them.\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Now we implement makeDraggable function\nwindow.os.gui.makeDraggable = function (root, dragHandleHTMLElement) {\n    var isDragging = false; // flag to check if we're currently dragging\n    var offsetX = 0; // offset from mouse to element start position\n    var offsetY = 0; // offset from mouse to element start position\n    \n    // function to start dragging\n    function startDragging(e) {\n        e = e || window.event; // for IE\n        e.preventDefault(); // prevent selection of text while dragging\n        isDragging = true; // set flag to true\n        offsetX = e.clientX - root.getBoundingClientRect().left; // calculate offsets\n        offsetY = e.clientY - root.getBoundingClientRect().top;\n        document.onmousemove = function (e) { moveElement(e); }; // set mousemove event handler\n        document.onmouseup = function () { stopDragging(); }; // set mouseup event handler\n    }\n    \n    // function to move element during dragging\n    function moveElement(e) {\n        e = e || window.event; // for IE\n        if (isDragging) { // if we're currently dragging\n            var newX = e.clientX - offsetX; // calculate new position\n            var newY = e.clientY - offsetY; // calculate new position\n            root.style.left = newX + 'px'; // set new position\n            root.style.top = newY + 'px'; // set new position\n        }\n    }\n    \n    // function to stop dragging\n    function stopDragging() {\n        isDragging = false; // set flag to false\n        document.onmousemove = null; // remove mousemove event handler\n        document.onmouseup = null; // remove mouseup event handler\n    }\n    \n    // add mousedown event listener to drag handle\n    dragHandleHTMLElement.addEventListener('mousedown', startDragging);\n}\n\n// Create 'gui' namespace if it doesn't exist\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to make an element resizable\nwindow.os.gui.makeResizable = function (root, resizeHandleElement) {\n    var startX;\n    var startY;\n    var startWidth = root.offsetWidth;\n    var startHeight = root.offsetHeight;\n    \n    // Function to handle mouse down event\n    function handleMouseDown(e) {\n        e = e || window.event;\n        startX = e.clientX;\n        startY = e.clientY;\n        document.onmouseup = handleMouseUp;\n        document.onmousemove = handleMouseMove;\n    }\n    \n    // Function to handle mouse up event\n    function handleMouseUp() {\n        document.onmouseup = null;\n        document.onmousemove = null;\n        startWidth = root.offsetWidth;\n        startHeight = root.offsetHeight;\n    }\n    \n    // Function to handle mouse move event\n    function handleMouseMove(e) {\n        e = e || window.event;\n        var diffX = e.clientX - startX;\n        var diffY = e.clientY - startY;\n        root.style.width = (startWidth + diffX) + 'px';\n        root.style.height = (startHeight + diffY) + 'px';\n    }\n    \n    // Add event listeners to handle mouse events\n    resizeHandleElement.addEventListener('mousedown', handleMouseDown);\n}\n\n// Assuming window.os.gui is already defined\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to bring to front\nwindow.os.gui.bringToFront = function (rootDomNode) {\n    // Internal function to set z-index to 0 for all elements with same class as rootDomNode\n    var setZIndexToZero = function (className) {\n        var elements = document.getElementsByClassName(className);\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.zIndex = 0;\n        }\n    };\n    \n    // Set z-index of rootDomNode to 1\n    rootDomNode.style.zIndex = 1;\n    \n    // Add mousedown event listener to rootDomNode\n    rootDomNode.addEventListener('mousedown', function () {\n        setZIndexToZero(rootDomNode.className);\n    });\n};\n\n \n```\n### Response:\n"
}