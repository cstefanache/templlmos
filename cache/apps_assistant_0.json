{
    "crc": 1291164045,
    "compiled_instruction": [
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\nGiven the following examples:\n This JavaScript code defines a `registerApplication` function on the `os` object of the `window` object. This function is used to register an application with the operating system. \n\nHere's how you can use it:\n\n```javascript\n// Assume window.os.gui and window.os.addApp and window.os.registerExtension are already defined elsewhere in your code\n\n// Define your application's title, emoji and callback function\nconst title = \"My App\";\nconst emoji = \"\ud83d\ude80\";\nconst callback = (appWindow, param1, param2) => {\n  // Your code here to create and return content for your application window\n};\nconst width = 800;  // Optional, default is 400\nconst height = 600;  // Optional, default is 400\nconst extensions = [\"ext1\", \"ext2\"];  // Optional, default is undefined\n\n// Register your application with the operating system\nwindow.os.registerApplication(title, emoji, callback, width, height, extensions);\n```\n\nIn this example, `callback` is a function that is called when your application is launched and is responsible for creating and returning content for your application window. The `appWindow` parameter is an instance of your application window and `param1` and `param2` are additional parameters passed to your `callback` function when your application is launched. \n\nThe `width` and `height` parameters specify the initial size of your application window and they default to 400 if not provided. \n\nThe `extensions` parameter is an optional array of extension names to be registered with your application. If provided, each extension will be registered with your application's `emoji` and `execute` function. \n\nFinally, `window.os.addApp` is called with your application's `emoji`, `title` and `execute` function to add your application to the operating system's list of applications. \n\nThis is just an example of how you might use this `registerApplication` function in your code. The actual implementation of `window.os.gui`, `window.os.addApp` and `window.os.registerExtension` would depend on how these functions and objects are defined elsewhere in your code.\n\n```\n\n Create a `assistant` function that takes a parent parameter:\n - create a root dom element with class `chat`\n - create a div element with 100% width and 300px height with class `results`\n - create an input element with 100% width\n - add a button with `\u27a1\ufe0f` text and on click:\n   - save the input value to instruction variable and clear the input\n   - POST the json having instruction and full as true to `http://localhost:8080`, on response add pre tag with the response text content to the results\n return dom element\ncall register application with 'Assistant' title, \ud83d\udc68\ud83c\udffd\u200d\u2695\ufe0f as emoji, already defined `assistant` function reference and 400x400 size \n### Response:\n"
    ],
    "output": [
        "// Define your assistant function\nfunction assistant(parent) {\n    // Create root dom element with class 'chat'\n    const chat = document.createElement('div');\n    chat.className = 'chat';\n    parent.appendChild(chat);\n    \n    // Create div element with class 'results'\n    const results = document.createElement('div');\n    results.className = 'results';\n    results.style.height = '300px';\n    chat.appendChild(results);\n    \n    // Create input element\n    const input = document.createElement('input');\n    input.style.width = '100%';\n    chat.appendChild(input);\n    \n    // Add button with '\u27a1\ufe0f' text\n    const button = document.createElement('button');\n    button.textContent = '\u27a1\ufe0f';\n    button.onclick = () => {\n        // Save input value to instruction variable\n        const instruction = input.value;\n        input.value = '';\n        \n        // POST instruction to 'http://localhost:8080'\n        fetch('http://localhost:8080', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ instruction: instruction, full: true })\n        })\n        .then(response => response.text())\n        .then(data => {\n            // Add pre tag with response text content to results\n            const pre = document.createElement('pre');\n            pre.textContent = data;\n            results.appendChild(pre);\n        });\n    };\n    chat.appendChild(button);\n    \n    return chat;\n}\n\n// Register your application with the operating system\nwindow.os.registerApplication('Assistant', '\ud83d\udc68\ud83c\udffd\u200d\u2695\ufe0f', assistant, 400, 400);\n\n"
    ]
}