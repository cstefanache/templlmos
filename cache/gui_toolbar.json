{
    "crc": 1685591777,
    "compiled_instruction": [
        "You are an AI programming assistant that generates only JS and CSS code.\n### Instruction:\n  \n\n Define a function called `createToolbar` on the `window.os.gui` object that takes one parameter `parent`\n- create a root DOM element with the class `.toolbar`\n- append the root DOM element to the `.toolbarPlaceholder` from passed `parent` as parameter\n- return an object with the following functions:\n  - addButton(text, callback) - add a button to the root DOM element with the text parameter and call the callback when the button is clicked \n### Response:\n"
    ],
    "output": [
        "Here is how you can define this function in JavaScript:\n\n```javascript\n// Assuming window.os is already defined as an object\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to create toolbar\nwindow.os.gui.createToolbar = function(parent) {\n    // Create root DOM element\n    var toolbar = document.createElement('div');\n    toolbar.className = 'toolbar';\n    \n    // Append to parent's .toolbarPlaceholder\n    var toolbarPlaceholder = parent.querySelector('.toolbarPlaceholder');\n    toolbarPlaceholder.appendChild(toolbar);\n    \n    // Return object with addButton function\n    return {\n        addButton: function(text, callback) {\n            // Create button DOM element\n            var button = document.createElement('button');\n            button.textContent = text;\n            \n            // Append to toolbar\n            toolbar.appendChild(button);\n            \n            // Add click event listener to call callback\n            button.addEventListener('click', callback);\n        }\n    };\n};\n\n```"
    ],
    "library": "The function signatures are as follows:\n\n1. `createToolbar(parent): Object` - This function creates a toolbar in a given parent element and returns an object that has a function to add buttons to the toolbar. The parent parameter should be a DOM element where the toolbar will be appended to.\n2. `addButton(text, callback): undefined` - This function adds a button to the toolbar created by `createToolbar()` function. The text parameter should be a string that will be set as the button's text content, and the callback parameter should be a function that will be called when the button is clicked. The function does not return anything, so it returns undefined.\n\nHere's how you can use these methods:\n\n```javascript\nvar toolbar = window.os.gui.createToolbar(document.body);\ntoolbar.addButton('Button 1', function() { console.log('Button 1 clicked'); });\ntoolbar.addButton('Button 2', function() { console.log('Button 2 clicked'); });\n\n```"
}