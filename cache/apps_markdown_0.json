{
    "crc": 3763580086,
    "compiled_instruction": "\nYou are a code generator that produces JavaScript code exclusively using vanilla JavaScript that will execute in a browser window. When responding to queries, provide only valid and complete JavaScript code without any additional explanations or comments. Do not include any frameworks or libraries such as jQuery, React, or others. Follow best practices for vanilla JavaScript and ensure compatibility with modern browsers. Do not write node or server-side code.\n\nGiven the following implemented functions:\n    /**\n     * Saves the filesystem object to local storage.\n     * @function\n     */\nwindow.os.fs.sync = function() { ... }\n    /**\n     * Processes and returns a path, handling `..`, `//`, and `/`.\n     * @param {string} path - The path to process.\n     * @returns {string|null} - The processed path or null if invalid.\n     */\nwindow.os.fs.getPath = function(path) { ... }\n    /**\n     * Checks if the path is valid.\n     * @param {string} path - The path to check.\n     * @returns {boolean} - True if valid, false otherwise.\n     */\nwindow.os.fs.isValidPath = function(path) { ... }\n    /**\n     * Returns a list of entries in the filesystem object at the given path.\n     * @param {string} path - The path to list entries from.\n     * @returns {Array} - An array of entries.\n     */\nwindow.os.fs.ls = function(path) { ... }\n    /**\n     * Creates an empty object at the given path.\n     * @param {string} path - The path to create the directory.\n     */\nwindow.os.fs.mkdir = function(path) { ... }\n    /**\n     * Removes the object at the given path.\n     * @param {string} path - The path to remove the object from.\n     */\nwindow.os.fs.rm = function(path) { ... }\n    /**\n     * Writes the content to an entry in the filesystem object at the given path.\n     * @param {string} path - The path to write to.\n     * @param {string} content - The content to write.\n     */\nwindow.os.fs.write = function(path, content) { ... }\n    /**\n     * Reads an entry split by `\\n` in the filesystem object at the given path.\n     * @param {string} path - The path to read from.\n     * @returns {string|null} - The content of the file or null if not found.\n     */\nwindow.os.fs.read = function(path) { ... }\n\n/**\n * Creates a toolbar and appends it to the specified window element.\n * @param {HTMLElement} win - The window element to which the toolbar will be appended.\n * @returns {function(string, function): void} - A function to add buttons to the toolbar.\n */\nwindow.os.gui.createToolbar = function(win) { ... }\n    /**\n     * Adds a button to the toolbar.\n     * @param {string} text - The text to display on the button.\n     * @param {function} callback - The function to call when the button is clicked.\n     */\n\n/**\n * Registers a new application with the specified title, emoji, callback, dimensions, and optional extensions.\n * @param {string} title - The title of the application.\n * @param {string} emoji - The emoji to display for the application.\n * @param {function} callback - The function to call when the application is executed.\n * @param {number} [width=400] - The width of the application window.\n * @param {number} [height=400] - The height of the application window.\n * @param {Array} [extensions] - An optional array of extensions to register with the application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\n\n\nCreate a `markdown` function that takes a _ and path parameter:\n - create a dom element with class `markdown`\n - if path is not empty, read the file content and store it in a variable\n - avoid escaping html code, parse the markdown content and generate html elements for all type of markdown syntax elements and append them to the previously created element\n - return  dom element\n\ncall register application with 'markdown' title, \u303d\ufe0f as emoji, `markdown` function reference and 800x650 size for [md] extensions\n",
    "result": "```javascript\nfunction markdown(_, path) {\n    const markdownElement = document.createElement('div');\n    markdownElement.className = 'markdown';\n\n    if (path) {\n        const content = window.os.fs.read(path);\n        if (content) {\n            const htmlContent = content\n                .replace(/###### (.*)/g, '<h6>$1</h6>')\n                .replace(/##### (.*)/g, '<h5>$1</h5>')\n                .replace(/#### (.*)/g, '<h4>$1</h4>')\n                .replace(/### (.*)/g, '<h3>$1</h3>')\n                .replace(/## (.*)/g, '<h2>$1</h2>')\n                .replace(/# (.*)/g, '<h1>$1</h1>')\n                .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n                .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n                .replace(/~~(.*?)~~/g, '<del>$1</del>')\n                .replace(/`(.*?)`/g, '<code>$1</code>')\n                .replace(/\\n/g, '<br>');\n\n            markdownElement.innerHTML = htmlContent;\n        }\n    }\n\n    return markdownElement;\n}\n\nwindow.os.registerApplication('markdown', '\u303d\ufe0f', markdown, 800, 650, ['md']);\n```",
    "output": "function markdown(_, path) {\n    const markdownElement = document.createElement('div');\n    markdownElement.className = 'markdown';\n\n    if (path) {\n        const content = window.os.fs.read(path);\n        if (content) {\n            const htmlContent = content\n                .replace(/###### (.*)/g, '<h6>$1</h6>')\n                .replace(/##### (.*)/g, '<h5>$1</h5>')\n                .replace(/#### (.*)/g, '<h4>$1</h4>')\n                .replace(/### (.*)/g, '<h3>$1</h3>')\n                .replace(/## (.*)/g, '<h2>$1</h2>')\n                .replace(/# (.*)/g, '<h1>$1</h1>')\n                .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n                .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n                .replace(/~~(.*?)~~/g, '<del>$1</del>')\n                .replace(/`(.*?)`/g, '<code>$1</code>')\n                .replace(/\\n/g, '<br>');\n\n            markdownElement.innerHTML = htmlContent;\n        }\n    }\n\n    return markdownElement;\n}\n\nwindow.os.registerApplication('markdown', '\u303d\ufe0f', markdown, 800, 650, ['md']);\n",
    "library": "function markdown(_, path) { ... }\n                .replace(/###### (.*)/g, '<h6>$1</h6>')\n                .replace(/##### (.*)/g, '<h5>$1</h5>')\n                .replace(/#### (.*)/g, '<h4>$1</h4>')\n                .replace(/### (.*)/g, '<h3>$1</h3>')\n                .replace(/## (.*)/g, '<h2>$1</h2>')\n                .replace(/# (.*)/g, '<h1>$1</h1>')\n                .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n                .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n                .replace(/~~(.*?)~~/g, '<del>$1</del>')\n                .replace(/`(.*?)`/g, '<code>$1</code>')\n"
}