{
    "crc": 837360529,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n /**\n* Create a new window with given emoji, title, width and height.\n* @param {string} emoji - The emoji to display in the window's title bar.\n* @param {string} title - The title to display in the window's title bar.\n* @param {number} [width=400] - The width of the window in pixels.\n* @param {number} [height=300] - The height of the window in pixels.\n* @return {HTMLElement} The root DOM element of the newly created window.\n*/\nwindow.os.gui.createWindow = function(emoji, title, width = 400, height = 300) { ... }\n/**\n* Attach content to an existing window.\n* @param {HTMLElement} windowElement - The window to attach content to.\n* @param {HTMLElement} contentElement - The content to attach to the window.\n*/\nwindow.os.gui.attachToWindow = function(windowElement, contentElement) { ... }\n\n/**\n * Adds an application to the desktop content.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n */\nwindow.os.addApp = function(emoji, title, callback) { ... }\n\n/**\n * Create an icon element for a file or directory at given path\n * @param {string} path - The path to the file or directory\n * @param {function} callback - The callback to call when the icon is clicked\n * @returns {HTMLElement} - The icon element\n */\nwindow.os.getOSIcon = function(path, callback) { ... }\n\n\n\n create a new function `registerApplication` on the `window.os` object and jsdoc that takes a title, emoji, callback, width=400 and height = 400 and a an array of extensions being undefined by default having the following functionality:\n- define an internal `execute` that takes a spread params:\n  - creates a new window instance with the title, emoji, width and height and saves it to a constant\n  - attach to window the result of calling the callback with the window instance and spread params\n- if extensions is defined, call `registerExtension` for each extension with extension, emoji and the execute function\n- call addApp with the emoji, title and callback that calls the execute function with no parameters \n### Response:\n",
    "output": "/**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions to register for this application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) {\n    const execute = (...params) => {\n        const windowInstance = window.os.gui.createWindow(emoji, title, width, height);\n        window.os.gui.attachToWindow(windowInstance, callback(windowInstance, ...params));\n    };\n    \n    if (extensions) {\n        extensions.forEach(extension => {\n            // Assuming `registerExtension` is also available on `window.os` object\n            // and it takes an extension, emoji and callback as parameters\n            window.os.registerExtension(extension, emoji, execute);\n        });\n    }\n    \n    // Add application to desktop\n    window.os.addApp(emoji, title, () => execute());\n};\n\n",
    "library": "/**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions to register for this application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n"
}