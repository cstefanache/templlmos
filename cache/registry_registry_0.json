{
    "crc": 412929275,
    "compiled_instruction": "\nYou are a code generator that produces JavaScript code exclusively using vanilla JavaScript that will execute in a browser window. When responding to queries, provide only valid and complete JavaScript code without any additional explanations or comments. Do not include any frameworks or libraries such as jQuery, React, or others. Follow best practices for vanilla JavaScript and ensure compatibility with modern browsers. Do not write node or server-side code.. For each function, provide a brief description of its purpose in jsdoc format.\n\nGiven the following implemented functions:\n/**\n * Creates a new window element with a title bar, draggable and resizable functionality.\n * @param {string} emoji - The emoji to display in the title bar.\n * @param {string} title - The title to display in the title bar.\n * @param {number} [width=400] - The width of the window.\n * @param {number} [height=300] - The height of the window.\n * @returns {HTMLElement} The created window element.\n */\nwindow.os.gui.createWindow = function(emoji, title, width = 400, height = 300) { ... }\n/**\n * Appends a content element to the content placeholder of a window element.\n * @param {HTMLElement} windowElement - The window element to which the content will be attached.\n * @param {HTMLElement} contentElement - The content element to be appended.\n */\nwindow.os.gui.attachToWindow = function(windowElement, contentElement) { ... }\n\n/**\n * Adds an application icon to the desktop with the specified emoji, title, and click callback.\n * @param {string} emoji - The emoji to display in the icon.\n * @param {string} title - The title to display in the icon.\n * @param {function} callback - The function to call when the icon is clicked.\n */\nwindow.os.addApp = function(emoji, title, callback) { ... }\n\n/**\n * Creates an OS icon element for a given path and sets up a click callback.\n * @param {string} path - The path for which to create the icon.\n * @param {function} callback - The function to call when the icon is clicked.\n * @returns {HTMLElement} - The root icon element.\n */\nwindow.os.getOSIcon = function(path, callback) { ... }\ncurrentCallback = function() { ... }\n\n\n\ncreate a new function `registerApplication` on the `window.os` object and jsdoc that takes a title, emoji, callback, width=400 and height = 400 and a an array of extensions being undefined by default having the following functionality:\n- define an internal `execute` that takes a spread params:\n  - creates a new window instance with the title, emoji, width and height and saves it to a constant\n  - call attach to window the result of calling the callback with the following parameters: window instance and spread params\n- if extensions is defined, call `registerExtension` for each extension with extension, emoji and the execute function\n- call addApp with the emoji, title and callback that calls the execute function with no parameters\n",
    "result": "```javascript\n/**\n * Registers a new application with the specified title, emoji, callback, dimensions, and optional extensions.\n * @param {string} title - The title of the application.\n * @param {string} emoji - The emoji to display for the application.\n * @param {function} callback - The function to call when the application is executed.\n * @param {number} [width=400] - The width of the application window.\n * @param {number} [height=400] - The height of the application window.\n * @param {Array} [extensions] - An optional array of extensions to register with the application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) {\n    const execute = (...params) => {\n        const windowInstance = window.os.gui.createWindow(emoji, title, width, height);\n        window.os.gui.attachToWindow(windowInstance, callback(windowInstance, ...params));\n    };\n\n    if (extensions) {\n        extensions.forEach(extension => {\n            window.os.registerExtension(extension, emoji, execute);\n        });\n    }\n\n    window.os.addApp(emoji, title, () => execute());\n};\n```",
    "output": "/**\n * Registers a new application with the specified title, emoji, callback, dimensions, and optional extensions.\n * @param {string} title - The title of the application.\n * @param {string} emoji - The emoji to display for the application.\n * @param {function} callback - The function to call when the application is executed.\n * @param {number} [width=400] - The width of the application window.\n * @param {number} [height=400] - The height of the application window.\n * @param {Array} [extensions] - An optional array of extensions to register with the application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) {\n    const execute = (...params) => {\n        const windowInstance = window.os.gui.createWindow(emoji, title, width, height);\n        window.os.gui.attachToWindow(windowInstance, callback(windowInstance, ...params));\n    };\n\n    if (extensions) {\n        extensions.forEach(extension => {\n            window.os.registerExtension(extension, emoji, execute);\n        });\n    }\n\n    window.os.addApp(emoji, title, () => execute());\n};\n",
    "library": "/**\n * Registers a new application with the specified title, emoji, callback, dimensions, and optional extensions.\n * @param {string} title - The title of the application.\n * @param {string} emoji - The emoji to display for the application.\n * @param {function} callback - The function to call when the application is executed.\n * @param {number} [width=400] - The width of the application window.\n * @param {number} [height=400] - The height of the application window.\n * @param {Array} [extensions] - An optional array of extensions to register with the application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n"
}