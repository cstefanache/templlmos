{
    "crc": 2650429310,
    "compiled_instruction": "Write only browser JS, JavaScript, HTML and CSS. Document all function declarations using jsdoc.\n### Instruction:\nGiven the following already defined functions:\n /**\n * Register an application on the desktop.\n * \n * @param {string} title - The tooltip text to display when hovering over this application's icon.\n * @param {string} emoji - The emoji to display in this application's icon.\n * @param {function} callback - The callback to call when this application's icon is clicked.\n * @param {number} [width=400] - The width of the application's window in pixels.\n * @param {number} [height=400] - The height of the application's window in pixels.\n * @param {Array<string>} [extensions] - The file extensions to register for this application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\n\n\n Create an `application` function that takes a parent parameter having the following functionality:\n - create a root dom element with class `chat`\n - create an input element with 100% width with keyup event listener that on enter key press:\n   - save the input value to instruction variable and clear the input\n   - POST the json having instruction and full as false to `/`, on response add a script tag to the body with id `run-script` and add the response text content to the script tag\n - return dom element \n### Response:\n",
    "output": "/**\n * Create a chat application with a root DOM element and input element.\n * \n * @param {HTMLElement} parent - The parent element where the chat application will be appended.\n */\nfunction application(parent) {\n    // Create a root DOM element with class 'chat'\n    const chat = document.createElement('div');\n    chat.className = 'chat';\n    parent.appendChild(chat);\n\n    // Create an input element with 100% width\n    const input = document.createElement('input');\n    input.style.width = '100%';\n    chat.appendChild(input);\n\n    // Variable to save input value\n    let instruction = '';\n\n    // Event listener for keyup event on input element\n    input.addEventListener('keyup', async (event) => {\n        // If enter key is pressed\n        if (event.key === 'Enter') {\n            // Save input value to instruction variable and clear input\n            instruction = event.target.value;\n            event.target.value = '';\n            \n            // POST instruction and full as false to '/'\n            const response = await fetch('/', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ instruction: instruction, full: false })\n            });\n            \n            // Get response text content\n            const content = await response.text();\n            \n            // Create a script tag with id 'run-script' and add response content to it\n            const script = document.createElement('script');\n            script.id = 'run-script';\n            script.textContent = content;\n            document.body.appendChild(script);\n        }\n    });\n    \n    // Return root DOM element\n    return chat;\n}\n\n",
    "library": "/**\n * Create a chat application with a root DOM element and input element.\n * \n * @param {HTMLElement} parent - The parent element where the chat application will be appended.\n */\nfunction application(parent) { ... }\n"
}