{
    "crc": 3736526776,
    "compiled_instruction": "\nYou are a code generator that produces JavaScript code exclusively using vanilla JavaScript that will execute in a browser window. When responding to queries, provide only valid and complete JavaScript code without any additional explanations or comments. Do not include any frameworks or libraries such as jQuery, React, or others. Follow best practices for vanilla JavaScript and ensure compatibility with modern browsers. Do not write node or server-side code.\n\nGiven the following implemented functions:\n/**\n * Registers a new application with the specified title, emoji, callback, dimensions, and optional extensions.\n * @param {string} title - The title of the application.\n * @param {string} emoji - The emoji to display for the application.\n * @param {function} callback - The function to call when the application is executed.\n * @param {number} [width=400] - The width of the application window.\n * @param {number} [height=400] - The height of the application window.\n * @param {Array} [extensions] - An optional array of extensions to register with the application.\n */\nwindow.os.registerApplication = function(title, emoji, callback, width = 400, height = 400, extensions) { ... }\n\n\n\nCreate an `application` function that takes a parent parameter having the following functionality:\n - create a root dom element with class `chat`\n - create an input element with 100% width with keyup event listener that on enter key press:\n   - save the input value to instruction variable and clear the input\n   - POST the json having instruction and full as false to `/`, on response add a script tag to the body with id `run-script` and add the response text content to the script tag\n - return dom element\n",
    "result": "```javascript\nfunction application(parent) {\n    const root = document.createElement('div');\n    root.className = 'chat';\n\n    const input = document.createElement('input');\n    input.style.width = '100%';\n    root.appendChild(input);\n\n    input.addEventListener('keyup', function(event) {\n        if (event.key === 'Enter') {\n            const instruction = input.value;\n            input.value = '';\n\n            fetch('/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ instruction: instruction, full: false })\n            })\n            .then(response => response.text())\n            .then(scriptContent => {\n                const scriptTag = document.createElement('script');\n                scriptTag.id = 'run-script';\n                scriptTag.textContent = scriptContent;\n                document.body.appendChild(scriptTag);\n            });\n        }\n    });\n\n    parent.appendChild(root);\n    return root;\n}\n```",
    "output": "function application(parent) {\n    const root = document.createElement('div');\n    root.className = 'chat';\n\n    const input = document.createElement('input');\n    input.style.width = '100%';\n    root.appendChild(input);\n\n    input.addEventListener('keyup', function(event) {\n        if (event.key === 'Enter') {\n            const instruction = input.value;\n            input.value = '';\n\n            fetch('/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ instruction: instruction, full: false })\n            })\n            .then(response => response.text())\n            .then(scriptContent => {\n                const scriptTag = document.createElement('script');\n                scriptTag.id = 'run-script';\n                scriptTag.textContent = scriptContent;\n                document.body.appendChild(scriptTag);\n            });\n        }\n    });\n\n    parent.appendChild(root);\n    return root;\n}\n",
    "library": "function application(parent) { ... }\n"
}