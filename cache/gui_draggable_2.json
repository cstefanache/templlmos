{
    "crc": 3644546506,
    "compiled_instruction": [
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\n\n\n Implement the following functions on the `window.os` object under `gui` key:\n- `makeDraggable(root, dragHandleHTMLElement)` - when user is dragging the dragHandleHTMLElement, move the root HTMLElement \n### Response:\n",
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\n\n\n Implement the following functions on the `window.os` object under `gui` key:\n`makeResizable(root, resizeHandleHTMLElement) that:` \n - resize (both width and height) the root HTMLElement element by dragging the resizeHandle DOM element.\n - update starting width and height on mouseup \n### Response:\n",
        "You are a frontend web developer, do not use jquery that writes only browser JS, JavaScript, HTML and CSS\n### Instruction:\n\n\n Implement `bringToFront(rootDOMNode)` on the `window.os.gui` that:\n- creates an internal function that:\n  * takes all elements with the same class as rootDomNode\n  * iterate through them and sets the z-index to 0\n  * sets the z-index of rootDOMNode to 1\n- adds a mousedown event listener to rootDOMNode that calls the internal function \n### Response:\n"
    ],
    "output": [
        "// Firstly, we need to check if window.os exists and gui exists inside it. If not, we create them.\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Now we implement makeDraggable function\nwindow.os.gui.makeDraggable = function (root, dragHandleHTMLElement) {\n    var isDragging = false; // flag to check if we're currently dragging\n    var offsetX = 0; // offset from mouse to element start position\n    var offsetY = 0; // offset from mouse to element start position\n    \n    // function to start dragging\n    function startDragging(e) {\n        e = e || window.event; // for IE\n        e.preventDefault(); // prevent selection of text while dragging\n        isDragging = true; // set flag to true\n        offsetX = e.clientX - root.getBoundingClientRect().left; // calculate offsets\n        offsetY = e.clientY - root.getBoundingClientRect().top;\n        document.onmousemove = function (e) { moveElement(e); }; // set mousemove event handler\n        document.onmouseup = function () { stopDragging(); }; // set mouseup event handler\n    }\n    \n    // function to move element during dragging\n    function moveElement(e) {\n        e = e || window.event; // for IE\n        if (isDragging) { // if we're currently dragging\n            var newX = e.clientX - offsetX; // calculate new position\n            var newY = e.clientY - offsetY; // calculate new position\n            root.style.left = newX + 'px'; // set new position\n            root.style.top = newY + 'px'; // set new position\n        }\n    }\n    \n    // function to stop dragging\n    function stopDragging() {\n        isDragging = false; // set flag to false\n        document.onmousemove = null; // remove mousemove event handler\n        document.onmouseup = null; // remove mouseup event handler\n    }\n    \n    // add mousedown event listener to drag handle\n    dragHandleHTMLElement.addEventListener('mousedown', startDragging);\n}\n\n",
        "// Create 'gui' namespace if it doesn't exist\nif (!window.os) {\n    window.os = {};\n}\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to make an element resizable\nwindow.os.gui.makeResizable = function (root, resizeHandleElement) {\n    var startX;\n    var startY;\n    var startWidth = root.offsetWidth;\n    var startHeight = root.offsetHeight;\n    \n    // Function to handle mouse down event\n    function handleMouseDown(e) {\n        e = e || window.event;\n        startX = e.clientX;\n        startY = e.clientY;\n        document.onmouseup = handleMouseUp;\n        document.onmousemove = handleMouseMove;\n    }\n    \n    // Function to handle mouse up event\n    function handleMouseUp() {\n        document.onmouseup = null;\n        document.onmousemove = null;\n        startWidth = root.offsetWidth;\n        startHeight = root.offsetHeight;\n    }\n    \n    // Function to handle mouse move event\n    function handleMouseMove(e) {\n        e = e || window.event;\n        var diffX = e.clientX - startX;\n        var diffY = e.clientY - startY;\n        root.style.width = (startWidth + diffX) + 'px';\n        root.style.height = (startHeight + diffY) + 'px';\n    }\n    \n    // Add event listeners to handle mouse events\n    resizeHandleElement.addEventListener('mousedown', handleMouseDown);\n}\n\n",
        "// Assuming window.os.gui is already defined\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to bring to front\nwindow.os.gui.bringToFront = function (rootDomNode) {\n    // Internal function to set z-index to 0 for all elements with same class as rootDomNode\n    var setZIndexToZero = function (className) {\n        var elements = document.getElementsByClassName(className);\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.zIndex = 0;\n        }\n    };\n    \n    // Set z-index of rootDomNode to 1\n    rootDomNode.style.zIndex = 1;\n    \n    // Add mousedown event listener to rootDomNode\n    rootDomNode.addEventListener('mousedown', function () {\n        setZIndexToZero(rootDomNode.className);\n    });\n};\n\n"
    ],
    "library": "This JavaScript function `makeDraggable` is used for making an HTML element draggable. It takes two parameters - `root` which is the HTML element you want to make draggable and `dragHandleHTMLElement` which is the HTML element you want to use as the drag handle (the element you click on to start dragging). \n\nHere's how you can use this function in your code:\n\n```javascript\n// Assuming you have an element with id 'myElement' as root and an element with id 'myDragHandle' as drag handle\nvar root = document.getElementById('myElement');\nvar dragHandle = document.getElementById('myDragHandle');\n\n// Call makeDraggable function with root element and drag handle element as arguments\nwindow.os.gui.makeDraggable(root, dragHandle);\n```\n\nThis will make the element with id 'myElement' draggable using the element with id 'myDragHandle' as the drag handle. The element will move in relation to its original position when you start dragging. \n\nPlease note that this function uses event listeners for 'mousedown', 'mousemove', and 'mouseup' events which means you don't have to manually add these event listeners in your HTML code. The function will automatically handle these events for you. \n\nAlso note that this function does not handle cases where the drag handle is moved outside of its parent container or goes off-screen. You may want to add additional logic for these cases depending on your specific needs.\n\n```This JavaScript function is used to make an element resizable by adding mouse events to a resize handle element. The function takes two parameters - `root` and `resizeHandleElement`. \n\n- `root` is the element you want to make resizable, typically this would be an element with a set width and height, such as a div or an image. \n- `resizeHandleElement` is the element you want to use as the resize handle, typically this would be an element with a specific class or id, such as an arrow or dot icon. \n\nHere is how you can use this function in your code:\n\n```javascript\n// Assuming you have an element with id \"myElement\" and another element with id \"resizeHandle\"\nvar rootElement = document.getElementById(\"myElement\");\nvar resizeHandleElement = document.getElementById(\"resizeHandle\");\n\n// Call makeResizable function with root and resizeHandle elements as arguments\nwindow.os.gui.makeResizable(rootElement, resizeHandleElement);\n```\n\nIn this example, when you click and drag on the `resizeHandleElement`, the `rootElement` will resize according to your mouse movements, creating an effect of being resizable. The resizing is done by changing the width and height of the `rootElement` using JavaScript's `style` property, which allows for dynamic changes to element dimensions. \n\nPlease note, this function does not handle cases where the resized element would go off-screen or overlap other elements on your page, so you may need to add additional logic to handle these cases as needed.\n\n```This JavaScript code defines a function `bringToFront` in `window.os.gui` namespace, which brings a given DOM node to front of other nodes with same class name when it's mousedown event is triggered. \n\nHere's how you can use this function:\n\n```javascript\nvar myDomNode = document.getElementById('myElement');  // Assume 'myElement' exists in your HTML document\nwindow.os.gui.bringToFront(myDomNode);  // Calling function with DOM node as argument\n```\nIn this example, when `myDomNode` (which you get from `document.getElementById('myElement')`) is mousedown, it will set z-index of all other DOM nodes with same class name as `myDomNode` to 0, effectively bringing them to front of other elements in the z-axis stacking order. \n\nPlease note, `bringToFront` function assumes that your DOM nodes have class names set, and you want to bring other nodes with same class name to front when you click on one of them. If your DOM nodes don't have class names, or you want to bring other nodes with different class names to front, you would need to modify `setZIndexToZero` function inside `bringToFront` function accordingly. \n\nAlso, `bringToFront` function sets z-index of `rootDomNode` to 1, so it will be on top of other nodes with same class name when they're created or added after `bringToFront` function call. If you want `rootDomNode` to be on top of other nodes regardless of their initial z-index, you would need to set `rootDomNode`'s z-index to 2 or more in CSS or use `bringToFront` function with `rootDomNode`'s class name instead of `rootDomNode` itself. \n\nThis function doesn't return anything, so you can't use it's return value in any way. It's just a side effect of setting z-index of DOM nodes. \n\nPlease replace `'myElement'` with your actual element id in your HTML document.\n\n```",
    "library_input": "### Instruction:\nYou are a javascript developer that documents all the declared functions by providing sample usage.\n```\n // Assuming window.os.gui is already defined\nif (!window.os.gui) {\n    window.os.gui = {};\n}\n\n// Function to bring to front\nwindow.os.gui.bringToFront = function (rootDomNode) {\n    // Internal function to set z-index to 0 for all elements with same class as rootDomNode\n    var setZIndexToZero = function (className) {\n        var elements = document.getElementsByClassName(className);\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.zIndex = 0;\n        }\n    };\n    \n    // Set z-index of rootDomNode to 1\n    rootDomNode.style.zIndex = 1;\n    \n    // Add mousedown event listener to rootDomNode\n    rootDomNode.addEventListener('mousedown', function () {\n        setZIndexToZero(rootDomNode.className);\n    });\n};\n\n \n```\n### Response:\n"
}